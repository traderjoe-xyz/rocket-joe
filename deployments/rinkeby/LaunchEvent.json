{
  "address": "0x9b1a7A7E2Cd271760b5FcA311EbCa64975E4C6cd",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "AvaxEmergencyWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "IncentiveTokenWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "issuer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "IssuerLiquidityWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenIncentivesPercent",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "floorPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxWithdrawPenalty",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fixedWithdrawPenalty",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxAllocation",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "userTimelock",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "issuerTimelock",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenReserve",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenIncentives",
          "type": "uint256"
        }
      ],
      "name": "LaunchEventInitialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token1",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount0",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount1",
          "type": "uint256"
        }
      ],
      "name": "LiquidityPoolCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "Stopped",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TokenEmergencyWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "UserLiquidityWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "avaxAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rJoeAmount",
          "type": "uint256"
        }
      ],
      "name": "UserParticipated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "avaxAmount",
          "type": "uint256"
        }
      ],
      "name": "UserWithdrawn",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "PHASE_ONE_DURATION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PHASE_ONE_NO_FEE_DURATION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PHASE_TWO_DURATION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allowEmergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "auctionStart",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "createPair",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentPhase",
      "outputs": [
        {
          "internalType": "enum LaunchEvent.Phase",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositAVAX",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fixedWithdrawPenalty",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "floorPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPenalty",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_avaxAmount",
          "type": "uint256"
        }
      ],
      "name": "getRJoeAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getReserves",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "getUserInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "allocation",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "hasWithdrawnPair",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "hasWithdrawnIncentives",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_issuer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_auctionStart",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenIncentivesPercent",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_floorPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxWithdrawPenalty",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_fixedWithdrawPenalty",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxAllocation",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_userTimelock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_issuerTimelock",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "issuer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "issuerTimelock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxAllocation",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxWithdrawPenalty",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pair",
      "outputs": [
        {
          "internalType": "contract IJoePair",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "pairBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rJoe",
      "outputs": [
        {
          "internalType": "contract IRocketJoeToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rJoePerAvax",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rocketJoeFactory",
      "outputs": [
        {
          "internalType": "contract IRocketJoeFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "skim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stopped",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IERC20Metadata",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenIncentivesPercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "userTimelock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawAVAX",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawIncentives",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x43463fa4301662bfca72ad11996033299c2fb6f0d4f487f6f0ffeaf26edbe5e9",
  "receipt": {
    "to": null,
    "from": "0x1d9D82344E76769EB727521822D1EacB834A9024",
    "contractAddress": "0x9b1a7A7E2Cd271760b5FcA311EbCa64975E4C6cd",
    "transactionIndex": 7,
    "gasUsed": "5256856",
    "logsBloom": "0x
    "blockHash": "0x2207da84834d095da7e29563b8933bd69335302b0e29255dacad7095b93bb9fd",
    "transactionHash": "0x43463fa4301662bfca72ad11996033299c2fb6f0d4f487f6f0ffeaf26edbe5e9",
    "logs": [
      {
        "transactionIndex": 7,
        "blockNumber": 10059788,
        "transactionHash": "0x43463fa4301662bfca72ad11996033299c2fb6f0d4f487f6f0ffeaf26edbe5e9",
        "address": "0x9b1a7A7E2Cd271760b5FcA311EbCa64975E4C6cd",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000001d9d82344e76769eb727521822d1eacb834a9024"
        ],
        "data": "0x",
        "logIndex": 11,
        "blockHash": "0x2207da84834d095da7e29563b8933bd69335302b0e29255dacad7095b93bb9fd"
      }
    ],
    "blockNumber": 10059788,
    "cumulativeGasUsed": "5979007",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "7261b3736d8f60e5be4201443b64a05d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AvaxEmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"IncentiveTokenWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"IssuerLiquidityWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenIncentivesPercent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"floorPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxWithdrawPenalty\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fixedWithdrawPenalty\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxAllocation\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userTimelock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"issuerTimelock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenReserve\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenIncentives\",\"type\":\"uint256\"}],\"name\":\"LaunchEventInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"LiquidityPoolCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Stopped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenEmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UserLiquidityWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"avaxAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rJoeAmount\",\"type\":\"uint256\"}],\"name\":\"UserParticipated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"avaxAmount\",\"type\":\"uint256\"}],\"name\":\"UserWithdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PHASE_ONE_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PHASE_ONE_NO_FEE_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PHASE_TWO_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allowEmergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentPhase\",\"outputs\":[{\"internalType\":\"enum LaunchEvent.Phase\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositAVAX\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fixedWithdrawPenalty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"floorPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPenalty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_avaxAmount\",\"type\":\"uint256\"}],\"name\":\"getRJoeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"allocation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"hasWithdrawnPair\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"hasWithdrawnIncentives\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_issuer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_auctionStart\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenIncentivesPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_floorPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxWithdrawPenalty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fixedWithdrawPenalty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxAllocation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_userTimelock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_issuerTimelock\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"issuer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"issuerTimelock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxAllocation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWithdrawPenalty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"contract IJoePair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pairBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rJoe\",\"outputs\":[{\"internalType\":\"contract IRocketJoeToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rJoePerAvax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rocketJoeFactory\",\"outputs\":[{\"internalType\":\"contract IRocketJoeFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"skim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopped\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenIncentivesPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"userTimelock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawAVAX\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawIncentives\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Trader Joe\",\"kind\":\"dev\",\"methods\":{\"createPair()\":{\"details\":\"Can only be called once after phase 3 has started\"},\"getPenalty()\":{\"returns\":{\"_0\":\"The penalty to apply to a withdrawal amount\"}},\"getRJoeAmount(uint256)\":{\"params\":{\"_avaxAmount\":\"The amount of AVAX to deposit\"},\"returns\":{\"_0\":\"The amount of rJOE needed\"}},\"getReserves()\":{\"returns\":{\"_0\":\"The balances of AVAX and issued token held by the launch contract\"}},\"initialize(address,uint256,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256)\":{\"details\":\"This function is called by the factory immediately after it creates the contract instance\",\"params\":{\"_auctionStart\":\"The start time of the auction\",\"_fixedWithdrawPenalty\":\"The fixed withdraw penalty during phase 2, in parts per 1e18\",\"_floorPrice\":\"The minimum price the token is sold at\",\"_issuer\":\"Address of the token issuer\",\"_issuerTimelock\":\"The time the issuer must wait after auction ends to withdraw liquidity\",\"_maxAllocation\":\"The maximum amount of AVAX depositable\",\"_maxWithdrawPenalty\":\"The max withdraw penalty during phase 1, in parts per 1e18\",\"_token\":\"The contract address of auctioned token\",\"_tokenIncentivesPercent\":\"The token incentives percent, in part per 1e18, e.g 5e16 is 5% of incentives\",\"_userTimelock\":\"The time a user must wait after auction ends to withdraw liquidity\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pairBalance(address)\":{\"params\":{\"_user\":\"The address of the user to check\"},\"returns\":{\"_0\":\"The user's balance of liquidity pool token\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdrawAVAX(uint256)\":{\"params\":{\"_amount\":\"The amount of AVAX to withdraw\"}}},\"stateVariables\":{\"avaxAllocated\":{\"details\":\"The total amount of avax that was sent to the router to create the initial liquidity pair. Used to calculate the amount of LP to send based on the user's participation in the launch event\"},\"avaxReserve\":{\"details\":\"avaxReserve is the exact amount of AVAX that needs to be kept inside the contract in order to send everyone's AVAX. If there is some excess (because someone sent token directly to the contract), the penaltyCollector can collect the excess using `skim()`\"},\"floorPrice\":{\"details\":\"floorPrice is scaled to 1e18\"},\"lpSupply\":{\"details\":\"The exact supply of LP minted when creating the initial liquidity pair.\"},\"pair\":{\"details\":\"The address of the JoePair, set after createLiquidityPool is called\"},\"tokenIncentiveIssuerRefund\":{\"details\":\"The share refunded to the issuer. Users receive 5% of the token that were sent to the Router. If the floor price is not met, the incentives still needs to be 5% of the value sent to the Router, so there will be an excess of tokens returned to the issuer if he calls `withdrawIncentives()`\"},\"tokenIncentivesBalance\":{\"details\":\"Keeps track of amount of token incentives that needs to be kept by contract in order to send the right amounts to issuer and users\"},\"tokenIncentivesForUsers\":{\"details\":\"Total incentives for users for locking their LPs for an additional period of time after the pair is created\"},\"tokenIncentivesPercent\":{\"details\":\"Amount of tokens used as incentives for locking up LPs during phase 3, in parts per 1e18 and expressed as an additional percentage to the tokens for auction. E.g. if tokenIncentivesPercent = 5e16 (5%), and issuer sends 105 000 tokens, then 105 000 * 1e18 / (1e18 + 5e16) = 5 000 tokens are used for incentives\"},\"tokenReserve\":{\"details\":\"Used to know how many issuing tokens will be sent to JoeRouter to create the initial liquidity pair. If floor price is not met, we will send fewer issuing tokens and `tokenReserve` will keep track of the leftover amount. It's then used to calculate the number of tokens needed to be sent to both issuer and users (if there are leftovers and every token is sent to the pair, tokenReserve will be equal to 0)\"}},\"title\":\"Rocket Joe Launch Event\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"allowEmergencyWithdraw()\":{\"notice\":\"Stops the launch event and allows participants withdraw deposits\"},\"auctionStart()\":{\"notice\":\"The start time of phase 1\"},\"createPair()\":{\"notice\":\"Create the JoePair\"},\"currentPhase()\":{\"notice\":\"The current phase the auction is in\"},\"depositAVAX()\":{\"notice\":\"Deposits AVAX and burns rJoe\"},\"emergencyWithdraw()\":{\"notice\":\"Withdraw AVAX if launch has been cancelled\"},\"fixedWithdrawPenalty()\":{\"notice\":\"The fixed withdraw penalty during phase 2, in parts per 1e18 e.g. fixed penalty of 20% `fixedWithdrawPenalty = 2e17`\"},\"floorPrice()\":{\"notice\":\"Floor price in AVAX per token (can be 0)\"},\"getPenalty()\":{\"notice\":\"Returns the current penalty for early withdrawal\"},\"getRJoeAmount(uint256)\":{\"notice\":\"Get the rJOE amount needed to deposit AVAX\"},\"getReserves()\":{\"notice\":\"Returns the current balance of the pool\"},\"initialize(address,uint256,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256)\":{\"notice\":\"Initialise the launch event with needed paramaters\"},\"issuer()\":{\"notice\":\"Issuer of sale tokens\"},\"issuerTimelock()\":{\"notice\":\"Timelock duration post phase 3 When can issuer withdraw their LP tokens\"},\"maxWithdrawPenalty()\":{\"notice\":\"The max withdraw penalty during phase 1, in parts per 1e18 e.g. max penalty of 50% `maxWithdrawPenalty`= 5e17\"},\"pairBalance(address)\":{\"notice\":\"The total amount of liquidity pool tokens the user can withdraw\"},\"skim()\":{\"notice\":\"Force balances to match tokens that were deposited, but not sent directly to the contract. Any excess tokens are sent to the penaltyCollector\"},\"userTimelock()\":{\"notice\":\"Timelock duration post phase 3 when can user withdraw their LP tokens\"},\"withdrawAVAX(uint256)\":{\"notice\":\"Withdraw AVAX, only permitted during phase 1 and 2\"},\"withdrawIncentives()\":{\"notice\":\"Withdraw incentives tokens\"},\"withdrawLiquidity()\":{\"notice\":\"Withdraw liquidity pool tokens\"}},\"notice\":\"A liquidity launch contract enabling price discovery and token distribution at secondary market listing price\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LaunchEvent.sol\":\"LaunchEvent\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/LaunchEvent.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"./interfaces/IJoeFactory.sol\\\";\\nimport \\\"./interfaces/IJoePair.sol\\\";\\nimport \\\"./interfaces/IJoeRouter02.sol\\\";\\nimport \\\"./interfaces/IRocketJoeFactory.sol\\\";\\nimport \\\"./interfaces/IRocketJoeToken.sol\\\";\\nimport \\\"./interfaces/IWAVAX.sol\\\";\\n\\n/// @title Rocket Joe Launch Event\\n/// @author Trader Joe\\n/// @notice A liquidity launch contract enabling price discovery and token distribution at secondary market listing price\\ncontract LaunchEvent is Ownable {\\n    using SafeERC20 for IERC20Metadata;\\n\\n    /// @notice The phases the launch event can be in\\n    /// @dev Should these have more semantic names: Bid, Cancel, Withdraw\\n    enum Phase {\\n        NotStarted,\\n        PhaseOne,\\n        PhaseTwo,\\n        PhaseThree\\n    }\\n\\n    struct UserInfo {\\n        /// @notice How much AVAX user can deposit for this launch event\\n        /// @dev Can be increased by burning more rJOE, but will always be\\n        /// smaller than `maxAllocation`\\n        uint256 allocation;\\n        /// @notice How much AVAX user has deposited for this launch event\\n        uint256 balance;\\n        /// @notice Whether user has withdrawn the LP\\n        bool hasWithdrawnPair;\\n        /// @notice Whether user has withdrawn the issuing token incentives\\n        bool hasWithdrawnIncentives;\\n    }\\n\\n    /// @notice Issuer of sale tokens\\n    address public issuer;\\n\\n    /// @notice The start time of phase 1\\n    uint256 public auctionStart;\\n\\n    uint256 public PHASE_ONE_DURATION;\\n    uint256 public PHASE_ONE_NO_FEE_DURATION;\\n    uint256 public PHASE_TWO_DURATION;\\n\\n    /// @dev Amount of tokens used as incentives for locking up LPs during phase 3,\\n    /// in parts per 1e18 and expressed as an additional percentage to the tokens for auction.\\n    /// E.g. if tokenIncentivesPercent = 5e16 (5%), and issuer sends 105 000 tokens,\\n    /// then 105 000 * 1e18 / (1e18 + 5e16) = 5 000 tokens are used for incentives\\n    uint256 public tokenIncentivesPercent;\\n\\n    /// @notice Floor price in AVAX per token (can be 0)\\n    /// @dev floorPrice is scaled to 1e18\\n    uint256 public floorPrice;\\n\\n    /// @notice Timelock duration post phase 3 when can user withdraw their LP tokens\\n    uint256 public userTimelock;\\n\\n    /// @notice Timelock duration post phase 3 When can issuer withdraw their LP tokens\\n    uint256 public issuerTimelock;\\n\\n    /// @notice The max withdraw penalty during phase 1, in parts per 1e18\\n    /// e.g. max penalty of 50% `maxWithdrawPenalty`= 5e17\\n    uint256 public maxWithdrawPenalty;\\n\\n    /// @notice The fixed withdraw penalty during phase 2, in parts per 1e18\\n    /// e.g. fixed penalty of 20% `fixedWithdrawPenalty = 2e17`\\n    uint256 public fixedWithdrawPenalty;\\n\\n    IRocketJoeToken public rJoe;\\n    uint256 public rJoePerAvax;\\n    IWAVAX private WAVAX;\\n    IERC20Metadata public token;\\n\\n    IJoeRouter02 private router;\\n    IJoeFactory private factory;\\n    IRocketJoeFactory public rocketJoeFactory;\\n\\n    bool private initialized;\\n    bool public stopped;\\n\\n    uint256 public maxAllocation;\\n\\n    mapping(address => UserInfo) public getUserInfo;\\n\\n    /// @dev The address of the JoePair, set after createLiquidityPool is called\\n    IJoePair public pair;\\n\\n    /// @dev The total amount of avax that was sent to the router to create the initial liquidity pair.\\n    /// Used to calculate the amount of LP to send based on the user's participation in the launch event\\n    uint256 private avaxAllocated;\\n\\n    /// @dev The exact supply of LP minted when creating the initial liquidity pair.\\n    uint256 private lpSupply;\\n\\n    /// @dev Used to know how many issuing tokens will be sent to JoeRouter to create the initial\\n    /// liquidity pair. If floor price is not met, we will send fewer issuing tokens and `tokenReserve`\\n    /// will keep track of the leftover amount. It's then used to calculate the number of tokens needed\\n    /// to be sent to both issuer and users (if there are leftovers and every token is sent to the pair,\\n    /// tokenReserve will be equal to 0)\\n    uint256 private tokenReserve;\\n\\n    /// @dev Keeps track of amount of token incentives that needs to be kept by contract in order to send the right\\n    /// amounts to issuer and users\\n    uint256 private tokenIncentivesBalance;\\n    /// @dev Total incentives for users for locking their LPs for an additional period of time after the pair is created\\n    uint256 private tokenIncentivesForUsers;\\n    /// @dev The share refunded to the issuer. Users receive 5% of the token that were sent to the Router.\\n    /// If the floor price is not met, the incentives still needs to be 5% of the value sent to the Router, so there\\n    /// will be an excess of tokens returned to the issuer if he calls `withdrawIncentives()`\\n    uint256 private tokenIncentiveIssuerRefund;\\n\\n    /// @dev avaxReserve is the exact amount of AVAX that needs to be kept inside the contract in order to send everyone's\\n    /// AVAX. If there is some excess (because someone sent token directly to the contract), the\\n    /// penaltyCollector can collect the excess using `skim()`\\n    uint256 private avaxReserve;\\n\\n    event LaunchEventInitialized(\\n        uint256 tokenIncentivesPercent,\\n        uint256 floorPrice,\\n        uint256 maxWithdrawPenalty,\\n        uint256 fixedWithdrawPenalty,\\n        uint256 maxAllocation,\\n        uint256 userTimelock,\\n        uint256 issuerTimelock,\\n        uint256 tokenReserve,\\n        uint256 tokenIncentives\\n    );\\n\\n    event UserParticipated(\\n        address indexed user,\\n        uint256 avaxAmount,\\n        uint256 rJoeAmount\\n    );\\n\\n    event UserWithdrawn(address indexed user, uint256 avaxAmount);\\n\\n    event IncentiveTokenWithdraw(\\n        address indexed user,\\n        address indexed token,\\n        uint256 amount\\n    );\\n\\n    event LiquidityPoolCreated(\\n        address indexed pair,\\n        address indexed token0,\\n        address indexed token1,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n\\n    event UserLiquidityWithdrawn(\\n        address indexed user,\\n        address indexed pair,\\n        uint256 amount\\n    );\\n\\n    event IssuerLiquidityWithdrawn(\\n        address indexed issuer,\\n        address indexed pair,\\n        uint256 amount\\n    );\\n\\n    event Stopped();\\n\\n    event AvaxEmergencyWithdraw(address indexed user, uint256 amount);\\n\\n    event TokenEmergencyWithdraw(address indexed user, uint256 amount);\\n\\n    /// @notice Modifier which ensures contract is in a defined phase\\n    modifier atPhase(Phase _phase) {\\n        _atPhase(_phase);\\n        _;\\n    }\\n\\n    /// @notice Modifier which ensures the caller's timelock to withdraw has elapsed\\n    modifier timelockElapsed() {\\n        uint256 phase3Start = auctionStart +\\n            PHASE_ONE_DURATION +\\n            PHASE_TWO_DURATION;\\n        if (msg.sender == issuer) {\\n            require(\\n                block.timestamp > phase3Start + issuerTimelock,\\n                \\\"LaunchEvent: can't withdraw before issuer's timelock\\\"\\n            );\\n        } else {\\n            require(\\n                block.timestamp > phase3Start + userTimelock,\\n                \\\"LaunchEvent: can't withdraw before user's timelock\\\"\\n            );\\n        }\\n        _;\\n    }\\n\\n    /// @notice Ensures launch event is stopped/running\\n    modifier isStopped(bool _stopped) {\\n        if (_stopped) {\\n            require(stopped, \\\"LaunchEvent: is still running\\\");\\n        } else {\\n            require(!stopped, \\\"LaunchEvent: stopped\\\");\\n        }\\n        _;\\n    }\\n\\n    /// @notice Initialise the launch event with needed paramaters\\n    /// @param _issuer Address of the token issuer\\n    /// @param _auctionStart The start time of the auction\\n    /// @param _token The contract address of auctioned token\\n    /// @param _tokenIncentivesPercent The token incentives percent, in part per 1e18, e.g 5e16 is 5% of incentives\\n    /// @param _floorPrice The minimum price the token is sold at\\n    /// @param _maxWithdrawPenalty The max withdraw penalty during phase 1, in parts per 1e18\\n    /// @param _fixedWithdrawPenalty The fixed withdraw penalty during phase 2, in parts per 1e18\\n    /// @param _maxAllocation The maximum amount of AVAX depositable\\n    /// @param _userTimelock The time a user must wait after auction ends to withdraw liquidity\\n    /// @param _issuerTimelock The time the issuer must wait after auction ends to withdraw liquidity\\n    /// @dev This function is called by the factory immediately after it creates the contract instance\\n    function initialize(\\n        address _issuer,\\n        uint256 _auctionStart,\\n        address _token,\\n        uint256 _tokenIncentivesPercent,\\n        uint256 _floorPrice,\\n        uint256 _maxWithdrawPenalty,\\n        uint256 _fixedWithdrawPenalty,\\n        uint256 _maxAllocation,\\n        uint256 _userTimelock,\\n        uint256 _issuerTimelock\\n    ) external atPhase(Phase.NotStarted) {\\n        require(!initialized, \\\"LaunchEvent: already initialized\\\");\\n\\n        rocketJoeFactory = IRocketJoeFactory(msg.sender);\\n        WAVAX = IWAVAX(rocketJoeFactory.wavax());\\n        router = IJoeRouter02(rocketJoeFactory.router());\\n        factory = IJoeFactory(rocketJoeFactory.factory());\\n        rJoe = IRocketJoeToken(rocketJoeFactory.rJoe());\\n        rJoePerAvax = rocketJoeFactory.rJoePerAvax();\\n\\n        require(\\n            _maxWithdrawPenalty <= 5e17,\\n            \\\"LaunchEvent: maxWithdrawPenalty too big\\\"\\n        ); // 50%\\n        require(\\n            _fixedWithdrawPenalty <= 5e17,\\n            \\\"LaunchEvent: fixedWithdrawPenalty too big\\\"\\n        ); // 50%\\n        require(\\n            _userTimelock <= 7 days,\\n            \\\"LaunchEvent: can't lock user LP for more than 7 days\\\"\\n        );\\n        require(\\n            _issuerTimelock > _userTimelock,\\n            \\\"LaunchEvent: issuer can't withdraw before users\\\"\\n        );\\n        require(\\n            _auctionStart > block.timestamp,\\n            \\\"LaunchEvent: start of phase 1 cannot be in the past\\\"\\n        );\\n\\n        issuer = _issuer;\\n\\n        auctionStart = _auctionStart;\\n        PHASE_ONE_DURATION = rocketJoeFactory.PHASE_ONE_DURATION();\\n        PHASE_ONE_NO_FEE_DURATION = rocketJoeFactory.PHASE_ONE_NO_FEE_DURATION();\\n        PHASE_TWO_DURATION = rocketJoeFactory.PHASE_TWO_DURATION();\\n\\n        token = IERC20Metadata(_token);\\n        uint256 balance = token.balanceOf(address(this));\\n\\n        tokenIncentivesPercent = _tokenIncentivesPercent;\\n\\n        /// We do this math because `tokenIncentivesForUsers + tokenReserve = tokenSent`\\n        /// and `tokenIncentivesForUsers = tokenReserve * 0.05` (i.e. incentives are 5% of reserves for issuing).\\n        /// E.g. if issuer sends 105e18 tokens, `tokenReserve = 100e18` and `tokenIncentives = 5e18`\\n        tokenReserve = (balance * 1e18) / (1e18 + _tokenIncentivesPercent);\\n        tokenIncentivesForUsers = balance - tokenReserve;\\n        tokenIncentivesBalance = tokenIncentivesForUsers;\\n\\n        floorPrice = _floorPrice;\\n\\n        maxWithdrawPenalty = _maxWithdrawPenalty;\\n        fixedWithdrawPenalty = _fixedWithdrawPenalty;\\n\\n        maxAllocation = _maxAllocation;\\n\\n        userTimelock = _userTimelock;\\n        issuerTimelock = _issuerTimelock;\\n        initialized = true;\\n\\n        emit LaunchEventInitialized(\\n            tokenIncentivesPercent,\\n            floorPrice,\\n            maxWithdrawPenalty,\\n            fixedWithdrawPenalty,\\n            maxAllocation,\\n            userTimelock,\\n            issuerTimelock,\\n            tokenReserve,\\n            tokenIncentivesBalance\\n        );\\n    }\\n\\n    /// @notice The current phase the auction is in\\n    function currentPhase() public view returns (Phase) {\\n        if (block.timestamp < auctionStart || auctionStart == 0) {\\n            return Phase.NotStarted;\\n        } else if (block.timestamp < auctionStart + PHASE_ONE_DURATION) {\\n            return Phase.PhaseOne;\\n        } else if (\\n            block.timestamp <\\n            auctionStart + PHASE_ONE_DURATION + PHASE_TWO_DURATION\\n        ) {\\n            return Phase.PhaseTwo;\\n        }\\n        return Phase.PhaseThree;\\n    }\\n\\n    /// @notice Deposits AVAX and burns rJoe\\n    function depositAVAX()\\n        external\\n        payable\\n        isStopped(false)\\n        atPhase(Phase.PhaseOne)\\n    {\\n        require(msg.sender != issuer, \\\"LaunchEvent: issuer cannot participate\\\");\\n        require(\\n            msg.value > 0,\\n            \\\"LaunchEvent: expected non-zero AVAX to deposit\\\"\\n        );\\n\\n        UserInfo storage user = getUserInfo[msg.sender];\\n        uint256 newAllocation = user.balance + msg.value;\\n        require(\\n            newAllocation <= maxAllocation,\\n            \\\"LaunchEvent: amount exceeds max allocation\\\"\\n        );\\n\\n        uint256 rJoeNeeded;\\n        // check if additional allocation is required.\\n        if (newAllocation > user.allocation) {\\n            // Burn tokens and update allocation.\\n            rJoeNeeded = getRJoeAmount(newAllocation - user.allocation);\\n            // Set allocation to the current balance as it's impossible\\n            // to buy more allocation without sending AVAX too\\n            user.allocation = newAllocation;\\n        }\\n\\n        user.balance = newAllocation;\\n        avaxReserve += msg.value;\\n\\n        if (rJoeNeeded > 0) {\\n            rJoe.burnFrom(msg.sender, rJoeNeeded);\\n        }\\n\\n        emit UserParticipated(msg.sender, msg.value, rJoeNeeded);\\n    }\\n\\n    /// @notice Withdraw AVAX, only permitted during phase 1 and 2\\n    /// @param _amount The amount of AVAX to withdraw\\n    function withdrawAVAX(uint256 _amount) public isStopped(false) {\\n        Phase _currentPhase = currentPhase();\\n        require(\\n            _currentPhase == Phase.PhaseOne || _currentPhase == Phase.PhaseTwo,\\n            \\\"LaunchEvent: unable to withdraw\\\"\\n        );\\n        require(_amount > 0, \\\"LaunchEvent: invalid withdraw amount\\\");\\n        UserInfo storage user = getUserInfo[msg.sender];\\n        require(\\n            user.balance >= _amount,\\n            \\\"LaunchEvent: withdrawn amount exceeds balance\\\"\\n        );\\n        user.balance -= _amount;\\n\\n        uint256 feeAmount = (_amount * getPenalty()) / 1e18;\\n        uint256 amountMinusFee = _amount - feeAmount;\\n\\n        avaxReserve -= _amount;\\n\\n        _safeTransferAVAX(msg.sender, amountMinusFee);\\n        if (feeAmount > 0) {\\n            _safeTransferAVAX(rocketJoeFactory.penaltyCollector(), feeAmount);\\n        }\\n        emit UserWithdrawn(msg.sender, _amount);\\n    }\\n\\n    /// @notice Create the JoePair\\n    /// @dev Can only be called once after phase 3 has started\\n    function createPair() external isStopped(false) atPhase(Phase.PhaseThree) {\\n        (address wavaxAddress, address tokenAddress) = (\\n            address(WAVAX),\\n            address(token)\\n        );\\n        require(\\n            factory.getPair(wavaxAddress, tokenAddress) == address(0) ||\\n                IJoePair(\\n                    IJoeFactory(factory).getPair(wavaxAddress, tokenAddress)\\n                ).totalSupply() ==\\n                0,\\n            \\\"LaunchEvent: liquid pair already exists\\\"\\n        );\\n        require(avaxReserve > 0, \\\"LaunchEvent: no avax balance\\\");\\n\\n        uint256 tokenAllocated = tokenReserve;\\n\\n        // Adjust the amount of tokens sent to the pool if floor price not met\\n        if (\\n            floorPrice > (avaxReserve * 10**token.decimals()) / tokenAllocated\\n        ) {\\n            tokenAllocated = (avaxReserve * 10**token.decimals()) / floorPrice;\\n            tokenIncentivesForUsers =\\n                (tokenIncentivesForUsers * tokenAllocated) /\\n                tokenReserve;\\n            tokenIncentiveIssuerRefund =\\n                tokenIncentivesBalance -\\n                tokenIncentivesForUsers;\\n        }\\n\\n        WAVAX.deposit{value: avaxReserve}();\\n        if (factory.getPair(wavaxAddress, tokenAddress) == address(0)) {\\n            pair = IJoePair(factory.createPair(wavaxAddress, tokenAddress));\\n        } else {\\n            pair = IJoePair(factory.getPair(wavaxAddress, tokenAddress));\\n        }\\n        WAVAX.transfer(address(pair), avaxReserve);\\n        token.safeTransfer(address(pair), tokenAllocated);\\n        lpSupply = pair.mint(address(this));\\n\\n        avaxAllocated = avaxReserve;\\n        avaxReserve = 0;\\n\\n        tokenReserve -= tokenAllocated;\\n\\n        emit LiquidityPoolCreated(\\n            address(pair),\\n            tokenAddress,\\n            wavaxAddress,\\n            tokenAllocated,\\n            avaxAllocated\\n        );\\n    }\\n\\n    /// @notice Withdraw liquidity pool tokens\\n    function withdrawLiquidity() external isStopped(false) timelockElapsed {\\n        require(address(pair) != address(0), \\\"LaunchEvent: pair not created\\\");\\n\\n        UserInfo storage user = getUserInfo[msg.sender];\\n        require(\\n            !user.hasWithdrawnPair,\\n            \\\"LaunchEvent: liquidity already withdrawn\\\"\\n        );\\n\\n        uint256 balance = pairBalance(msg.sender);\\n        user.hasWithdrawnPair = true;\\n\\n        if (msg.sender == issuer) {\\n            balance = lpSupply / 2;\\n\\n            emit IssuerLiquidityWithdrawn(msg.sender, address(pair), balance);\\n\\n            if (tokenReserve > 0) {\\n                uint256 amount = tokenReserve;\\n                tokenReserve = 0;\\n                token.safeTransfer(msg.sender, amount);\\n            }\\n        } else {\\n            emit UserLiquidityWithdrawn(msg.sender, address(pair), balance);\\n        }\\n\\n        pair.transfer(msg.sender, balance);\\n    }\\n\\n    /// @notice Withdraw incentives tokens\\n    function withdrawIncentives() external isStopped(false) {\\n        require(address(pair) != address(0), \\\"LaunchEvent: pair not created\\\");\\n\\n        UserInfo storage user = getUserInfo[msg.sender];\\n        require(\\n            !user.hasWithdrawnIncentives,\\n            \\\"LaunchEvent: incentives already withdrawn\\\"\\n        );\\n\\n        user.hasWithdrawnIncentives = true;\\n        uint256 amount;\\n\\n        if (msg.sender == issuer) {\\n            amount = tokenIncentiveIssuerRefund;\\n        } else {\\n            amount = (user.balance * tokenIncentivesForUsers) / avaxAllocated;\\n        }\\n\\n        require(amount > 0, \\\"LaunchEvent: caller has no incentive to claim\\\");\\n\\n        tokenIncentivesBalance -= amount;\\n\\n        token.safeTransfer(msg.sender, amount);\\n        emit IncentiveTokenWithdraw(msg.sender, address(token), amount);\\n    }\\n\\n    /// @notice Withdraw AVAX if launch has been cancelled\\n    function emergencyWithdraw() external isStopped(true) {\\n        if (msg.sender != issuer) {\\n            UserInfo storage user = getUserInfo[msg.sender];\\n            require(\\n                user.balance > 0,\\n                \\\"LaunchEvent: expected user to have non-zero balance to perform emergency withdraw\\\"\\n            );\\n\\n            uint256 balance = user.balance;\\n            user.balance = 0;\\n            avaxReserve -= balance;\\n\\n            _safeTransferAVAX(msg.sender, balance);\\n\\n            emit AvaxEmergencyWithdraw(msg.sender, balance);\\n        } else {\\n            uint256 balance = tokenReserve + tokenIncentivesBalance;\\n            tokenReserve = 0;\\n            tokenIncentivesBalance = 0;\\n            token.safeTransfer(issuer, balance);\\n            emit TokenEmergencyWithdraw(msg.sender, balance);\\n        }\\n    }\\n\\n    /// @notice Stops the launch event and allows participants withdraw deposits\\n    function allowEmergencyWithdraw() external {\\n        require(\\n            msg.sender == Ownable(address(rocketJoeFactory)).owner(),\\n            \\\"LaunchEvent: caller is not RocketJoeFactory owner\\\"\\n        );\\n        stopped = true;\\n        emit Stopped();\\n    }\\n\\n    /// @notice Force balances to match tokens that were deposited, but not sent directly to the contract.\\n    /// Any excess tokens are sent to the penaltyCollector\\n    function skim() external {\\n        address penaltyCollector = rocketJoeFactory.penaltyCollector();\\n\\n        uint256 excessToken = token.balanceOf(address(this)) -\\n            tokenReserve -\\n            tokenIncentivesBalance;\\n        if (excessToken > 0) {\\n            token.safeTransfer(penaltyCollector, excessToken);\\n        }\\n\\n        uint256 excessAvax = address(this).balance - avaxReserve;\\n        if (excessAvax > 0) {\\n            _safeTransferAVAX(penaltyCollector, excessAvax);\\n        }\\n    }\\n\\n    /// @notice Returns the current penalty for early withdrawal\\n    /// @return The penalty to apply to a withdrawal amount\\n    function getPenalty() public view returns (uint256) {\\n        uint256 timeElapsed = block.timestamp - auctionStart;\\n        if (timeElapsed < PHASE_ONE_NO_FEE_DURATION) {\\n            return 0;\\n        } else if (timeElapsed < PHASE_ONE_DURATION) {\\n            return\\n                ((timeElapsed - PHASE_ONE_NO_FEE_DURATION) *\\n                    maxWithdrawPenalty) /\\n                uint256(PHASE_ONE_DURATION - PHASE_ONE_NO_FEE_DURATION);\\n        }\\n        return fixedWithdrawPenalty;\\n    }\\n\\n    /// @notice Returns the current balance of the pool\\n    /// @return The balances of AVAX and issued token held by the launch contract\\n    function getReserves() external view returns (uint256, uint256) {\\n        return (avaxReserve, tokenReserve + tokenIncentivesBalance);\\n    }\\n\\n    /// @notice Get the rJOE amount needed to deposit AVAX\\n    /// @param _avaxAmount The amount of AVAX to deposit\\n    /// @return The amount of rJOE needed\\n    function getRJoeAmount(uint256 _avaxAmount) public view returns (uint256) {\\n        return _avaxAmount * rJoePerAvax;\\n    }\\n\\n    /// @notice The total amount of liquidity pool tokens the user can withdraw\\n    /// @param _user The address of the user to check\\n    /// @return The user's balance of liquidity pool token\\n    function pairBalance(address _user) public view returns (uint256) {\\n        UserInfo memory user = getUserInfo[_user];\\n        if (avaxAllocated == 0 || user.hasWithdrawnPair) {\\n            return 0;\\n        }\\n        return (user.balance * lpSupply) / avaxAllocated / 2;\\n    }\\n\\n    /// @dev Bytecode size optimization for the `atPhase` modifier.\\n    /// This works becuase internal functions are not in-lined in modifiers\\n    function _atPhase(Phase _phase) internal view {\\n        if (_phase == Phase.NotStarted) {\\n            require(\\n                currentPhase() == Phase.NotStarted,\\n                \\\"LaunchEvent: not in not started\\\"\\n            );\\n        } else if (_phase == Phase.PhaseOne) {\\n            require(\\n                currentPhase() == Phase.PhaseOne,\\n                \\\"LaunchEvent: not in phase one\\\"\\n            );\\n        } else if (_phase == Phase.PhaseTwo) {\\n            require(\\n                currentPhase() == Phase.PhaseTwo,\\n                \\\"LaunchEvent: not in phase two\\\"\\n            );\\n        } else if (_phase == Phase.PhaseThree) {\\n            require(\\n                currentPhase() == Phase.PhaseThree,\\n                \\\"LaunchEvent: not in phase three\\\"\\n            );\\n        } else {\\n            revert(\\\"LaunchEvent: unknown state\\\");\\n        }\\n    }\\n\\n    /// @notice Send AVAX\\n    /// @param _to The receiving address\\n    /// @param _value The amount of AVAX to send\\n    /// @dev Will revert on failure\\n    function _safeTransferAVAX(address _to, uint256 _value) internal {\\n        (bool success, ) = _to.call{value: _value}(new bytes(0));\\n        require(success, \\\"LaunchEvent: avax transfer failed\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x18117f339d8e7c7cf14d19416cb9cff8effa04cca33c3c075871bb417c465afc\",\"license\":\"MIT\"},\"contracts/interfaces/IJoeFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.8.0;\\n\\ninterface IJoeFactory {\\n    event PairCreated(\\n        address indexed token0,\\n        address indexed token1,\\n        address pair,\\n        uint256\\n    );\\n\\n    function feeTo() external view returns (address);\\n\\n    function feeToSetter() external view returns (address);\\n\\n    function migrator() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB)\\n        external\\n        view\\n        returns (address pair);\\n\\n    function allPairs(uint256) external view returns (address pair);\\n\\n    function allPairsLength() external view returns (uint256);\\n\\n    function createPair(address tokenA, address tokenB)\\n        external\\n        returns (address pair);\\n\\n    function setFeeTo(address) external;\\n\\n    function setFeeToSetter(address) external;\\n\\n    function setMigrator(address) external;\\n}\\n\",\"keccak256\":\"0xf5b7800d5a67418d3b435f7daa2ab0783c307bab1d603c8b7fb6f5da9055982f\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IJoePair.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.8.0;\\n\\ninterface IJoePair {\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    function name() external pure returns (string memory);\\n\\n    function symbol() external pure returns (string memory);\\n\\n    function decimals() external pure returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    function nonces(address owner) external view returns (uint256);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n    event Burn(\\n        address indexed sender,\\n        uint256 amount0,\\n        uint256 amount1,\\n        address indexed to\\n    );\\n    event Swap(\\n        address indexed sender,\\n        uint256 amount0In,\\n        uint256 amount1In,\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\n\\n    function factory() external view returns (address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (\\n            uint112 reserve0,\\n            uint112 reserve1,\\n            uint32 blockTimestampLast\\n        );\\n\\n    function price0CumulativeLast() external view returns (uint256);\\n\\n    function price1CumulativeLast() external view returns (uint256);\\n\\n    function kLast() external view returns (uint256);\\n\\n    function mint(address to) external returns (uint256 liquidity);\\n\\n    function burn(address to)\\n        external\\n        returns (uint256 amount0, uint256 amount1);\\n\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external;\\n\\n    function skim(address to) external;\\n\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x04c20e91f949852d3b8d6387443abc7816e8bd851de53676ab0fe948699fb63e\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IJoeRouter01.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.8.0;\\n\\ninterface IJoeRouter01 {\\n    function factory() external pure returns (address);\\n\\n    function WAVAX() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        );\\n\\n    function addLiquidityAVAX(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountAVAXMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 amountToken,\\n            uint256 amountAVAX,\\n            uint256 liquidity\\n        );\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityAVAX(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountAVAXMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountAVAX);\\n\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityAVAXWithPermit(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountAVAXMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountToken, uint256 amountAVAX);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactAVAXForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactAVAX(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForAVAX(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapAVAXForExactTokens(\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) external pure returns (uint256 amountB);\\n\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountOut);\\n\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountIn);\\n\\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n}\\n\",\"keccak256\":\"0xb5482e51b33aced73570c680210fbc7b67c965aadd5ba39499819e91bca4b34d\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IJoeRouter02.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"./IJoeRouter01.sol\\\";\\n\\ninterface IJoeRouter02 is IJoeRouter01 {\\n    function removeLiquidityAVAXSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountAVAXMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountAVAX);\\n\\n    function removeLiquidityAVAXWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountAVAXMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountAVAX);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapExactAVAXForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable;\\n\\n    function swapExactTokensForAVAXSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0xb3f662757d58a8d11905533454ff57d60edd43dbf1c81430db3ece2a4fa630d7\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IRocketJoeFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface IRocketJoeFactory {\\n    event RJLaunchEventCreated(\\n        address indexed issuer,\\n        address indexed token,\\n        uint256 phaseOneStartTime,\\n        uint256 phaseTwoStartTime,\\n        uint256 phaseThreeStartTime,\\n        address rJoe,\\n        uint256 rJoePerAvax\\n    );\\n    event SetRJoe(address indexed token);\\n    event SetPenaltyCollector(address indexed collector);\\n    event SetRouter(address indexed router);\\n    event SetFactory(address indexed factory);\\n    event SetRJoePerAvax(uint256 rJoePerAvax);\\n    event IssuingTokenDeposited(address indexed token, uint256 amount);\\n\\n    function eventImplementation() external view returns (address);\\n\\n    function penaltyCollector() external view returns (address);\\n\\n    function wavax() external view returns (address);\\n\\n    function rJoePerAvax() external view returns (uint256);\\n\\n    function router() external view returns (address);\\n\\n    function factory() external view returns (address);\\n\\n    function rJoe() external view returns (address);\\n\\n    function PHASE_ONE_DURATION() external view returns (uint256);\\n\\n    function PHASE_ONE_NO_FEE_DURATION() external view returns (uint256);\\n\\n    function PHASE_TWO_DURATION() external view returns (uint256);\\n\\n    function getRJLaunchEvent(address token)\\n        external\\n        view\\n        returns (address launchEvent);\\n\\n    function isRJLaunchEvent(address token) external view returns (bool);\\n\\n    function allRJLaunchEvents(uint256) external view returns (address pair);\\n\\n    function numLaunchEvents() external view returns (uint256);\\n\\n    function createRJLaunchEvent(\\n        address _issuer,\\n        uint256 _phaseOneStartTime,\\n        address _token,\\n        uint256 _tokenAmount,\\n        uint256 _tokenIncentivesPercent,\\n        uint256 _floorPrice,\\n        uint256 _maxWithdrawPenalty,\\n        uint256 _fixedWithdrawPenalty,\\n        uint256 _maxAllocation,\\n        uint256 _userTimelock,\\n        uint256 _issuerTimelock\\n    ) external returns (address pair);\\n\\n    function setPenaltyCollector(address) external;\\n\\n    function setRouter(address) external;\\n\\n    function setFactory(address) external;\\n\\n    function setRJoe(address) external;\\n\\n    function setRJoePerAvax(uint256) external;\\n\\n    function setPhaseDuration(uint256, uint256) external;\\n\\n    function setPhaseOneNoFeeDuration(uint256) external;\\n}\\n\",\"keccak256\":\"0xf153d963836426f3363f8cf63a1996345ec19833dac947841910cc871899a8c9\",\"license\":\"MIT\"},\"contracts/interfaces/IRocketJoeToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IRocketJoeToken {\\n    /**\\n     * @dev Initialize variables.\\n     *\\n     * Needs to be called by RocketJoeFactory.\\n     */\\n    function initialize() external;\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `from`.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burnFrom(address from, uint256 amount) external;\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\",\"keccak256\":\"0xb01d397a64cd49b491a7c0f3366e548095e5e1dff6267f6bc7fb94c76385c36e\",\"license\":\"MIT\"},\"contracts/interfaces/IWAVAX.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.8.0;\\n\\ninterface IWAVAX {\\n    function deposit() external payable;\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function withdraw(uint256) external;\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x895f3e5200c517d3d5cae368f2533ed07418d41e65bd6eca3b2cc92d06bece52\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5062000032620000266200003860201b60201c565b6200004060201b60201c565b62000104565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b615e1080620001146000396000f3fe60806040526004361061020f5760003560e01c80637ea382c111610118578063da5a9ded116100a0578063e56e56db1161006f578063e56e56db146106d2578063f2fde38b146106fd578063f3fbd7d614610726578063f4b3b7d714610751578063fc0c546a1461077c5761020f565b8063da5a9ded1461064e578063db069a5114610679578063db2e21bc146106a4578063e087cd55146106bb5761020f565b80639b3ba79f116100e75780639b3ba79f146105ae5780639e78fb4f146105d9578063a0d065c3146105f0578063a8aa1b31146105fa578063aeb5cd5e146106255761020f565b80637ea382c114610516578063853920401461052d5780638da5cb5b146105585780639363c812146105835761020f565b80633e9e8d5f1161019b5780636386c1c71161016a5780636386c1c71461042c578063715018a61461046c57806375f12b21146104835780637b2020c6146104ae5780637cc88504146104d95761020f565b80633e9e8d5f146103805780634edd499b146103ab5780634f245ef7146103d65780635822213f146104015761020f565b80631a26af7a116101e25780631a26af7a146102bf5780631d143848146102d65780631dd19cb4146103015780632a0a8d5b14610318578063382db5b5146103435761020f565b806302ee594b14610214578063055ad42e1461023d5780630902f1ac14610268578063145b026714610294575b600080fd5b34801561022057600080fd5b5061023b60048036038101906102369190614195565b6107a7565b005b34801561024957600080fd5b506102526111fb565b60405161025f91906149de565b60405180910390f35b34801561027457600080fd5b5061027d611272565b60405161028b929190614e96565b60405180910390f35b3480156102a057600080fd5b506102a9611290565b6040516102b691906149c3565b60405180910390f35b3480156102cb57600080fd5b506102d46112b6565b005b3480156102e257600080fd5b506102eb61140c565b6040516102f891906148ea565b60405180910390f35b34801561030d57600080fd5b50610316611432565b005b34801561032457600080fd5b5061032d611621565b60405161033a9190614e7b565b60405180910390f35b34801561034f57600080fd5b5061036a6004803603810190610365919061413b565b611627565b6040516103779190614e7b565b60405180910390f35b34801561038c57600080fd5b50610395611715565b6040516103a29190614e7b565b60405180910390f35b3480156103b757600080fd5b506103c061171b565b6040516103cd9190614e7b565b60405180910390f35b3480156103e257600080fd5b506103eb611721565b6040516103f89190614e7b565b60405180910390f35b34801561040d57600080fd5b50610416611727565b6040516104239190614e7b565b60405180910390f35b34801561043857600080fd5b50610453600480360381019061044e919061413b565b61172d565b6040516104639493929190614ebf565b60405180910390f35b34801561047857600080fd5b50610481611777565b005b34801561048f57600080fd5b506104986117ff565b6040516104a59190614957565b60405180910390f35b3480156104ba57600080fd5b506104c3611812565b6040516104d09190614e7b565b60405180910390f35b3480156104e557600080fd5b5061050060048036038101906104fb91906142a1565b611818565b60405161050d9190614e7b565b60405180910390f35b34801561052257600080fd5b5061052b61182f565b005b34801561053957600080fd5b50610542611de2565b60405161054f9190614e7b565b60405180910390f35b34801561056457600080fd5b5061056d611de8565b60405161057a91906148ea565b60405180910390f35b34801561058f57600080fd5b50610598611e11565b6040516105a59190614e7b565b60405180910390f35b3480156105ba57600080fd5b506105c3611e17565b6040516105d09190614e7b565b60405180910390f35b3480156105e557600080fd5b506105ee611e1d565b005b6105f861299b565b005b34801561060657600080fd5b5061060f612d07565b60405161061c919061498d565b60405180910390f35b34801561063157600080fd5b5061064c600480360381019061064791906142a1565b612d2d565b005b34801561065a57600080fd5b506106636130ca565b6040516106709190614e7b565b60405180910390f35b34801561068557600080fd5b5061068e6130d0565b60405161069b9190614e7b565b60405180910390f35b3480156106b057600080fd5b506106b96130d6565b005b3480156106c757600080fd5b506106d06133d3565b005b3480156106de57600080fd5b506106e761377d565b6040516106f49190614e7b565b60405180910390f35b34801561070957600080fd5b50610724600480360381019061071f919061413b565b6137f5565b005b34801561073257600080fd5b5061073b6138ed565b60405161074891906149a8565b60405180910390f35b34801561075d57600080fd5b50610766613913565b6040516107739190614e7b565b60405180910390f35b34801561078857600080fd5b50610791613919565b60405161079e9190614972565b60405180910390f35b60006107b28161393f565b601260149054906101000a900460ff1615610802576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107f990614dbb565b60405180910390fd5b33601260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550601260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663117be4c26040518163ffffffff1660e01b815260040160206040518083038186803b1580156108ab57600080fd5b505afa1580156108bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e39190614168565b600e60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550601260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f887ea406040518163ffffffff1660e01b815260040160206040518083038186803b15801561098b57600080fd5b505afa15801561099f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109c39190614168565b601060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550601260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b158015610a6b57600080fd5b505afa158015610a7f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa39190614168565b601160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550601260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663145b02676040518163ffffffff1660e01b815260040160206040518083038186803b158015610b4b57600080fd5b505afa158015610b5f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b839190614168565b600c60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550601260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663853920406040518163ffffffff1660e01b815260040160206040518083038186803b158015610c2b57600080fd5b505afa158015610c3f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c6391906142ce565b600d819055506706f05b59d3b20000861115610cb4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cab90614d3b565b60405180910390fd5b6706f05b59d3b20000851115610cff576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cf690614cfb565b60405180910390fd5b62093a80831115610d45576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d3c90614afb565b60405180910390fd5b828211610d87576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d7e90614e5b565b60405180910390fd5b428a11610dc9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dc090614ddb565b60405180910390fd5b8a600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555089600281905550601260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633e9e8d5f6040518163ffffffff1660e01b815260040160206040518083038186803b158015610e7957600080fd5b505afa158015610e8d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eb191906142ce565b600381905550601260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663db069a516040518163ffffffff1660e01b815260040160206040518083038186803b158015610f1f57600080fd5b505afa158015610f33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f5791906142ce565b600481905550601260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634edd499b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610fc557600080fd5b505afa158015610fd9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ffd91906142ce565b60058190555088600f60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016110a191906148ea565b60206040518083038186803b1580156110b957600080fd5b505afa1580156110cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110f191906142ce565b90508860068190555088670de0b6b3a764000061110e9190614fc3565b670de0b6b3a76400008261112291906151bb565b61112c9190615019565b601881905550601854816111409190615215565b601a81905550601a546019819055508760078190555086600a8190555085600b819055508460138190555083600881905550826009819055506001601260146101000a81548160ff0219169083151502179055507f403b44ba5bd4a00c008a3cbf335e20d2d9bd8c0d486ca3f37c129e91daee84d6600654600754600a54600b546013546008546009546018546019546040516111e599989796959493929190614f04565b60405180910390a1505050505050505050505050565b600060025442108061120f57506000600254145b1561121d576000905061126f565b60035460025461122d9190614fc3565b42101561123d576001905061126f565b6005546003546002546112509190614fc3565b61125a9190614fc3565b42101561126a576002905061126f565b600390505b90565b600080601c546019546018546112889190614fc3565b915091509091565b600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b601260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561131e57600080fd5b505afa158015611332573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113569190614168565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146113c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113ba90614c1b565b60405180910390fd5b6001601260156101000a81548160ff0219169083151502179055507f7acc84e34091ae817647a4c49116f5cc07f319078ba80f8f5fde37ea7e25cbd660405160405180910390a1565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000601260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663308097b26040518163ffffffff1660e01b815260040160206040518083038186803b15801561149c57600080fd5b505afa1580156114b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114d49190614168565b90506000601954601854600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161153991906148ea565b60206040518083038186803b15801561155157600080fd5b505afa158015611565573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061158991906142ce565b6115939190615215565b61159d9190615215565b905060008111156115f6576115f58282600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16613bfe9092919063ffffffff16565b5b6000601c54476116069190615215565b9050600081111561161c5761161b8382613c84565b5b505050565b600a5481565b600080601460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060405180608001604052908160008201548152602001600182015481526020016002820160009054906101000a900460ff161515151581526020016002820160019054906101000a900460ff1615151515815250509050600060165414806116d2575080604001515b156116e1576000915050611710565b600260165460175483602001516116f891906151bb565b6117029190615019565b61170c9190615019565b9150505b919050565b60035481565b60055481565b60025481565b60095481565b60146020528060005260406000206000915090508060000154908060010154908060020160009054906101000a900460ff16908060020160019054906101000a900460ff16905084565b61177f613d84565b73ffffffffffffffffffffffffffffffffffffffff1661179d611de8565b73ffffffffffffffffffffffffffffffffffffffff16146117f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117ea90614c7b565b60405180910390fd5b6117fd6000613d8c565b565b601260159054906101000a900460ff1681565b600b5481565b6000600d548261182891906151bb565b9050919050565b6000801561188b57601260159054906101000a900460ff16611886576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161187d90614d7b565b60405180910390fd5b6118dc565b601260159054906101000a900460ff16156118db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118d290614a3b565b60405180910390fd5b5b60006005546003546002546118f19190614fc3565b6118fb9190614fc3565b9050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614156119a757600954816119619190614fc3565b42116119a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161199990614abb565b60405180910390fd5b6119f7565b600854816119b59190614fc3565b42116119f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119ed90614b9b565b60405180910390fd5b5b600073ffffffffffffffffffffffffffffffffffffffff16601560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415611a89576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a8090614c9b565b60405180910390fd5b6000601460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508060020160009054906101000a900460ff1615611b1e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b1590614d1b565b60405180910390fd5b6000611b2933611627565b905060018260020160006101000a81548160ff021916908315150217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415611ca4576002601754611bad9190615019565b9050601560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f25f5629a2805dc97540e082b5064e0f293a9e3ab76c65e09ea158d7ab86e0ffa83604051611c2e9190614e7b565b60405180910390a360006018541115611c9f57600060185490506000601881905550611c9d3382600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16613bfe9092919063ffffffff16565b505b611d2c565b601560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f861b5b4aea4c9b6c9f0a25eb3592c9028bd2a94954a4c56567f815cf38af5dca83604051611d239190614e7b565b60405180910390a35b601560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401611d8992919061492e565b602060405180830381600087803b158015611da357600080fd5b505af1158015611db7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ddb9190614274565b5050505050565b600d5481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60075481565b60135481565b60008015611e7957601260159054906101000a900460ff16611e74576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e6b90614d7b565b60405180910390fd5b611eca565b601260159054906101000a900460ff1615611ec9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ec090614a3b565b60405180910390fd5b5b6003611ed58161393f565b600080600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691509150600073ffffffffffffffffffffffffffffffffffffffff16601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e6a4390584846040518363ffffffff1660e01b8152600401611f97929190614905565b60206040518083038186803b158015611faf57600080fd5b505afa158015611fc3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fe79190614168565b73ffffffffffffffffffffffffffffffffffffffff16148061213257506000601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e6a4390584846040518363ffffffff1660e01b8152600401612063929190614905565b60206040518083038186803b15801561207b57600080fd5b505afa15801561208f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120b39190614168565b73ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156120f857600080fd5b505afa15801561210c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061213091906142ce565b145b612171576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161216890614a5b565b60405180910390fd5b6000601c54116121b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121ad90614c3b565b60405180910390fd5b6000601854905080600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561222657600080fd5b505afa15801561223a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061225e91906142fb565b600a61226a919061509d565b601c5461227791906151bb565b6122819190615019565b600754111561238a57600754600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156122f557600080fd5b505afa158015612309573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061232d91906142fb565b600a612339919061509d565b601c5461234691906151bb565b6123509190615019565b905060185481601a5461236391906151bb565b61236d9190615019565b601a81905550601a546019546123839190615215565b601b819055505b600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d0e30db0601c546040518263ffffffff1660e01b81526004016000604051808303818588803b1580156123f657600080fd5b505af115801561240a573d6000803e3d6000fd5b5050505050600073ffffffffffffffffffffffffffffffffffffffff16601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e6a4390585856040518363ffffffff1660e01b8152600401612484929190614905565b60206040518083038186803b15801561249c57600080fd5b505afa1580156124b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124d49190614168565b73ffffffffffffffffffffffffffffffffffffffff1614156125e457601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c9c6539684846040518363ffffffff1660e01b815260040161254d929190614905565b602060405180830381600087803b15801561256757600080fd5b505af115801561257b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061259f9190614168565b601560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506126d2565b601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e6a4390584846040518363ffffffff1660e01b8152600401612641929190614905565b60206040518083038186803b15801561265957600080fd5b505afa15801561266d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126919190614168565b601560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb601560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16601c546040518363ffffffff1660e01b815260040161275392919061492e565b602060405180830381600087803b15801561276d57600080fd5b505af1158015612781573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127a59190614274565b50612815601560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16613bfe9092919063ffffffff16565b601560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636a627842306040518263ffffffff1660e01b815260040161287091906148ea565b602060405180830381600087803b15801561288a57600080fd5b505af115801561289e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128c291906142ce565b601781905550601c546016819055506000601c8190555080601860008282546128eb9190615215565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16601560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f5c40bbf7a34ef1e42b8d0c2ea5fd1e07027254ce0a1ccf4f8ced71dacb8e596b8460165460405161298c929190614e96565b60405180910390a45050505050565b600080156129f757601260159054906101000a900460ff166129f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129e990614d7b565b60405180910390fd5b612a48565b601260159054906101000a900460ff1615612a47576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a3e90614a3b565b60405180910390fd5b5b6001612a538161393f565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415612ae4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612adb90614b3b565b60405180910390fd5b60003411612b27576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b1e90614a1b565b60405180910390fd5b6000601460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000348260010154612b7c9190614fc3565b9050601354811115612bc3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612bba90614b1b565b60405180910390fd5b60008260000154821115612bf557612be9836000015483612be49190615215565b611818565b90508183600001819055505b81836001018190555034601c6000828254612c109190614fc3565b925050819055506000811115612cb057600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166379cc679033836040518363ffffffff1660e01b8152600401612c7d92919061492e565b600060405180830381600087803b158015612c9757600080fd5b505af1158015612cab573d6000803e3d6000fd5b505050505b3373ffffffffffffffffffffffffffffffffffffffff167fdf263dfdd75a72e5829e34d350ee8711b919e31df66d67aac31f6ed7d7cc82333483604051612cf8929190614e96565b60405180910390a25050505050565b601560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008015612d8957601260159054906101000a900460ff16612d84576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d7b90614d7b565b60405180910390fd5b612dda565b601260159054906101000a900460ff1615612dd9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612dd090614a3b565b60405180910390fd5b5b6000612de46111fb565b905060016003811115612dfa57612df96153e4565b5b816003811115612e0d57612e0c6153e4565b5b1480612e3d575060026003811115612e2857612e276153e4565b5b816003811115612e3b57612e3a6153e4565b5b145b612e7c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e7390614b5b565b60405180910390fd5b60008311612ebf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612eb690614d5b565b60405180910390fd5b6000601460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508381600101541015612f49576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f4090614bbb565b60405180910390fd5b83816001016000828254612f5d9190615215565b925050819055506000670de0b6b3a7640000612f7761377d565b86612f8291906151bb565b612f8c9190615019565b905060008186612f9c9190615215565b905085601c6000828254612fb09190615215565b92505081905550612fc13382613c84565b600082111561307457613073601260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663308097b26040518163ffffffff1660e01b815260040160206040518083038186803b15801561303557600080fd5b505afa158015613049573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061306d9190614168565b83613c84565b5b3373ffffffffffffffffffffffffffffffffffffffff167fe6b386172074b393dc04ed6cb1a352475ffad5dd8cebc76231a3b683141ea6fb876040516130ba9190614e7b565b60405180910390a2505050505050565b60085481565b60045481565b6001801561313257601260159054906101000a900460ff1661312d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161312490614d7b565b60405180910390fd5b613183565b601260159054906101000a900460ff1615613182576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161317990614a3b565b60405180910390fd5b5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146132ed576000601460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000816001015411613262576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161325990614dfb565b60405180910390fd5b6000816001015490506000826001018190555080601c60008282546132879190615215565b925050819055506132983382613c84565b3373ffffffffffffffffffffffffffffffffffffffff167f294f16210f954e5f97ec8fa6c28841b4e9242b2cb416033c671d1706d1802030826040516132de9190614e7b565b60405180910390a250506133d0565b60006019546018546132ff9190614fc3565b905060006018819055506000601981905550613380600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16613bfe9092919063ffffffff16565b3373ffffffffffffffffffffffffffffffffffffffff167f9b6c3d8b63229d4e633c9d23e1e20216ea84beb2e492f9c063cd4e47441dd2b4826040516133c69190614e7b565b60405180910390a2505b50565b6000801561342f57601260159054906101000a900460ff1661342a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161342190614d7b565b60405180910390fd5b613480565b601260159054906101000a900460ff161561347f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161347690614a3b565b60405180910390fd5b5b600073ffffffffffffffffffffffffffffffffffffffff16601560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415613512576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161350990614c9b565b60405180910390fd5b6000601460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508060020160019054906101000a900460ff16156135a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161359e90614bdb565b60405180910390fd5b60018160020160016101000a81548160ff0219169083151502179055506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141561362657601b549050613648565b601654601a54836001015461363b91906151bb565b6136459190615019565b90505b6000811161368b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161368290614cbb565b60405180910390fd5b806019600082825461369d9190615215565b925050819055506136f13382600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16613bfe9092919063ffffffff16565b600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fc1038543e891141d837da01a4759fa3669d79d338a2f6989670452adfbab1168836040516137709190614e7b565b60405180910390a3505050565b6000806002544261378e9190615215565b90506004548110156137a45760009150506137f2565b6003548110156137eb576004546003546137be9190615215565b600a54600454836137cf9190615215565b6137d991906151bb565b6137e39190615019565b9150506137f2565b600b549150505b90565b6137fd613d84565b73ffffffffffffffffffffffffffffffffffffffff1661381b611de8565b73ffffffffffffffffffffffffffffffffffffffff1614613871576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161386890614c7b565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156138e1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016138d890614a9b565b60405180910390fd5b6138ea81613d8c565b50565b601260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60065481565b600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006003811115613953576139526153e4565b5b816003811115613966576139656153e4565b5b14156139df57600060038111156139805761397f6153e4565b5b6139886111fb565b600381111561399a576139996153e4565b5b146139da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016139d190614adb565b60405180910390fd5b613bfb565b600160038111156139f3576139f26153e4565b5b816003811115613a0657613a056153e4565b5b1415613a7f5760016003811115613a2057613a1f6153e4565b5b613a286111fb565b6003811115613a3a57613a396153e4565b5b14613a7a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613a7190614cdb565b60405180910390fd5b613bfa565b60026003811115613a9357613a926153e4565b5b816003811115613aa657613aa56153e4565b5b1415613b1f5760026003811115613ac057613abf6153e4565b5b613ac86111fb565b6003811115613ada57613ad96153e4565b5b14613b1a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613b1190614a7b565b60405180910390fd5b613bf9565b600380811115613b3257613b316153e4565b5b816003811115613b4557613b446153e4565b5b1415613bbd57600380811115613b5e57613b5d6153e4565b5b613b666111fb565b6003811115613b7857613b776153e4565b5b14613bb8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613baf90614bfb565b60405180910390fd5b613bf8565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613bef90614c5b565b60405180910390fd5b5b5b5b50565b613c7f8363a9059cbb60e01b8484604051602401613c1d92919061492e565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050613e50565b505050565b60008273ffffffffffffffffffffffffffffffffffffffff1682600067ffffffffffffffff811115613cb957613cb8615413565b5b6040519080825280601f01601f191660200182016040528015613ceb5781602001600182028036833780820191505090505b50604051613cf991906148d3565b60006040518083038185875af1925050503d8060008114613d36576040519150601f19603f3d011682016040523d82523d6000602084013e613d3b565b606091505b5050905080613d7f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613d7690614e3b565b60405180910390fd5b505050565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000613eb2826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16613f179092919063ffffffff16565b9050600081511115613f125780806020019051810190613ed29190614274565b613f11576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613f0890614e1b565b60405180910390fd5b5b505050565b6060613f268484600085613f2f565b90509392505050565b606082471015613f74576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613f6b90614b7b565b60405180910390fd5b613f7d85614043565b613fbc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613fb390614d9b565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051613fe591906148d3565b60006040518083038185875af1925050503d8060008114614022576040519150601f19603f3d011682016040523d82523d6000602084013e614027565b606091505b5091509150614037828286614056565b92505050949350505050565b600080823b905060008111915050919050565b60608315614066578290506140b6565b6000835111156140795782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016140ad91906149f9565b60405180910390fd5b9392505050565b6000813590506140cc81615d7e565b92915050565b6000815190506140e181615d7e565b92915050565b6000815190506140f681615d95565b92915050565b60008135905061410b81615dac565b92915050565b60008151905061412081615dac565b92915050565b60008151905061413581615dc3565b92915050565b60006020828403121561415157614150615442565b5b600061415f848285016140bd565b91505092915050565b60006020828403121561417e5761417d615442565b5b600061418c848285016140d2565b91505092915050565b6000806000806000806000806000806101408b8d0312156141b9576141b8615442565b5b60006141c78d828e016140bd565b9a505060206141d88d828e016140fc565b99505060406141e98d828e016140bd565b98505060606141fa8d828e016140fc565b975050608061420b8d828e016140fc565b96505060a061421c8d828e016140fc565b95505060c061422d8d828e016140fc565b94505060e061423e8d828e016140fc565b9350506101006142508d828e016140fc565b9250506101206142628d828e016140fc565b9150509295989b9194979a5092959850565b60006020828403121561428a57614289615442565b5b6000614298848285016140e7565b91505092915050565b6000602082840312156142b7576142b6615442565b5b60006142c5848285016140fc565b91505092915050565b6000602082840312156142e4576142e3615442565b5b60006142f284828501614111565b91505092915050565b60006020828403121561431157614310615442565b5b600061431f84828501614126565b91505092915050565b61433181615249565b82525050565b6143408161525b565b82525050565b600061435182614f91565b61435b8185614fa7565b935061436b818560208601615353565b80840191505092915050565b614380816152b1565b82525050565b61438f816152d5565b82525050565b61439e816152f9565b82525050565b6143ad8161531d565b82525050565b6143bc81615341565b82525050565b60006143cd82614f9c565b6143d78185614fb2565b93506143e7818560208601615353565b6143f081615447565b840191505092915050565b6000614408602e83614fb2565b915061441382615465565b604082019050919050565b600061442b601483614fb2565b9150614436826154b4565b602082019050919050565b600061444e602783614fb2565b9150614459826154dd565b604082019050919050565b6000614471601d83614fb2565b915061447c8261552c565b602082019050919050565b6000614494602683614fb2565b915061449f82615555565b604082019050919050565b60006144b7603483614fb2565b91506144c2826155a4565b604082019050919050565b60006144da601f83614fb2565b91506144e5826155f3565b602082019050919050565b60006144fd603483614fb2565b91506145088261561c565b604082019050919050565b6000614520602a83614fb2565b915061452b8261566b565b604082019050919050565b6000614543602683614fb2565b915061454e826156ba565b604082019050919050565b6000614566601f83614fb2565b915061457182615709565b602082019050919050565b6000614589602683614fb2565b915061459482615732565b604082019050919050565b60006145ac603283614fb2565b91506145b782615781565b604082019050919050565b60006145cf602d83614fb2565b91506145da826157d0565b604082019050919050565b60006145f2602983614fb2565b91506145fd8261581f565b604082019050919050565b6000614615601f83614fb2565b91506146208261586e565b602082019050919050565b6000614638603183614fb2565b915061464382615897565b604082019050919050565b600061465b601c83614fb2565b9150614666826158e6565b602082019050919050565b600061467e601a83614fb2565b91506146898261590f565b602082019050919050565b60006146a1602083614fb2565b91506146ac82615938565b602082019050919050565b60006146c4601d83614fb2565b91506146cf82615961565b602082019050919050565b60006146e7602d83614fb2565b91506146f28261598a565b604082019050919050565b600061470a601d83614fb2565b9150614715826159d9565b602082019050919050565b600061472d602983614fb2565b915061473882615a02565b604082019050919050565b6000614750602883614fb2565b915061475b82615a51565b604082019050919050565b6000614773602783614fb2565b915061477e82615aa0565b604082019050919050565b6000614796602483614fb2565b91506147a182615aef565b604082019050919050565b60006147b9601d83614fb2565b91506147c482615b3e565b602082019050919050565b60006147dc601d83614fb2565b91506147e782615b67565b602082019050919050565b60006147ff602083614fb2565b915061480a82615b90565b602082019050919050565b6000614822603383614fb2565b915061482d82615bb9565b604082019050919050565b6000614845605183614fb2565b915061485082615c08565b606082019050919050565b6000614868602a83614fb2565b915061487382615c7d565b604082019050919050565b600061488b602183614fb2565b915061489682615ccc565b604082019050919050565b60006148ae602f83614fb2565b91506148b982615d1b565b604082019050919050565b6148cd8161529a565b82525050565b60006148df8284614346565b915081905092915050565b60006020820190506148ff6000830184614328565b92915050565b600060408201905061491a6000830185614328565b6149276020830184614328565b9392505050565b60006040820190506149436000830185614328565b61495060208301846148c4565b9392505050565b600060208201905061496c6000830184614337565b92915050565b60006020820190506149876000830184614377565b92915050565b60006020820190506149a26000830184614386565b92915050565b60006020820190506149bd6000830184614395565b92915050565b60006020820190506149d860008301846143a4565b92915050565b60006020820190506149f360008301846143b3565b92915050565b60006020820190508181036000830152614a1381846143c2565b905092915050565b60006020820190508181036000830152614a34816143fb565b9050919050565b60006020820190508181036000830152614a548161441e565b9050919050565b60006020820190508181036000830152614a7481614441565b9050919050565b60006020820190508181036000830152614a9481614464565b9050919050565b60006020820190508181036000830152614ab481614487565b9050919050565b60006020820190508181036000830152614ad4816144aa565b9050919050565b60006020820190508181036000830152614af4816144cd565b9050919050565b60006020820190508181036000830152614b14816144f0565b9050919050565b60006020820190508181036000830152614b3481614513565b9050919050565b60006020820190508181036000830152614b5481614536565b9050919050565b60006020820190508181036000830152614b7481614559565b9050919050565b60006020820190508181036000830152614b948161457c565b9050919050565b60006020820190508181036000830152614bb48161459f565b9050919050565b60006020820190508181036000830152614bd4816145c2565b9050919050565b60006020820190508181036000830152614bf4816145e5565b9050919050565b60006020820190508181036000830152614c1481614608565b9050919050565b60006020820190508181036000830152614c348161462b565b9050919050565b60006020820190508181036000830152614c548161464e565b9050919050565b60006020820190508181036000830152614c7481614671565b9050919050565b60006020820190508181036000830152614c9481614694565b9050919050565b60006020820190508181036000830152614cb4816146b7565b9050919050565b60006020820190508181036000830152614cd4816146da565b9050919050565b60006020820190508181036000830152614cf4816146fd565b9050919050565b60006020820190508181036000830152614d1481614720565b9050919050565b60006020820190508181036000830152614d3481614743565b9050919050565b60006020820190508181036000830152614d5481614766565b9050919050565b60006020820190508181036000830152614d7481614789565b9050919050565b60006020820190508181036000830152614d94816147ac565b9050919050565b60006020820190508181036000830152614db4816147cf565b9050919050565b60006020820190508181036000830152614dd4816147f2565b9050919050565b60006020820190508181036000830152614df481614815565b9050919050565b60006020820190508181036000830152614e1481614838565b9050919050565b60006020820190508181036000830152614e348161485b565b9050919050565b60006020820190508181036000830152614e548161487e565b9050919050565b60006020820190508181036000830152614e74816148a1565b9050919050565b6000602082019050614e9060008301846148c4565b92915050565b6000604082019050614eab60008301856148c4565b614eb860208301846148c4565b9392505050565b6000608082019050614ed460008301876148c4565b614ee160208301866148c4565b614eee6040830185614337565b614efb6060830184614337565b95945050505050565b600061012082019050614f1a600083018c6148c4565b614f27602083018b6148c4565b614f34604083018a6148c4565b614f4160608301896148c4565b614f4e60808301886148c4565b614f5b60a08301876148c4565b614f6860c08301866148c4565b614f7560e08301856148c4565b614f836101008301846148c4565b9a9950505050505050505050565b600081519050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b6000614fce8261529a565b9150614fd98361529a565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561500e5761500d615386565b5b828201905092915050565b60006150248261529a565b915061502f8361529a565b92508261503f5761503e6153b5565b5b828204905092915050565b6000808291508390505b6001851115615094578086048111156150705761506f615386565b5b600185161561507f5780820291505b808102905061508d85615458565b9450615054565b94509492505050565b60006150a88261529a565b91506150b3836152a4565b92506150e07fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84846150e8565b905092915050565b6000826150f857600190506151b4565b8161510657600090506151b4565b816001811461511c576002811461512657615155565b60019150506151b4565b60ff84111561513857615137615386565b5b8360020a91508482111561514f5761514e615386565b5b506151b4565b5060208310610133831016604e8410600b841016171561518a5782820a90508381111561518557615184615386565b5b6151b4565b615197848484600161504a565b925090508184048111156151ae576151ad615386565b5b81810290505b9392505050565b60006151c68261529a565b91506151d18361529a565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561520a57615209615386565b5b828202905092915050565b60006152208261529a565b915061522b8361529a565b92508282101561523e5761523d615386565b5b828203905092915050565b60006152548261527a565b9050919050565b60008115159050919050565b600081905061527582615d6a565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60006152bc826152c3565b9050919050565b60006152ce8261527a565b9050919050565b60006152e0826152e7565b9050919050565b60006152f28261527a565b9050919050565b60006153048261530b565b9050919050565b60006153168261527a565b9050919050565b60006153288261532f565b9050919050565b600061533a8261527a565b9050919050565b600061534c82615267565b9050919050565b60005b83811015615371578082015181840152602081019050615356565b83811115615380576000848401525b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b6000601f19601f8301169050919050565b60008160011c9050919050565b7f4c61756e63684576656e743a206578706563746564206e6f6e2d7a65726f204160008201527f56415820746f206465706f736974000000000000000000000000000000000000602082015250565b7f4c61756e63684576656e743a2073746f70706564000000000000000000000000600082015250565b7f4c61756e63684576656e743a206c6971756964207061697220616c726561647960008201527f2065786973747300000000000000000000000000000000000000000000000000602082015250565b7f4c61756e63684576656e743a206e6f7420696e2070686173652074776f000000600082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4c61756e63684576656e743a2063616e2774207769746864726177206265666f60008201527f72652069737375657227732074696d656c6f636b000000000000000000000000602082015250565b7f4c61756e63684576656e743a206e6f7420696e206e6f74207374617274656400600082015250565b7f4c61756e63684576656e743a2063616e2774206c6f636b2075736572204c502060008201527f666f72206d6f7265207468616e20372064617973000000000000000000000000602082015250565b7f4c61756e63684576656e743a20616d6f756e742065786365656473206d61782060008201527f616c6c6f636174696f6e00000000000000000000000000000000000000000000602082015250565b7f4c61756e63684576656e743a206973737565722063616e6e6f7420706172746960008201527f6369706174650000000000000000000000000000000000000000000000000000602082015250565b7f4c61756e63684576656e743a20756e61626c6520746f20776974686472617700600082015250565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b7f4c61756e63684576656e743a2063616e2774207769746864726177206265666f60008201527f7265207573657227732074696d656c6f636b0000000000000000000000000000602082015250565b7f4c61756e63684576656e743a2077697468647261776e20616d6f756e7420657860008201527f63656564732062616c616e636500000000000000000000000000000000000000602082015250565b7f4c61756e63684576656e743a20696e63656e746976657320616c72656164792060008201527f77697468647261776e0000000000000000000000000000000000000000000000602082015250565b7f4c61756e63684576656e743a206e6f7420696e20706861736520746872656500600082015250565b7f4c61756e63684576656e743a2063616c6c6572206973206e6f7420526f636b6560008201527f744a6f65466163746f7279206f776e6572000000000000000000000000000000602082015250565b7f4c61756e63684576656e743a206e6f20617661782062616c616e636500000000600082015250565b7f4c61756e63684576656e743a20756e6b6e6f776e207374617465000000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f4c61756e63684576656e743a2070616972206e6f742063726561746564000000600082015250565b7f4c61756e63684576656e743a2063616c6c657220686173206e6f20696e63656e60008201527f7469766520746f20636c61696d00000000000000000000000000000000000000602082015250565b7f4c61756e63684576656e743a206e6f7420696e207068617365206f6e65000000600082015250565b7f4c61756e63684576656e743a206669786564576974686472617750656e616c7460008201527f7920746f6f206269670000000000000000000000000000000000000000000000602082015250565b7f4c61756e63684576656e743a206c697175696469747920616c7265616479207760008201527f697468647261776e000000000000000000000000000000000000000000000000602082015250565b7f4c61756e63684576656e743a206d6178576974686472617750656e616c74792060008201527f746f6f2062696700000000000000000000000000000000000000000000000000602082015250565b7f4c61756e63684576656e743a20696e76616c696420776974686472617720616d60008201527f6f756e7400000000000000000000000000000000000000000000000000000000602082015250565b7f4c61756e63684576656e743a206973207374696c6c2072756e6e696e67000000600082015250565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b7f4c61756e63684576656e743a20616c726561647920696e697469616c697a6564600082015250565b7f4c61756e63684576656e743a207374617274206f66207068617365203120636160008201527f6e6e6f7420626520696e20746865207061737400000000000000000000000000602082015250565b7f4c61756e63684576656e743a206578706563746564207573657220746f20686160008201527f7665206e6f6e2d7a65726f2062616c616e636520746f20706572666f726d206560208201527f6d657267656e6379207769746864726177000000000000000000000000000000604082015250565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b7f4c61756e63684576656e743a2061766178207472616e73666572206661696c6560008201527f6400000000000000000000000000000000000000000000000000000000000000602082015250565b7f4c61756e63684576656e743a206973737565722063616e27742077697468647260008201527f6177206265666f72652075736572730000000000000000000000000000000000602082015250565b60048110615d7b57615d7a6153e4565b5b50565b615d8781615249565b8114615d9257600080fd5b50565b615d9e8161525b565b8114615da957600080fd5b50565b615db58161529a565b8114615dc057600080fd5b50565b615dcc816152a4565b8114615dd757600080fd5b5056fea264697066735822122045fac181651dd822d6a6252c5a4bb0165a5cb135f0aa8a6fea3dbec7b1117e2964736f6c63430008060033",
  "deployedBytecode": "0x60806040526004361061020f5760003560e01c80637ea382c111610118578063da5a9ded116100a0578063e56e56db1161006f578063e56e56db146106d2578063f2fde38b146106fd578063f3fbd7d614610726578063f4b3b7d714610751578063fc0c546a1461077c5761020f565b8063da5a9ded1461064e578063db069a5114610679578063db2e21bc146106a4578063e087cd55146106bb5761020f565b80639b3ba79f116100e75780639b3ba79f146105ae5780639e78fb4f146105d9578063a0d065c3146105f0578063a8aa1b31146105fa578063aeb5cd5e146106255761020f565b80637ea382c114610516578063853920401461052d5780638da5cb5b146105585780639363c812146105835761020f565b80633e9e8d5f1161019b5780636386c1c71161016a5780636386c1c71461042c578063715018a61461046c57806375f12b21146104835780637b2020c6146104ae5780637cc88504146104d95761020f565b80633e9e8d5f146103805780634edd499b146103ab5780634f245ef7146103d65780635822213f146104015761020f565b80631a26af7a116101e25780631a26af7a146102bf5780631d143848146102d65780631dd19cb4146103015780632a0a8d5b14610318578063382db5b5146103435761020f565b806302ee594b14610214578063055ad42e1461023d5780630902f1ac14610268578063145b026714610294575b600080fd5b34801561022057600080fd5b5061023b60048036038101906102369190614195565b6107a7565b005b34801561024957600080fd5b506102526111fb565b60405161025f91906149de565b60405180910390f35b34801561027457600080fd5b5061027d611272565b60405161028b929190614e96565b60405180910390f35b3480156102a057600080fd5b506102a9611290565b6040516102b691906149c3565b60405180910390f35b3480156102cb57600080fd5b506102d46112b6565b005b3480156102e257600080fd5b506102eb61140c565b6040516102f891906148ea565b60405180910390f35b34801561030d57600080fd5b50610316611432565b005b34801561032457600080fd5b5061032d611621565b60405161033a9190614e7b565b60405180910390f35b34801561034f57600080fd5b5061036a6004803603810190610365919061413b565b611627565b6040516103779190614e7b565b60405180910390f35b34801561038c57600080fd5b50610395611715565b6040516103a29190614e7b565b60405180910390f35b3480156103b757600080fd5b506103c061171b565b6040516103cd9190614e7b565b60405180910390f35b3480156103e257600080fd5b506103eb611721565b6040516103f89190614e7b565b60405180910390f35b34801561040d57600080fd5b50610416611727565b6040516104239190614e7b565b60405180910390f35b34801561043857600080fd5b50610453600480360381019061044e919061413b565b61172d565b6040516104639493929190614ebf565b60405180910390f35b34801561047857600080fd5b50610481611777565b005b34801561048f57600080fd5b506104986117ff565b6040516104a59190614957565b60405180910390f35b3480156104ba57600080fd5b506104c3611812565b6040516104d09190614e7b565b60405180910390f35b3480156104e557600080fd5b5061050060048036038101906104fb91906142a1565b611818565b60405161050d9190614e7b565b60405180910390f35b34801561052257600080fd5b5061052b61182f565b005b34801561053957600080fd5b50610542611de2565b60405161054f9190614e7b565b60405180910390f35b34801561056457600080fd5b5061056d611de8565b60405161057a91906148ea565b60405180910390f35b34801561058f57600080fd5b50610598611e11565b6040516105a59190614e7b565b60405180910390f35b3480156105ba57600080fd5b506105c3611e17565b6040516105d09190614e7b565b60405180910390f35b3480156105e557600080fd5b506105ee611e1d565b005b6105f861299b565b005b34801561060657600080fd5b5061060f612d07565b60405161061c919061498d565b60405180910390f35b34801561063157600080fd5b5061064c600480360381019061064791906142a1565b612d2d565b005b34801561065a57600080fd5b506106636130ca565b6040516106709190614e7b565b60405180910390f35b34801561068557600080fd5b5061068e6130d0565b60405161069b9190614e7b565b60405180910390f35b3480156106b057600080fd5b506106b96130d6565b005b3480156106c757600080fd5b506106d06133d3565b005b3480156106de57600080fd5b506106e761377d565b6040516106f49190614e7b565b60405180910390f35b34801561070957600080fd5b50610724600480360381019061071f919061413b565b6137f5565b005b34801561073257600080fd5b5061073b6138ed565b60405161074891906149a8565b60405180910390f35b34801561075d57600080fd5b50610766613913565b6040516107739190614e7b565b60405180910390f35b34801561078857600080fd5b50610791613919565b60405161079e9190614972565b60405180910390f35b60006107b28161393f565b601260149054906101000a900460ff1615610802576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107f990614dbb565b60405180910390fd5b33601260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550601260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663117be4c26040518163ffffffff1660e01b815260040160206040518083038186803b1580156108ab57600080fd5b505afa1580156108bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e39190614168565b600e60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550601260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f887ea406040518163ffffffff1660e01b815260040160206040518083038186803b15801561098b57600080fd5b505afa15801561099f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109c39190614168565b601060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550601260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b158015610a6b57600080fd5b505afa158015610a7f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa39190614168565b601160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550601260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663145b02676040518163ffffffff1660e01b815260040160206040518083038186803b158015610b4b57600080fd5b505afa158015610b5f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b839190614168565b600c60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550601260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663853920406040518163ffffffff1660e01b815260040160206040518083038186803b158015610c2b57600080fd5b505afa158015610c3f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c6391906142ce565b600d819055506706f05b59d3b20000861115610cb4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cab90614d3b565b60405180910390fd5b6706f05b59d3b20000851115610cff576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cf690614cfb565b60405180910390fd5b62093a80831115610d45576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d3c90614afb565b60405180910390fd5b828211610d87576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d7e90614e5b565b60405180910390fd5b428a11610dc9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dc090614ddb565b60405180910390fd5b8a600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555089600281905550601260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633e9e8d5f6040518163ffffffff1660e01b815260040160206040518083038186803b158015610e7957600080fd5b505afa158015610e8d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eb191906142ce565b600381905550601260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663db069a516040518163ffffffff1660e01b815260040160206040518083038186803b158015610f1f57600080fd5b505afa158015610f33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f5791906142ce565b600481905550601260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634edd499b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610fc557600080fd5b505afa158015610fd9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ffd91906142ce565b60058190555088600f60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016110a191906148ea565b60206040518083038186803b1580156110b957600080fd5b505afa1580156110cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110f191906142ce565b90508860068190555088670de0b6b3a764000061110e9190614fc3565b670de0b6b3a76400008261112291906151bb565b61112c9190615019565b601881905550601854816111409190615215565b601a81905550601a546019819055508760078190555086600a8190555085600b819055508460138190555083600881905550826009819055506001601260146101000a81548160ff0219169083151502179055507f403b44ba5bd4a00c008a3cbf335e20d2d9bd8c0d486ca3f37c129e91daee84d6600654600754600a54600b546013546008546009546018546019546040516111e599989796959493929190614f04565b60405180910390a1505050505050505050505050565b600060025442108061120f57506000600254145b1561121d576000905061126f565b60035460025461122d9190614fc3565b42101561123d576001905061126f565b6005546003546002546112509190614fc3565b61125a9190614fc3565b42101561126a576002905061126f565b600390505b90565b600080601c546019546018546112889190614fc3565b915091509091565b600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b601260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561131e57600080fd5b505afa158015611332573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113569190614168565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146113c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113ba90614c1b565b60405180910390fd5b6001601260156101000a81548160ff0219169083151502179055507f7acc84e34091ae817647a4c49116f5cc07f319078ba80f8f5fde37ea7e25cbd660405160405180910390a1565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000601260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663308097b26040518163ffffffff1660e01b815260040160206040518083038186803b15801561149c57600080fd5b505afa1580156114b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114d49190614168565b90506000601954601854600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161153991906148ea565b60206040518083038186803b15801561155157600080fd5b505afa158015611565573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061158991906142ce565b6115939190615215565b61159d9190615215565b905060008111156115f6576115f58282600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16613bfe9092919063ffffffff16565b5b6000601c54476116069190615215565b9050600081111561161c5761161b8382613c84565b5b505050565b600a5481565b600080601460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060405180608001604052908160008201548152602001600182015481526020016002820160009054906101000a900460ff161515151581526020016002820160019054906101000a900460ff1615151515815250509050600060165414806116d2575080604001515b156116e1576000915050611710565b600260165460175483602001516116f891906151bb565b6117029190615019565b61170c9190615019565b9150505b919050565b60035481565b60055481565b60025481565b60095481565b60146020528060005260406000206000915090508060000154908060010154908060020160009054906101000a900460ff16908060020160019054906101000a900460ff16905084565b61177f613d84565b73ffffffffffffffffffffffffffffffffffffffff1661179d611de8565b73ffffffffffffffffffffffffffffffffffffffff16146117f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117ea90614c7b565b60405180910390fd5b6117fd6000613d8c565b565b601260159054906101000a900460ff1681565b600b5481565b6000600d548261182891906151bb565b9050919050565b6000801561188b57601260159054906101000a900460ff16611886576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161187d90614d7b565b60405180910390fd5b6118dc565b601260159054906101000a900460ff16156118db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118d290614a3b565b60405180910390fd5b5b60006005546003546002546118f19190614fc3565b6118fb9190614fc3565b9050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614156119a757600954816119619190614fc3565b42116119a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161199990614abb565b60405180910390fd5b6119f7565b600854816119b59190614fc3565b42116119f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119ed90614b9b565b60405180910390fd5b5b600073ffffffffffffffffffffffffffffffffffffffff16601560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415611a89576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a8090614c9b565b60405180910390fd5b6000601460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508060020160009054906101000a900460ff1615611b1e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b1590614d1b565b60405180910390fd5b6000611b2933611627565b905060018260020160006101000a81548160ff021916908315150217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415611ca4576002601754611bad9190615019565b9050601560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f25f5629a2805dc97540e082b5064e0f293a9e3ab76c65e09ea158d7ab86e0ffa83604051611c2e9190614e7b565b60405180910390a360006018541115611c9f57600060185490506000601881905550611c9d3382600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16613bfe9092919063ffffffff16565b505b611d2c565b601560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f861b5b4aea4c9b6c9f0a25eb3592c9028bd2a94954a4c56567f815cf38af5dca83604051611d239190614e7b565b60405180910390a35b601560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401611d8992919061492e565b602060405180830381600087803b158015611da357600080fd5b505af1158015611db7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ddb9190614274565b5050505050565b600d5481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60075481565b60135481565b60008015611e7957601260159054906101000a900460ff16611e74576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e6b90614d7b565b60405180910390fd5b611eca565b601260159054906101000a900460ff1615611ec9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ec090614a3b565b60405180910390fd5b5b6003611ed58161393f565b600080600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691509150600073ffffffffffffffffffffffffffffffffffffffff16601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e6a4390584846040518363ffffffff1660e01b8152600401611f97929190614905565b60206040518083038186803b158015611faf57600080fd5b505afa158015611fc3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fe79190614168565b73ffffffffffffffffffffffffffffffffffffffff16148061213257506000601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e6a4390584846040518363ffffffff1660e01b8152600401612063929190614905565b60206040518083038186803b15801561207b57600080fd5b505afa15801561208f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120b39190614168565b73ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156120f857600080fd5b505afa15801561210c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061213091906142ce565b145b612171576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161216890614a5b565b60405180910390fd5b6000601c54116121b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121ad90614c3b565b60405180910390fd5b6000601854905080600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561222657600080fd5b505afa15801561223a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061225e91906142fb565b600a61226a919061509d565b601c5461227791906151bb565b6122819190615019565b600754111561238a57600754600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156122f557600080fd5b505afa158015612309573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061232d91906142fb565b600a612339919061509d565b601c5461234691906151bb565b6123509190615019565b905060185481601a5461236391906151bb565b61236d9190615019565b601a81905550601a546019546123839190615215565b601b819055505b600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d0e30db0601c546040518263ffffffff1660e01b81526004016000604051808303818588803b1580156123f657600080fd5b505af115801561240a573d6000803e3d6000fd5b5050505050600073ffffffffffffffffffffffffffffffffffffffff16601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e6a4390585856040518363ffffffff1660e01b8152600401612484929190614905565b60206040518083038186803b15801561249c57600080fd5b505afa1580156124b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124d49190614168565b73ffffffffffffffffffffffffffffffffffffffff1614156125e457601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c9c6539684846040518363ffffffff1660e01b815260040161254d929190614905565b602060405180830381600087803b15801561256757600080fd5b505af115801561257b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061259f9190614168565b601560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506126d2565b601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e6a4390584846040518363ffffffff1660e01b8152600401612641929190614905565b60206040518083038186803b15801561265957600080fd5b505afa15801561266d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126919190614168565b601560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb601560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16601c546040518363ffffffff1660e01b815260040161275392919061492e565b602060405180830381600087803b15801561276d57600080fd5b505af1158015612781573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127a59190614274565b50612815601560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16613bfe9092919063ffffffff16565b601560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636a627842306040518263ffffffff1660e01b815260040161287091906148ea565b602060405180830381600087803b15801561288a57600080fd5b505af115801561289e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128c291906142ce565b601781905550601c546016819055506000601c8190555080601860008282546128eb9190615215565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16601560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f5c40bbf7a34ef1e42b8d0c2ea5fd1e07027254ce0a1ccf4f8ced71dacb8e596b8460165460405161298c929190614e96565b60405180910390a45050505050565b600080156129f757601260159054906101000a900460ff166129f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129e990614d7b565b60405180910390fd5b612a48565b601260159054906101000a900460ff1615612a47576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a3e90614a3b565b60405180910390fd5b5b6001612a538161393f565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415612ae4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612adb90614b3b565b60405180910390fd5b60003411612b27576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b1e90614a1b565b60405180910390fd5b6000601460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000348260010154612b7c9190614fc3565b9050601354811115612bc3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612bba90614b1b565b60405180910390fd5b60008260000154821115612bf557612be9836000015483612be49190615215565b611818565b90508183600001819055505b81836001018190555034601c6000828254612c109190614fc3565b925050819055506000811115612cb057600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166379cc679033836040518363ffffffff1660e01b8152600401612c7d92919061492e565b600060405180830381600087803b158015612c9757600080fd5b505af1158015612cab573d6000803e3d6000fd5b505050505b3373ffffffffffffffffffffffffffffffffffffffff167fdf263dfdd75a72e5829e34d350ee8711b919e31df66d67aac31f6ed7d7cc82333483604051612cf8929190614e96565b60405180910390a25050505050565b601560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008015612d8957601260159054906101000a900460ff16612d84576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d7b90614d7b565b60405180910390fd5b612dda565b601260159054906101000a900460ff1615612dd9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612dd090614a3b565b60405180910390fd5b5b6000612de46111fb565b905060016003811115612dfa57612df96153e4565b5b816003811115612e0d57612e0c6153e4565b5b1480612e3d575060026003811115612e2857612e276153e4565b5b816003811115612e3b57612e3a6153e4565b5b145b612e7c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e7390614b5b565b60405180910390fd5b60008311612ebf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612eb690614d5b565b60405180910390fd5b6000601460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508381600101541015612f49576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f4090614bbb565b60405180910390fd5b83816001016000828254612f5d9190615215565b925050819055506000670de0b6b3a7640000612f7761377d565b86612f8291906151bb565b612f8c9190615019565b905060008186612f9c9190615215565b905085601c6000828254612fb09190615215565b92505081905550612fc13382613c84565b600082111561307457613073601260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663308097b26040518163ffffffff1660e01b815260040160206040518083038186803b15801561303557600080fd5b505afa158015613049573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061306d9190614168565b83613c84565b5b3373ffffffffffffffffffffffffffffffffffffffff167fe6b386172074b393dc04ed6cb1a352475ffad5dd8cebc76231a3b683141ea6fb876040516130ba9190614e7b565b60405180910390a2505050505050565b60085481565b60045481565b6001801561313257601260159054906101000a900460ff1661312d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161312490614d7b565b60405180910390fd5b613183565b601260159054906101000a900460ff1615613182576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161317990614a3b565b60405180910390fd5b5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146132ed576000601460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000816001015411613262576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161325990614dfb565b60405180910390fd5b6000816001015490506000826001018190555080601c60008282546132879190615215565b925050819055506132983382613c84565b3373ffffffffffffffffffffffffffffffffffffffff167f294f16210f954e5f97ec8fa6c28841b4e9242b2cb416033c671d1706d1802030826040516132de9190614e7b565b60405180910390a250506133d0565b60006019546018546132ff9190614fc3565b905060006018819055506000601981905550613380600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16613bfe9092919063ffffffff16565b3373ffffffffffffffffffffffffffffffffffffffff167f9b6c3d8b63229d4e633c9d23e1e20216ea84beb2e492f9c063cd4e47441dd2b4826040516133c69190614e7b565b60405180910390a2505b50565b6000801561342f57601260159054906101000a900460ff1661342a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161342190614d7b565b60405180910390fd5b613480565b601260159054906101000a900460ff161561347f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161347690614a3b565b60405180910390fd5b5b600073ffffffffffffffffffffffffffffffffffffffff16601560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415613512576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161350990614c9b565b60405180910390fd5b6000601460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508060020160019054906101000a900460ff16156135a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161359e90614bdb565b60405180910390fd5b60018160020160016101000a81548160ff0219169083151502179055506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141561362657601b549050613648565b601654601a54836001015461363b91906151bb565b6136459190615019565b90505b6000811161368b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161368290614cbb565b60405180910390fd5b806019600082825461369d9190615215565b925050819055506136f13382600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16613bfe9092919063ffffffff16565b600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fc1038543e891141d837da01a4759fa3669d79d338a2f6989670452adfbab1168836040516137709190614e7b565b60405180910390a3505050565b6000806002544261378e9190615215565b90506004548110156137a45760009150506137f2565b6003548110156137eb576004546003546137be9190615215565b600a54600454836137cf9190615215565b6137d991906151bb565b6137e39190615019565b9150506137f2565b600b549150505b90565b6137fd613d84565b73ffffffffffffffffffffffffffffffffffffffff1661381b611de8565b73ffffffffffffffffffffffffffffffffffffffff1614613871576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161386890614c7b565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156138e1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016138d890614a9b565b60405180910390fd5b6138ea81613d8c565b50565b601260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60065481565b600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006003811115613953576139526153e4565b5b816003811115613966576139656153e4565b5b14156139df57600060038111156139805761397f6153e4565b5b6139886111fb565b600381111561399a576139996153e4565b5b146139da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016139d190614adb565b60405180910390fd5b613bfb565b600160038111156139f3576139f26153e4565b5b816003811115613a0657613a056153e4565b5b1415613a7f5760016003811115613a2057613a1f6153e4565b5b613a286111fb565b6003811115613a3a57613a396153e4565b5b14613a7a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613a7190614cdb565b60405180910390fd5b613bfa565b60026003811115613a9357613a926153e4565b5b816003811115613aa657613aa56153e4565b5b1415613b1f5760026003811115613ac057613abf6153e4565b5b613ac86111fb565b6003811115613ada57613ad96153e4565b5b14613b1a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613b1190614a7b565b60405180910390fd5b613bf9565b600380811115613b3257613b316153e4565b5b816003811115613b4557613b446153e4565b5b1415613bbd57600380811115613b5e57613b5d6153e4565b5b613b666111fb565b6003811115613b7857613b776153e4565b5b14613bb8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613baf90614bfb565b60405180910390fd5b613bf8565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613bef90614c5b565b60405180910390fd5b5b5b5b50565b613c7f8363a9059cbb60e01b8484604051602401613c1d92919061492e565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050613e50565b505050565b60008273ffffffffffffffffffffffffffffffffffffffff1682600067ffffffffffffffff811115613cb957613cb8615413565b5b6040519080825280601f01601f191660200182016040528015613ceb5781602001600182028036833780820191505090505b50604051613cf991906148d3565b60006040518083038185875af1925050503d8060008114613d36576040519150601f19603f3d011682016040523d82523d6000602084013e613d3b565b606091505b5050905080613d7f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613d7690614e3b565b60405180910390fd5b505050565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000613eb2826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16613f179092919063ffffffff16565b9050600081511115613f125780806020019051810190613ed29190614274565b613f11576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613f0890614e1b565b60405180910390fd5b5b505050565b6060613f268484600085613f2f565b90509392505050565b606082471015613f74576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613f6b90614b7b565b60405180910390fd5b613f7d85614043565b613fbc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613fb390614d9b565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051613fe591906148d3565b60006040518083038185875af1925050503d8060008114614022576040519150601f19603f3d011682016040523d82523d6000602084013e614027565b606091505b5091509150614037828286614056565b92505050949350505050565b600080823b905060008111915050919050565b60608315614066578290506140b6565b6000835111156140795782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016140ad91906149f9565b60405180910390fd5b9392505050565b6000813590506140cc81615d7e565b92915050565b6000815190506140e181615d7e565b92915050565b6000815190506140f681615d95565b92915050565b60008135905061410b81615dac565b92915050565b60008151905061412081615dac565b92915050565b60008151905061413581615dc3565b92915050565b60006020828403121561415157614150615442565b5b600061415f848285016140bd565b91505092915050565b60006020828403121561417e5761417d615442565b5b600061418c848285016140d2565b91505092915050565b6000806000806000806000806000806101408b8d0312156141b9576141b8615442565b5b60006141c78d828e016140bd565b9a505060206141d88d828e016140fc565b99505060406141e98d828e016140bd565b98505060606141fa8d828e016140fc565b975050608061420b8d828e016140fc565b96505060a061421c8d828e016140fc565b95505060c061422d8d828e016140fc565b94505060e061423e8d828e016140fc565b9350506101006142508d828e016140fc565b9250506101206142628d828e016140fc565b9150509295989b9194979a5092959850565b60006020828403121561428a57614289615442565b5b6000614298848285016140e7565b91505092915050565b6000602082840312156142b7576142b6615442565b5b60006142c5848285016140fc565b91505092915050565b6000602082840312156142e4576142e3615442565b5b60006142f284828501614111565b91505092915050565b60006020828403121561431157614310615442565b5b600061431f84828501614126565b91505092915050565b61433181615249565b82525050565b6143408161525b565b82525050565b600061435182614f91565b61435b8185614fa7565b935061436b818560208601615353565b80840191505092915050565b614380816152b1565b82525050565b61438f816152d5565b82525050565b61439e816152f9565b82525050565b6143ad8161531d565b82525050565b6143bc81615341565b82525050565b60006143cd82614f9c565b6143d78185614fb2565b93506143e7818560208601615353565b6143f081615447565b840191505092915050565b6000614408602e83614fb2565b915061441382615465565b604082019050919050565b600061442b601483614fb2565b9150614436826154b4565b602082019050919050565b600061444e602783614fb2565b9150614459826154dd565b604082019050919050565b6000614471601d83614fb2565b915061447c8261552c565b602082019050919050565b6000614494602683614fb2565b915061449f82615555565b604082019050919050565b60006144b7603483614fb2565b91506144c2826155a4565b604082019050919050565b60006144da601f83614fb2565b91506144e5826155f3565b602082019050919050565b60006144fd603483614fb2565b91506145088261561c565b604082019050919050565b6000614520602a83614fb2565b915061452b8261566b565b604082019050919050565b6000614543602683614fb2565b915061454e826156ba565b604082019050919050565b6000614566601f83614fb2565b915061457182615709565b602082019050919050565b6000614589602683614fb2565b915061459482615732565b604082019050919050565b60006145ac603283614fb2565b91506145b782615781565b604082019050919050565b60006145cf602d83614fb2565b91506145da826157d0565b604082019050919050565b60006145f2602983614fb2565b91506145fd8261581f565b604082019050919050565b6000614615601f83614fb2565b91506146208261586e565b602082019050919050565b6000614638603183614fb2565b915061464382615897565b604082019050919050565b600061465b601c83614fb2565b9150614666826158e6565b602082019050919050565b600061467e601a83614fb2565b91506146898261590f565b602082019050919050565b60006146a1602083614fb2565b91506146ac82615938565b602082019050919050565b60006146c4601d83614fb2565b91506146cf82615961565b602082019050919050565b60006146e7602d83614fb2565b91506146f28261598a565b604082019050919050565b600061470a601d83614fb2565b9150614715826159d9565b602082019050919050565b600061472d602983614fb2565b915061473882615a02565b604082019050919050565b6000614750602883614fb2565b915061475b82615a51565b604082019050919050565b6000614773602783614fb2565b915061477e82615aa0565b604082019050919050565b6000614796602483614fb2565b91506147a182615aef565b604082019050919050565b60006147b9601d83614fb2565b91506147c482615b3e565b602082019050919050565b60006147dc601d83614fb2565b91506147e782615b67565b602082019050919050565b60006147ff602083614fb2565b915061480a82615b90565b602082019050919050565b6000614822603383614fb2565b915061482d82615bb9565b604082019050919050565b6000614845605183614fb2565b915061485082615c08565b606082019050919050565b6000614868602a83614fb2565b915061487382615c7d565b604082019050919050565b600061488b602183614fb2565b915061489682615ccc565b604082019050919050565b60006148ae602f83614fb2565b91506148b982615d1b565b604082019050919050565b6148cd8161529a565b82525050565b60006148df8284614346565b915081905092915050565b60006020820190506148ff6000830184614328565b92915050565b600060408201905061491a6000830185614328565b6149276020830184614328565b9392505050565b60006040820190506149436000830185614328565b61495060208301846148c4565b9392505050565b600060208201905061496c6000830184614337565b92915050565b60006020820190506149876000830184614377565b92915050565b60006020820190506149a26000830184614386565b92915050565b60006020820190506149bd6000830184614395565b92915050565b60006020820190506149d860008301846143a4565b92915050565b60006020820190506149f360008301846143b3565b92915050565b60006020820190508181036000830152614a1381846143c2565b905092915050565b60006020820190508181036000830152614a34816143fb565b9050919050565b60006020820190508181036000830152614a548161441e565b9050919050565b60006020820190508181036000830152614a7481614441565b9050919050565b60006020820190508181036000830152614a9481614464565b9050919050565b60006020820190508181036000830152614ab481614487565b9050919050565b60006020820190508181036000830152614ad4816144aa565b9050919050565b60006020820190508181036000830152614af4816144cd565b9050919050565b60006020820190508181036000830152614b14816144f0565b9050919050565b60006020820190508181036000830152614b3481614513565b9050919050565b60006020820190508181036000830152614b5481614536565b9050919050565b60006020820190508181036000830152614b7481614559565b9050919050565b60006020820190508181036000830152614b948161457c565b9050919050565b60006020820190508181036000830152614bb48161459f565b9050919050565b60006020820190508181036000830152614bd4816145c2565b9050919050565b60006020820190508181036000830152614bf4816145e5565b9050919050565b60006020820190508181036000830152614c1481614608565b9050919050565b60006020820190508181036000830152614c348161462b565b9050919050565b60006020820190508181036000830152614c548161464e565b9050919050565b60006020820190508181036000830152614c7481614671565b9050919050565b60006020820190508181036000830152614c9481614694565b9050919050565b60006020820190508181036000830152614cb4816146b7565b9050919050565b60006020820190508181036000830152614cd4816146da565b9050919050565b60006020820190508181036000830152614cf4816146fd565b9050919050565b60006020820190508181036000830152614d1481614720565b9050919050565b60006020820190508181036000830152614d3481614743565b9050919050565b60006020820190508181036000830152614d5481614766565b9050919050565b60006020820190508181036000830152614d7481614789565b9050919050565b60006020820190508181036000830152614d94816147ac565b9050919050565b60006020820190508181036000830152614db4816147cf565b9050919050565b60006020820190508181036000830152614dd4816147f2565b9050919050565b60006020820190508181036000830152614df481614815565b9050919050565b60006020820190508181036000830152614e1481614838565b9050919050565b60006020820190508181036000830152614e348161485b565b9050919050565b60006020820190508181036000830152614e548161487e565b9050919050565b60006020820190508181036000830152614e74816148a1565b9050919050565b6000602082019050614e9060008301846148c4565b92915050565b6000604082019050614eab60008301856148c4565b614eb860208301846148c4565b9392505050565b6000608082019050614ed460008301876148c4565b614ee160208301866148c4565b614eee6040830185614337565b614efb6060830184614337565b95945050505050565b600061012082019050614f1a600083018c6148c4565b614f27602083018b6148c4565b614f34604083018a6148c4565b614f4160608301896148c4565b614f4e60808301886148c4565b614f5b60a08301876148c4565b614f6860c08301866148c4565b614f7560e08301856148c4565b614f836101008301846148c4565b9a9950505050505050505050565b600081519050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b6000614fce8261529a565b9150614fd98361529a565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561500e5761500d615386565b5b828201905092915050565b60006150248261529a565b915061502f8361529a565b92508261503f5761503e6153b5565b5b828204905092915050565b6000808291508390505b6001851115615094578086048111156150705761506f615386565b5b600185161561507f5780820291505b808102905061508d85615458565b9450615054565b94509492505050565b60006150a88261529a565b91506150b3836152a4565b92506150e07fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84846150e8565b905092915050565b6000826150f857600190506151b4565b8161510657600090506151b4565b816001811461511c576002811461512657615155565b60019150506151b4565b60ff84111561513857615137615386565b5b8360020a91508482111561514f5761514e615386565b5b506151b4565b5060208310610133831016604e8410600b841016171561518a5782820a90508381111561518557615184615386565b5b6151b4565b615197848484600161504a565b925090508184048111156151ae576151ad615386565b5b81810290505b9392505050565b60006151c68261529a565b91506151d18361529a565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561520a57615209615386565b5b828202905092915050565b60006152208261529a565b915061522b8361529a565b92508282101561523e5761523d615386565b5b828203905092915050565b60006152548261527a565b9050919050565b60008115159050919050565b600081905061527582615d6a565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60006152bc826152c3565b9050919050565b60006152ce8261527a565b9050919050565b60006152e0826152e7565b9050919050565b60006152f28261527a565b9050919050565b60006153048261530b565b9050919050565b60006153168261527a565b9050919050565b60006153288261532f565b9050919050565b600061533a8261527a565b9050919050565b600061534c82615267565b9050919050565b60005b83811015615371578082015181840152602081019050615356565b83811115615380576000848401525b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b6000601f19601f8301169050919050565b60008160011c9050919050565b7f4c61756e63684576656e743a206578706563746564206e6f6e2d7a65726f204160008201527f56415820746f206465706f736974000000000000000000000000000000000000602082015250565b7f4c61756e63684576656e743a2073746f70706564000000000000000000000000600082015250565b7f4c61756e63684576656e743a206c6971756964207061697220616c726561647960008201527f2065786973747300000000000000000000000000000000000000000000000000602082015250565b7f4c61756e63684576656e743a206e6f7420696e2070686173652074776f000000600082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4c61756e63684576656e743a2063616e2774207769746864726177206265666f60008201527f72652069737375657227732074696d656c6f636b000000000000000000000000602082015250565b7f4c61756e63684576656e743a206e6f7420696e206e6f74207374617274656400600082015250565b7f4c61756e63684576656e743a2063616e2774206c6f636b2075736572204c502060008201527f666f72206d6f7265207468616e20372064617973000000000000000000000000602082015250565b7f4c61756e63684576656e743a20616d6f756e742065786365656473206d61782060008201527f616c6c6f636174696f6e00000000000000000000000000000000000000000000602082015250565b7f4c61756e63684576656e743a206973737565722063616e6e6f7420706172746960008201527f6369706174650000000000000000000000000000000000000000000000000000602082015250565b7f4c61756e63684576656e743a20756e61626c6520746f20776974686472617700600082015250565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b7f4c61756e63684576656e743a2063616e2774207769746864726177206265666f60008201527f7265207573657227732074696d656c6f636b0000000000000000000000000000602082015250565b7f4c61756e63684576656e743a2077697468647261776e20616d6f756e7420657860008201527f63656564732062616c616e636500000000000000000000000000000000000000602082015250565b7f4c61756e63684576656e743a20696e63656e746976657320616c72656164792060008201527f77697468647261776e0000000000000000000000000000000000000000000000602082015250565b7f4c61756e63684576656e743a206e6f7420696e20706861736520746872656500600082015250565b7f4c61756e63684576656e743a2063616c6c6572206973206e6f7420526f636b6560008201527f744a6f65466163746f7279206f776e6572000000000000000000000000000000602082015250565b7f4c61756e63684576656e743a206e6f20617661782062616c616e636500000000600082015250565b7f4c61756e63684576656e743a20756e6b6e6f776e207374617465000000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f4c61756e63684576656e743a2070616972206e6f742063726561746564000000600082015250565b7f4c61756e63684576656e743a2063616c6c657220686173206e6f20696e63656e60008201527f7469766520746f20636c61696d00000000000000000000000000000000000000602082015250565b7f4c61756e63684576656e743a206e6f7420696e207068617365206f6e65000000600082015250565b7f4c61756e63684576656e743a206669786564576974686472617750656e616c7460008201527f7920746f6f206269670000000000000000000000000000000000000000000000602082015250565b7f4c61756e63684576656e743a206c697175696469747920616c7265616479207760008201527f697468647261776e000000000000000000000000000000000000000000000000602082015250565b7f4c61756e63684576656e743a206d6178576974686472617750656e616c74792060008201527f746f6f2062696700000000000000000000000000000000000000000000000000602082015250565b7f4c61756e63684576656e743a20696e76616c696420776974686472617720616d60008201527f6f756e7400000000000000000000000000000000000000000000000000000000602082015250565b7f4c61756e63684576656e743a206973207374696c6c2072756e6e696e67000000600082015250565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b7f4c61756e63684576656e743a20616c726561647920696e697469616c697a6564600082015250565b7f4c61756e63684576656e743a207374617274206f66207068617365203120636160008201527f6e6e6f7420626520696e20746865207061737400000000000000000000000000602082015250565b7f4c61756e63684576656e743a206578706563746564207573657220746f20686160008201527f7665206e6f6e2d7a65726f2062616c616e636520746f20706572666f726d206560208201527f6d657267656e6379207769746864726177000000000000000000000000000000604082015250565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b7f4c61756e63684576656e743a2061766178207472616e73666572206661696c6560008201527f6400000000000000000000000000000000000000000000000000000000000000602082015250565b7f4c61756e63684576656e743a206973737565722063616e27742077697468647260008201527f6177206265666f72652075736572730000000000000000000000000000000000602082015250565b60048110615d7b57615d7a6153e4565b5b50565b615d8781615249565b8114615d9257600080fd5b50565b615d9e8161525b565b8114615da957600080fd5b50565b615db58161529a565b8114615dc057600080fd5b50565b615dcc816152a4565b8114615dd757600080fd5b5056fea264697066735822122045fac181651dd822d6a6252c5a4bb0165a5cb135f0aa8a6fea3dbec7b1117e2964736f6c63430008060033",
  "devdoc": {
    "author": "Trader Joe",
    "kind": "dev",
    "methods": {
      "createPair()": {
        "details": "Can only be called once after phase 3 has started"
      },
      "getPenalty()": {
        "returns": {
          "_0": "The penalty to apply to a withdrawal amount"
        }
      },
      "getRJoeAmount(uint256)": {
        "params": {
          "_avaxAmount": "The amount of AVAX to deposit"
        },
        "returns": {
          "_0": "The amount of rJOE needed"
        }
      },
      "getReserves()": {
        "returns": {
          "_0": "The balances of AVAX and issued token held by the launch contract"
        }
      },
      "initialize(address,uint256,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": {
        "details": "This function is called by the factory immediately after it creates the contract instance",
        "params": {
          "_auctionStart": "The start time of the auction",
          "_fixedWithdrawPenalty": "The fixed withdraw penalty during phase 2, in parts per 1e18",
          "_floorPrice": "The minimum price the token is sold at",
          "_issuer": "Address of the token issuer",
          "_issuerTimelock": "The time the issuer must wait after auction ends to withdraw liquidity",
          "_maxAllocation": "The maximum amount of AVAX depositable",
          "_maxWithdrawPenalty": "The max withdraw penalty during phase 1, in parts per 1e18",
          "_token": "The contract address of auctioned token",
          "_tokenIncentivesPercent": "The token incentives percent, in part per 1e18, e.g 5e16 is 5% of incentives",
          "_userTimelock": "The time a user must wait after auction ends to withdraw liquidity"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pairBalance(address)": {
        "params": {
          "_user": "The address of the user to check"
        },
        "returns": {
          "_0": "The user's balance of liquidity pool token"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdrawAVAX(uint256)": {
        "params": {
          "_amount": "The amount of AVAX to withdraw"
        }
      }
    },
    "stateVariables": {
      "avaxAllocated": {
        "details": "The total amount of avax that was sent to the router to create the initial liquidity pair. Used to calculate the amount of LP to send based on the user's participation in the launch event"
      },
      "avaxReserve": {
        "details": "avaxReserve is the exact amount of AVAX that needs to be kept inside the contract in order to send everyone's AVAX. If there is some excess (because someone sent token directly to the contract), the penaltyCollector can collect the excess using `skim()`"
      },
      "floorPrice": {
        "details": "floorPrice is scaled to 1e18"
      },
      "lpSupply": {
        "details": "The exact supply of LP minted when creating the initial liquidity pair."
      },
      "pair": {
        "details": "The address of the JoePair, set after createLiquidityPool is called"
      },
      "tokenIncentiveIssuerRefund": {
        "details": "The share refunded to the issuer. Users receive 5% of the token that were sent to the Router. If the floor price is not met, the incentives still needs to be 5% of the value sent to the Router, so there will be an excess of tokens returned to the issuer if he calls `withdrawIncentives()`"
      },
      "tokenIncentivesBalance": {
        "details": "Keeps track of amount of token incentives that needs to be kept by contract in order to send the right amounts to issuer and users"
      },
      "tokenIncentivesForUsers": {
        "details": "Total incentives for users for locking their LPs for an additional period of time after the pair is created"
      },
      "tokenIncentivesPercent": {
        "details": "Amount of tokens used as incentives for locking up LPs during phase 3, in parts per 1e18 and expressed as an additional percentage to the tokens for auction. E.g. if tokenIncentivesPercent = 5e16 (5%), and issuer sends 105 000 tokens, then 105 000 * 1e18 / (1e18 + 5e16) = 5 000 tokens are used for incentives"
      },
      "tokenReserve": {
        "details": "Used to know how many issuing tokens will be sent to JoeRouter to create the initial liquidity pair. If floor price is not met, we will send fewer issuing tokens and `tokenReserve` will keep track of the leftover amount. It's then used to calculate the number of tokens needed to be sent to both issuer and users (if there are leftovers and every token is sent to the pair, tokenReserve will be equal to 0)"
      }
    },
    "title": "Rocket Joe Launch Event",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "allowEmergencyWithdraw()": {
        "notice": "Stops the launch event and allows participants withdraw deposits"
      },
      "auctionStart()": {
        "notice": "The start time of phase 1"
      },
      "createPair()": {
        "notice": "Create the JoePair"
      },
      "currentPhase()": {
        "notice": "The current phase the auction is in"
      },
      "depositAVAX()": {
        "notice": "Deposits AVAX and burns rJoe"
      },
      "emergencyWithdraw()": {
        "notice": "Withdraw AVAX if launch has been cancelled"
      },
      "fixedWithdrawPenalty()": {
        "notice": "The fixed withdraw penalty during phase 2, in parts per 1e18 e.g. fixed penalty of 20% `fixedWithdrawPenalty = 2e17`"
      },
      "floorPrice()": {
        "notice": "Floor price in AVAX per token (can be 0)"
      },
      "getPenalty()": {
        "notice": "Returns the current penalty for early withdrawal"
      },
      "getRJoeAmount(uint256)": {
        "notice": "Get the rJOE amount needed to deposit AVAX"
      },
      "getReserves()": {
        "notice": "Returns the current balance of the pool"
      },
      "initialize(address,uint256,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": {
        "notice": "Initialise the launch event with needed paramaters"
      },
      "issuer()": {
        "notice": "Issuer of sale tokens"
      },
      "issuerTimelock()": {
        "notice": "Timelock duration post phase 3 When can issuer withdraw their LP tokens"
      },
      "maxWithdrawPenalty()": {
        "notice": "The max withdraw penalty during phase 1, in parts per 1e18 e.g. max penalty of 50% `maxWithdrawPenalty`= 5e17"
      },
      "pairBalance(address)": {
        "notice": "The total amount of liquidity pool tokens the user can withdraw"
      },
      "skim()": {
        "notice": "Force balances to match tokens that were deposited, but not sent directly to the contract. Any excess tokens are sent to the penaltyCollector"
      },
      "userTimelock()": {
        "notice": "Timelock duration post phase 3 when can user withdraw their LP tokens"
      },
      "withdrawAVAX(uint256)": {
        "notice": "Withdraw AVAX, only permitted during phase 1 and 2"
      },
      "withdrawIncentives()": {
        "notice": "Withdraw incentives tokens"
      },
      "withdrawLiquidity()": {
        "notice": "Withdraw liquidity pool tokens"
      }
    },
    "notice": "A liquidity launch contract enabling price discovery and token distribution at secondary market listing price",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 798,
        "contract": "contracts/LaunchEvent.sol:LaunchEvent",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2206,
        "contract": "contracts/LaunchEvent.sol:LaunchEvent",
        "label": "issuer",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 2209,
        "contract": "contracts/LaunchEvent.sol:LaunchEvent",
        "label": "auctionStart",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 2211,
        "contract": "contracts/LaunchEvent.sol:LaunchEvent",
        "label": "PHASE_ONE_DURATION",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 2213,
        "contract": "contracts/LaunchEvent.sol:LaunchEvent",
        "label": "PHASE_ONE_NO_FEE_DURATION",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 2215,
        "contract": "contracts/LaunchEvent.sol:LaunchEvent",
        "label": "PHASE_TWO_DURATION",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 2218,
        "contract": "contracts/LaunchEvent.sol:LaunchEvent",
        "label": "tokenIncentivesPercent",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 2221,
        "contract": "contracts/LaunchEvent.sol:LaunchEvent",
        "label": "floorPrice",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 2224,
        "contract": "contracts/LaunchEvent.sol:LaunchEvent",
        "label": "userTimelock",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 2227,
        "contract": "contracts/LaunchEvent.sol:LaunchEvent",
        "label": "issuerTimelock",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 2230,
        "contract": "contracts/LaunchEvent.sol:LaunchEvent",
        "label": "maxWithdrawPenalty",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 2233,
        "contract": "contracts/LaunchEvent.sol:LaunchEvent",
        "label": "fixedWithdrawPenalty",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 2236,
        "contract": "contracts/LaunchEvent.sol:LaunchEvent",
        "label": "rJoe",
        "offset": 0,
        "slot": "12",
        "type": "t_contract(IRocketJoeToken)6366"
      },
      {
        "astId": 2238,
        "contract": "contracts/LaunchEvent.sol:LaunchEvent",
        "label": "rJoePerAvax",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 2241,
        "contract": "contracts/LaunchEvent.sol:LaunchEvent",
        "label": "WAVAX",
        "offset": 0,
        "slot": "14",
        "type": "t_contract(IWAVAX)6402"
      },
      {
        "astId": 2244,
        "contract": "contracts/LaunchEvent.sol:LaunchEvent",
        "label": "token",
        "offset": 0,
        "slot": "15",
        "type": "t_contract(IERC20Metadata)1624"
      },
      {
        "astId": 2247,
        "contract": "contracts/LaunchEvent.sol:LaunchEvent",
        "label": "router",
        "offset": 0,
        "slot": "16",
        "type": "t_contract(IJoeRouter02)5972"
      },
      {
        "astId": 2250,
        "contract": "contracts/LaunchEvent.sol:LaunchEvent",
        "label": "factory",
        "offset": 0,
        "slot": "17",
        "type": "t_contract(IJoeFactory)5334"
      },
      {
        "astId": 2253,
        "contract": "contracts/LaunchEvent.sol:LaunchEvent",
        "label": "rocketJoeFactory",
        "offset": 0,
        "slot": "18",
        "type": "t_contract(IRocketJoeFactory)6276"
      },
      {
        "astId": 2255,
        "contract": "contracts/LaunchEvent.sol:LaunchEvent",
        "label": "initialized",
        "offset": 20,
        "slot": "18",
        "type": "t_bool"
      },
      {
        "astId": 2257,
        "contract": "contracts/LaunchEvent.sol:LaunchEvent",
        "label": "stopped",
        "offset": 21,
        "slot": "18",
        "type": "t_bool"
      },
      {
        "astId": 2259,
        "contract": "contracts/LaunchEvent.sol:LaunchEvent",
        "label": "maxAllocation",
        "offset": 0,
        "slot": "19",
        "type": "t_uint256"
      },
      {
        "astId": 2264,
        "contract": "contracts/LaunchEvent.sol:LaunchEvent",
        "label": "getUserInfo",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_address,t_struct(UserInfo)2203_storage)"
      },
      {
        "astId": 2268,
        "contract": "contracts/LaunchEvent.sol:LaunchEvent",
        "label": "pair",
        "offset": 0,
        "slot": "21",
        "type": "t_contract(IJoePair)5576"
      },
      {
        "astId": 2271,
        "contract": "contracts/LaunchEvent.sol:LaunchEvent",
        "label": "avaxAllocated",
        "offset": 0,
        "slot": "22",
        "type": "t_uint256"
      },
      {
        "astId": 2274,
        "contract": "contracts/LaunchEvent.sol:LaunchEvent",
        "label": "lpSupply",
        "offset": 0,
        "slot": "23",
        "type": "t_uint256"
      },
      {
        "astId": 2277,
        "contract": "contracts/LaunchEvent.sol:LaunchEvent",
        "label": "tokenReserve",
        "offset": 0,
        "slot": "24",
        "type": "t_uint256"
      },
      {
        "astId": 2280,
        "contract": "contracts/LaunchEvent.sol:LaunchEvent",
        "label": "tokenIncentivesBalance",
        "offset": 0,
        "slot": "25",
        "type": "t_uint256"
      },
      {
        "astId": 2283,
        "contract": "contracts/LaunchEvent.sol:LaunchEvent",
        "label": "tokenIncentivesForUsers",
        "offset": 0,
        "slot": "26",
        "type": "t_uint256"
      },
      {
        "astId": 2286,
        "contract": "contracts/LaunchEvent.sol:LaunchEvent",
        "label": "tokenIncentiveIssuerRefund",
        "offset": 0,
        "slot": "27",
        "type": "t_uint256"
      },
      {
        "astId": 2289,
        "contract": "contracts/LaunchEvent.sol:LaunchEvent",
        "label": "avaxReserve",
        "offset": 0,
        "slot": "28",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20Metadata)1624": {
        "encoding": "inplace",
        "label": "contract IERC20Metadata",
        "numberOfBytes": "20"
      },
      "t_contract(IJoeFactory)5334": {
        "encoding": "inplace",
        "label": "contract IJoeFactory",
        "numberOfBytes": "20"
      },
      "t_contract(IJoePair)5576": {
        "encoding": "inplace",
        "label": "contract IJoePair",
        "numberOfBytes": "20"
      },
      "t_contract(IJoeRouter02)5972": {
        "encoding": "inplace",
        "label": "contract IJoeRouter02",
        "numberOfBytes": "20"
      },
      "t_contract(IRocketJoeFactory)6276": {
        "encoding": "inplace",
        "label": "contract IRocketJoeFactory",
        "numberOfBytes": "20"
      },
      "t_contract(IRocketJoeToken)6366": {
        "encoding": "inplace",
        "label": "contract IRocketJoeToken",
        "numberOfBytes": "20"
      },
      "t_contract(IWAVAX)6402": {
        "encoding": "inplace",
        "label": "contract IWAVAX",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(UserInfo)2203_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct LaunchEvent.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)2203_storage"
      },
      "t_struct(UserInfo)2203_storage": {
        "encoding": "inplace",
        "label": "struct LaunchEvent.UserInfo",
        "members": [
          {
            "astId": 2193,
            "contract": "contracts/LaunchEvent.sol:LaunchEvent",
            "label": "allocation",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2196,
            "contract": "contracts/LaunchEvent.sol:LaunchEvent",
            "label": "balance",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2199,
            "contract": "contracts/LaunchEvent.sol:LaunchEvent",
            "label": "hasWithdrawnPair",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 2202,
            "contract": "contracts/LaunchEvent.sol:LaunchEvent",
            "label": "hasWithdrawnIncentives",
            "offset": 1,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}