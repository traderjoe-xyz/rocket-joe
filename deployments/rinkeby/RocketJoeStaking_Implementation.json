{
  "address": "0xA3B1AF6C0311f5879b413db61f8BDE92dEaeFe43",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "EmergencyWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_rJoePerSec",
          "type": "uint256"
        }
      ],
      "name": "UpdateEmissionRate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "accRJoePerShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "_joe",
          "type": "address"
        },
        {
          "internalType": "contract RocketJoeToken",
          "name": "_rJoe",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_rJoePerSec",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_startTime",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "joe",
      "outputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastRewardTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "pendingRJoe",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rJoe",
      "outputs": [
        {
          "internalType": "contract RocketJoeToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rJoePerSec",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_rJoePerSec",
          "type": "uint256"
        }
      ],
      "name": "updateEmissionRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updatePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardDebt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x64555b1e9898cfb8e33de90d6c160ed31432863e45f94ec397bb89b37dd8c1d3",
  "receipt": {
    "to": null,
    "from": "0x1d9D82344E76769EB727521822D1EacB834A9024",
    "contractAddress": "0xA3B1AF6C0311f5879b413db61f8BDE92dEaeFe43",
    "transactionIndex": 8,
    "gasUsed": "1900846",
    "logsBloom": "0x
    "blockHash": "0x46b154da2851739e24b02bec446abaf65996d91016fb2491f2f4534ea8971c76",
    "transactionHash": "0x64555b1e9898cfb8e33de90d6c160ed31432863e45f94ec397bb89b37dd8c1d3",
    "logs": [],
    "blockNumber": 10059796,
    "cumulativeGasUsed": "2501203",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "7261b3736d8f60e5be4201443b64a05d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_rJoePerSec\",\"type\":\"uint256\"}],\"name\":\"UpdateEmissionRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"accRJoePerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"_joe\",\"type\":\"address\"},{\"internalType\":\"contract RocketJoeToken\",\"name\":\"_rJoe\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rJoePerSec\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"joe\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRewardTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingRJoe\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rJoe\",\"outputs\":[{\"internalType\":\"contract RocketJoeToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rJoePerSec\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rJoePerSec\",\"type\":\"uint256\"}],\"name\":\"updateEmissionRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Trader Joe\",\"kind\":\"dev\",\"methods\":{\"deposit(uint256)\":{\"params\":{\"_amount\":\"Amount of JOE to deposit\"}},\"initialize(address,address,uint256,uint256)\":{\"params\":{\"_joe\":\"Address of the JOE token contract\",\"_rJoe\":\"Address of the rJOE token contract\",\"_rJoePerSec\":\"Number of rJOE tokens created per second\",\"_startTime\":\"Timestamp at which rJOE rewards starts\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pendingRJoe(address)\":{\"params\":{\"_user\":\"The user to lookup\"},\"returns\":{\"_0\":\"The number of pending rJOE tokens for `_user`\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateEmissionRate(uint256)\":{\"params\":{\"_rJoePerSec\":\"The new value for rJoePerSec\"}},\"withdraw(uint256)\":{\"params\":{\"_amount\":\"Amount of JOE to withdraw\"}}},\"stateVariables\":{\"accRJoePerShare\":{\"details\":\"Accumulated rJOE per share, times PRECISION. See above\"},\"userInfo\":{\"details\":\"Info of each user that stakes LP tokens\"}},\"title\":\"Rocket Joe Staking\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"deposit(uint256)\":{\"notice\":\"Deposit joe to RocketJoeStaking for rJoe allocation\"},\"emergencyWithdraw()\":{\"notice\":\"Withdraw without caring about rewards. EMERGENCY ONLY\"},\"initialize(address,address,uint256,uint256)\":{\"notice\":\"Initialize with needed parameters\"},\"pendingRJoe(address)\":{\"notice\":\"Get pending rJoe for a given `_user`\"},\"updateEmissionRate(uint256)\":{\"notice\":\"Update emission rate\"},\"updatePool()\":{\"notice\":\"Update reward variables of the given pool with latest data\"},\"withdraw(uint256)\":{\"notice\":\"Withdraw JOE and accumulated rJOE from RocketJoeStaking\"}},\"notice\":\"Stake JOE to earn rJOE\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RocketJoeStaking.sol\":\"RocketJoeStaking\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x9ffedb33e192f8821cbaead72596c79ea87fb28a73f8d3a9f5004449799f8e1b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x68861bcc80cacbd498efde75aab6c74a486cc48262660d326c8d7530d9752097\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5ca0eb1120133a6d0799752532d4638048391823a2b623c4fe9ff46e262266fb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3e26a49d2fa5ef8338b8a9467c91e54f417cb07e849b1cc0f4ebc4d2a147938e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f0f878c796dfc7feba6d3c4e3e526c14c7deae8b7bfc71088e3f38fab0d77b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x0b0d548f6381370d394f7a434f994dc678b3ef3e755de106109d61343a685ea7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xd1d8caaeb45f78e0b0715664d56c220c283c89bf8b8c02954af86404d6b367f8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/RocketJoeStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"./RocketJoeToken.sol\\\";\\n\\n/// @title Rocket Joe Staking\\n/// @author Trader Joe\\n/// @notice Stake JOE to earn rJOE\\ncontract RocketJoeStaking is Initializable, OwnableUpgradeable {\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    struct UserInfo {\\n        uint256 amount; // How many JOE tokens the user has provided\\n        uint256 rewardDebt; // Reward debt. See explanation below\\n        //\\n        // We do some fancy math here. Basically, any point in time, the amount of JOEs\\n        // entitled to a user but is pending to be distributed is:\\n        //\\n        //   pending reward = (user.amount * accRJoePerShare) - user.rewardDebt\\n        //\\n        // Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:\\n        //   1. `accRJoePerShare` (and `lastRewardTimestamp`) gets updated\\n        //   2. User receives the pending reward sent to his/her address\\n        //   3. User's `amount` gets updated\\n        //   4. User's `rewardDebt` gets updated\\n    }\\n\\n    IERC20Upgradeable public joe;\\n    uint256 public lastRewardTimestamp;\\n\\n    /// @dev Accumulated rJOE per share, times PRECISION. See above\\n    uint256 public accRJoePerShare;\\n    /// @notice Precision of accRJoePerShare\\n    uint256 private PRECISION;\\n\\n    RocketJoeToken public rJoe;\\n    uint256 public rJoePerSec;\\n\\n    /// @dev Info of each user that stakes LP tokens\\n    mapping(address => UserInfo) public userInfo;\\n\\n    event Deposit(address indexed user, uint256 amount);\\n    event Withdraw(address indexed user, uint256 amount);\\n    event EmergencyWithdraw(address indexed user, uint256 amount);\\n    event UpdateEmissionRate(address indexed user, uint256 _rJoePerSec);\\n\\n    /// @notice Initialize with needed parameters\\n    /// @param _joe Address of the JOE token contract\\n    /// @param _rJoe Address of the rJOE token contract\\n    /// @param _rJoePerSec Number of rJOE tokens created per second\\n    /// @param _startTime Timestamp at which rJOE rewards starts\\n    function initialize(\\n        IERC20Upgradeable _joe,\\n        RocketJoeToken _rJoe,\\n        uint256 _rJoePerSec,\\n        uint256 _startTime\\n    ) public initializer {\\n        __Ownable_init();\\n\\n        require(\\n            _startTime > block.timestamp,\\n            \\\"RocketJoeStaking: rJOE minting needs to start after the current timestamp\\\"\\n        );\\n\\n        PRECISION = 1e18;\\n\\n        joe = _joe;\\n        rJoe = _rJoe;\\n        rJoePerSec = _rJoePerSec;\\n        lastRewardTimestamp = _startTime;\\n    }\\n\\n    /// @notice Get pending rJoe for a given `_user`\\n    /// @param _user The user to lookup\\n    /// @return The number of pending rJOE tokens for `_user`\\n    function pendingRJoe(address _user) external view returns (uint256) {\\n        UserInfo storage user = userInfo[_user];\\n        uint256 joeSupply = joe.balanceOf(address(this));\\n        uint256 _accRJoePerShare = accRJoePerShare;\\n\\n        if (block.timestamp > lastRewardTimestamp && joeSupply != 0) {\\n            uint256 multiplier = block.timestamp - lastRewardTimestamp;\\n            uint256 rJoeReward = multiplier * rJoePerSec;\\n            _accRJoePerShare += (rJoeReward * PRECISION) / joeSupply;\\n        }\\n        return (user.amount * _accRJoePerShare) / PRECISION - user.rewardDebt;\\n    }\\n\\n    /// @notice Deposit joe to RocketJoeStaking for rJoe allocation\\n    /// @param _amount Amount of JOE to deposit\\n    function deposit(uint256 _amount) external {\\n        UserInfo storage user = userInfo[msg.sender];\\n\\n        updatePool();\\n\\n        if (user.amount > 0) {\\n            uint256 pending = (user.amount * accRJoePerShare) /\\n                PRECISION -\\n                user.rewardDebt;\\n            _safeRJoeTransfer(msg.sender, pending);\\n        }\\n        user.amount = user.amount + _amount;\\n        user.rewardDebt = (user.amount * accRJoePerShare) / PRECISION;\\n\\n        joe.safeTransferFrom(msg.sender, address(this), _amount);\\n        emit Deposit(msg.sender, _amount);\\n    }\\n\\n    /// @notice Withdraw JOE and accumulated rJOE from RocketJoeStaking\\n    /// @param _amount Amount of JOE to withdraw\\n    function withdraw(uint256 _amount) external {\\n        UserInfo storage user = userInfo[msg.sender];\\n        require(\\n            user.amount >= _amount,\\n            \\\"RocketJoeStaking: withdraw amount exceeds balance\\\"\\n        );\\n\\n        updatePool();\\n\\n        uint256 pending = (user.amount * accRJoePerShare) /\\n            PRECISION -\\n            user.rewardDebt;\\n\\n        user.amount = user.amount - _amount;\\n        user.rewardDebt = (user.amount * accRJoePerShare) / PRECISION;\\n\\n        _safeRJoeTransfer(msg.sender, pending);\\n        joe.safeTransfer(msg.sender, _amount);\\n        emit Withdraw(msg.sender, _amount);\\n    }\\n\\n    /// @notice Withdraw without caring about rewards. EMERGENCY ONLY\\n    function emergencyWithdraw() external {\\n        UserInfo storage user = userInfo[msg.sender];\\n\\n        uint256 _amount = user.amount;\\n        user.amount = 0;\\n        user.rewardDebt = 0;\\n\\n        joe.safeTransfer(msg.sender, _amount);\\n        emit EmergencyWithdraw(msg.sender, _amount);\\n    }\\n\\n    /// @notice Update emission rate\\n    /// @param _rJoePerSec The new value for rJoePerSec\\n    function updateEmissionRate(uint256 _rJoePerSec) external onlyOwner {\\n        updatePool();\\n        rJoePerSec = _rJoePerSec;\\n        emit UpdateEmissionRate(msg.sender, _rJoePerSec);\\n    }\\n\\n    /// @notice Update reward variables of the given pool with latest data\\n    function updatePool() public {\\n        if (block.timestamp <= lastRewardTimestamp) {\\n            return;\\n        }\\n        uint256 joeSupply = joe.balanceOf(address(this));\\n        if (joeSupply == 0) {\\n            lastRewardTimestamp = block.timestamp;\\n            return;\\n        }\\n        uint256 multiplier = block.timestamp - lastRewardTimestamp;\\n        uint256 rJoeReward = multiplier * rJoePerSec;\\n        accRJoePerShare =\\n            accRJoePerShare +\\n            (rJoeReward * PRECISION) /\\n            joeSupply;\\n        lastRewardTimestamp = block.timestamp;\\n\\n        rJoe.mint(address(this), rJoeReward);\\n    }\\n\\n    /// @notice Safe rJoe transfer function, just in case if rounding error causes pool to not have enough JOEs\\n    /// @param _to Address that wil receive rJoe\\n    /// @param _amount The amount to send\\n    function _safeRJoeTransfer(address _to, uint256 _amount) internal {\\n        uint256 rJoeBal = rJoe.balanceOf(address(this));\\n        if (_amount > rJoeBal) {\\n            IERC20Upgradeable(address(rJoe)).safeTransfer(_to, rJoeBal);\\n        } else {\\n            IERC20Upgradeable(address(rJoe)).safeTransfer(_to, _amount);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1e485c2961672b8a095e83ba4fd8c70413591c59de8d15046671ee769876c725\",\"license\":\"MIT\"},\"contracts/RocketJoeToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./interfaces/IRocketJoeFactory.sol\\\";\\n\\n/// @title Rocket Joe Token - rJOE\\n/// @author Trader Joe\\n/// @notice Infinite supply, but burned to join launch event\\ncontract RocketJoeToken is ERC20(\\\"RocketJoeToken\\\", \\\"rJOE\\\"), Ownable {\\n    IRocketJoeFactory public rocketJoeFactory;\\n\\n    /// @notice Modifier which checks if message.sender is a launch event\\n    modifier onlyRJLaunchEvent() {\\n        require(\\n            rocketJoeFactory.isRJLaunchEvent(msg.sender),\\n            \\\"RocketJoeToken: caller is not a RJLaunchEvent\\\"\\n        );\\n        _;\\n    }\\n\\n    /// @notice Initialise the rocketJoeFactory address\\n    function initialize() external {\\n        require(\\n            address(rocketJoeFactory) == address(0),\\n            \\\"RocketJoeToken: already initialized\\\"\\n        );\\n\\n        rocketJoeFactory = IRocketJoeFactory(msg.sender);\\n    }\\n\\n    /// @dev Creates `_amount` token to `_to`. Must only be called by the owner (RocketJoeStaking)\\n    /// @param _to The address that will receive the mint\\n    /// @param _amount The amount to be minted\\n    function mint(address _to, uint256 _amount) external onlyOwner {\\n        _mint(_to, _amount);\\n    }\\n\\n    /// @dev Destroys `_amount` tokens from `_from`. Callable only by a RJLaunchEvent\\n    /// this doesn't need any approval in order to avoid double approval before entering each launch event\\n    /// @param _from The address that will burn tokens\\n    /// @param _amount The amount to be burned\\n    function burnFrom(address _from, uint256 _amount)\\n        external\\n        onlyRJLaunchEvent\\n    {\\n        _burn(_from, _amount);\\n    }\\n\\n    /// @dev Hook that is called before any transfer of tokens. This includes\\n    /// minting and burning\\n    /// @param _from The address that will transfer the tokens\\n    /// @param _to The address that will receive the tokens\\n    /// @param _amount The amount of token to send\\n    function _beforeTokenTransfer(\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) internal virtual override {\\n        require(\\n            _from == address(0) || _to == address(0) || _from == owner(),\\n            \\\"RocketJoeToken: can't send token\\\"\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xc37db46d560304be5192ed0dd22b8b663ffefb771bfce4487982ca22e3036c1d\",\"license\":\"MIT\"},\"contracts/interfaces/IRocketJoeFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface IRocketJoeFactory {\\n    event RJLaunchEventCreated(\\n        address indexed issuer,\\n        address indexed token,\\n        uint256 phaseOneStartTime,\\n        uint256 phaseTwoStartTime,\\n        uint256 phaseThreeStartTime,\\n        address rJoe,\\n        uint256 rJoePerAvax\\n    );\\n    event SetRJoe(address indexed token);\\n    event SetPenaltyCollector(address indexed collector);\\n    event SetRouter(address indexed router);\\n    event SetFactory(address indexed factory);\\n    event SetRJoePerAvax(uint256 rJoePerAvax);\\n    event IssuingTokenDeposited(address indexed token, uint256 amount);\\n\\n    function eventImplementation() external view returns (address);\\n\\n    function penaltyCollector() external view returns (address);\\n\\n    function wavax() external view returns (address);\\n\\n    function rJoePerAvax() external view returns (uint256);\\n\\n    function router() external view returns (address);\\n\\n    function factory() external view returns (address);\\n\\n    function rJoe() external view returns (address);\\n\\n    function PHASE_ONE_DURATION() external view returns (uint256);\\n\\n    function PHASE_ONE_NO_FEE_DURATION() external view returns (uint256);\\n\\n    function PHASE_TWO_DURATION() external view returns (uint256);\\n\\n    function getRJLaunchEvent(address token)\\n        external\\n        view\\n        returns (address launchEvent);\\n\\n    function isRJLaunchEvent(address token) external view returns (bool);\\n\\n    function allRJLaunchEvents(uint256) external view returns (address pair);\\n\\n    function numLaunchEvents() external view returns (uint256);\\n\\n    function createRJLaunchEvent(\\n        address _issuer,\\n        uint256 _phaseOneStartTime,\\n        address _token,\\n        uint256 _tokenAmount,\\n        uint256 _tokenIncentivesPercent,\\n        uint256 _floorPrice,\\n        uint256 _maxWithdrawPenalty,\\n        uint256 _fixedWithdrawPenalty,\\n        uint256 _maxAllocation,\\n        uint256 _userTimelock,\\n        uint256 _issuerTimelock\\n    ) external returns (address pair);\\n\\n    function setPenaltyCollector(address) external;\\n\\n    function setRouter(address) external;\\n\\n    function setFactory(address) external;\\n\\n    function setRJoe(address) external;\\n\\n    function setRJoePerAvax(uint256) external;\\n\\n    function setPhaseDuration(uint256, uint256) external;\\n\\n    function setPhaseOneNoFeeDuration(uint256) external;\\n}\\n\",\"keccak256\":\"0xf153d963836426f3363f8cf63a1996345ec19833dac947841910cc871899a8c9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612190806100206000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c8063b6b55f2511610097578063e3161ddd11610066578063e3161ddd14610264578063eb990c591461026e578063f2fde38b1461028a578063f8077fae146102a657610100565b8063b6b55f2514610202578063b985a3a01461021e578063db2e21bc1461023c578063dcd9c58b1461024657610100565b80632e1a7d4d116100d35780632e1a7d4d146101a057806335ffb437146101bc578063715018a6146101da5780638da5cb5b146101e457610100565b80630ba84cd214610105578063145b0267146101215780631959a0021461013f57806320b4e81e14610170575b600080fd5b61011f600480360381019061011a919061171b565b6102c4565b005b6101296103a0565b6040516101369190611a03565b60405180910390f35b6101596004803603810190610154919061165a565b6103c6565b604051610167929190611b7b565b60405180910390f35b61018a6004803603810190610185919061165a565b6103ea565b6040516101979190611b60565b60405180910390f35b6101ba60048036038101906101b5919061171b565b61057e565b005b6101c461072b565b6040516101d19190611b60565b60405180910390f35b6101e2610731565b005b6101ec6107b9565b6040516101f9919061196d565b60405180910390f35b61021c6004803603810190610217919061171b565b6107e3565b005b610226610959565b60405161023391906119e8565b60405180910390f35b61024461097f565b005b61024e610a7e565b60405161025b9190611b60565b60405180910390f35b61026c610a84565b005b610288600480360381019061028391906116b4565b610c43565b005b6102a4600480360381019061029f919061165a565b610e14565b005b6102ae610f0c565b6040516102bb9190611b60565b60405180910390f35b6102cc610f12565b73ffffffffffffffffffffffffffffffffffffffff166102ea6107b9565b73ffffffffffffffffffffffffffffffffffffffff1614610340576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161033790611ac0565b60405180910390fd5b610348610a84565b80606a819055503373ffffffffffffffffffffffffffffffffffffffff167fe2492e003bbe8afa53088b406f0c1cb5d9e280370fc72a74cf116ffd343c4053826040516103959190611b60565b60405180910390a250565b606960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b606b6020528060005260406000206000915090508060000154908060010154905082565b600080606b60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161048b919061196d565b60206040518083038186803b1580156104a357600080fd5b505afa1580156104b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104db9190611748565b905060006067549050606654421180156104f6575060008214155b156105485760006066544261050b9190611cb7565b90506000606a548261051d9190611c5d565b9050836068548261052e9190611c5d565b6105389190611c2c565b836105439190611bd6565b925050505b82600101546068548285600001546105609190611c5d565b61056a9190611c2c565b6105749190611cb7565b9350505050919050565b6000606b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508181600001541015610608576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ff90611ae0565b60405180910390fd5b610610610a84565b60008160010154606854606754846000015461062c9190611c5d565b6106369190611c2c565b6106409190611cb7565b90508282600001546106529190611cb7565b8260000181905550606854606754836000015461066f9190611c5d565b6106799190611c2c565b826001018190555061068b3382610f1a565b6106d83384606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166110769092919063ffffffff16565b3373ffffffffffffffffffffffffffffffffffffffff167f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a94243648460405161071e9190611b60565b60405180910390a2505050565b606a5481565b610739610f12565b73ffffffffffffffffffffffffffffffffffffffff166107576107b9565b73ffffffffffffffffffffffffffffffffffffffff16146107ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107a490611ac0565b60405180910390fd5b6107b760006110fc565b565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000606b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905061082e610a84565b600081600001541115610879576000816001015460685460675484600001546108579190611c5d565b6108619190611c2c565b61086b9190611cb7565b90506108773382610f1a565b505b8181600001546108899190611bd6565b816000018190555060685460675482600001546108a69190611c5d565b6108b09190611c2c565b8160010181905550610907333084606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166111c2909392919063ffffffff16565b3373ffffffffffffffffffffffffffffffffffffffff167fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c8360405161094d9190611b60565b60405180910390a25050565b606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000606b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000816000015490506000826000018190555060008260010181905550610a2c3382606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166110769092919063ffffffff16565b3373ffffffffffffffffffffffffffffffffffffffff167f5fafa99d0643513820be26656b45130b01e1c03062e1266bf36f88cbd3bd969582604051610a729190611b60565b60405180910390a25050565b60675481565b6066544211610a9257610c41565b6000606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610aef919061196d565b60206040518083038186803b158015610b0757600080fd5b505afa158015610b1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b3f9190611748565b90506000811415610b57574260668190555050610c41565b600060665442610b679190611cb7565b90506000606a5482610b799190611c5d565b90508260685482610b8a9190611c5d565b610b949190611c2c565b606754610ba19190611bd6565b60678190555042606681905550606960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1930836040518363ffffffff1660e01b8152600401610c0b9291906119bf565b600060405180830381600087803b158015610c2557600080fd5b505af1158015610c39573d6000803e3d6000fd5b505050505050505b565b600060019054906101000a900460ff16610c6b5760008054906101000a900460ff1615610c74565b610c7361124b565b5b610cb3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610caa90611aa0565b60405180910390fd5b60008060019054906101000a900460ff161590508015610d03576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b610d0b61125c565b428211610d4d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d4490611a60565b60405180910390fd5b670de0b6b3a764000060688190555084606560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083606960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082606a81905550816066819055508015610e0d5760008060016101000a81548160ff0219169083151502179055505b5050505050565b610e1c610f12565b73ffffffffffffffffffffffffffffffffffffffff16610e3a6107b9565b73ffffffffffffffffffffffffffffffffffffffff1614610e90576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e8790611ac0565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610f00576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ef790611a40565b60405180910390fd5b610f09816110fc565b50565b60665481565b600033905090565b6000606960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610f77919061196d565b60206040518083038186803b158015610f8f57600080fd5b505afa158015610fa3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fc79190611748565b9050808211156110235761101e8382606960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166110769092919063ffffffff16565b611071565b6110708383606960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166110769092919063ffffffff16565b5b505050565b6110f78363a9059cbb60e01b84846040516024016110959291906119bf565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506112bd565b505050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b611245846323b872dd60e01b8585856040516024016111e393929190611988565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506112bd565b50505050565b600061125630611384565b15905090565b600060019054906101000a900460ff166112ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112a290611b20565b60405180910390fd5b6112b3611397565b6112bb6113e8565b565b600061131f826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166114499092919063ffffffff16565b905060008151111561137f578080602001905181019061133f9190611687565b61137e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161137590611b40565b60405180910390fd5b5b505050565b600080823b905060008111915050919050565b600060019054906101000a900460ff166113e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113dd90611b20565b60405180910390fd5b565b600060019054906101000a900460ff16611437576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161142e90611b20565b60405180910390fd5b611447611442610f12565b6110fc565b565b60606114588484600085611461565b90509392505050565b6060824710156114a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161149d90611a80565b60405180910390fd5b6114af85611384565b6114ee576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114e590611b00565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516115179190611956565b60006040518083038185875af1925050503d8060008114611554576040519150601f19603f3d011682016040523d82523d6000602084013e611559565b606091505b5091509150611569828286611575565b92505050949350505050565b60608315611585578290506115d5565b6000835111156115985782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115cc9190611a1e565b60405180910390fd5b9392505050565b6000813590506115eb816120e7565b92915050565b600081519050611600816120fe565b92915050565b60008135905061161581612115565b92915050565b60008135905061162a8161212c565b92915050565b60008135905061163f81612143565b92915050565b60008151905061165481612143565b92915050565b6000602082840312156116705761166f611e30565b5b600061167e848285016115dc565b91505092915050565b60006020828403121561169d5761169c611e30565b5b60006116ab848285016115f1565b91505092915050565b600080600080608085870312156116ce576116cd611e30565b5b60006116dc87828801611606565b94505060206116ed8782880161161b565b93505060406116fe87828801611630565b925050606061170f87828801611630565b91505092959194509250565b60006020828403121561173157611730611e30565b5b600061173f84828501611630565b91505092915050565b60006020828403121561175e5761175d611e30565b5b600061176c84828501611645565b91505092915050565b61177e81611ceb565b82525050565b600061178f82611ba4565b6117998185611bba565b93506117a9818560208601611d9f565b80840191505092915050565b6117be81611d57565b82525050565b6117cd81611d7b565b82525050565b60006117de82611baf565b6117e88185611bc5565b93506117f8818560208601611d9f565b61180181611e35565b840191505092915050565b6000611819602683611bc5565b915061182482611e46565b604082019050919050565b600061183c604983611bc5565b915061184782611e95565b606082019050919050565b600061185f602683611bc5565b915061186a82611f0a565b604082019050919050565b6000611882602e83611bc5565b915061188d82611f59565b604082019050919050565b60006118a5602083611bc5565b91506118b082611fa8565b602082019050919050565b60006118c8603183611bc5565b91506118d382611fd1565b604082019050919050565b60006118eb601d83611bc5565b91506118f682612020565b602082019050919050565b600061190e602b83611bc5565b915061191982612049565b604082019050919050565b6000611931602a83611bc5565b915061193c82612098565b604082019050919050565b61195081611d4d565b82525050565b60006119628284611784565b915081905092915050565b60006020820190506119826000830184611775565b92915050565b600060608201905061199d6000830186611775565b6119aa6020830185611775565b6119b76040830184611947565b949350505050565b60006040820190506119d46000830185611775565b6119e16020830184611947565b9392505050565b60006020820190506119fd60008301846117b5565b92915050565b6000602082019050611a1860008301846117c4565b92915050565b60006020820190508181036000830152611a3881846117d3565b905092915050565b60006020820190508181036000830152611a598161180c565b9050919050565b60006020820190508181036000830152611a798161182f565b9050919050565b60006020820190508181036000830152611a9981611852565b9050919050565b60006020820190508181036000830152611ab981611875565b9050919050565b60006020820190508181036000830152611ad981611898565b9050919050565b60006020820190508181036000830152611af9816118bb565b9050919050565b60006020820190508181036000830152611b19816118de565b9050919050565b60006020820190508181036000830152611b3981611901565b9050919050565b60006020820190508181036000830152611b5981611924565b9050919050565b6000602082019050611b756000830184611947565b92915050565b6000604082019050611b906000830185611947565b611b9d6020830184611947565b9392505050565b600081519050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b6000611be182611d4d565b9150611bec83611d4d565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611c2157611c20611dd2565b5b828201905092915050565b6000611c3782611d4d565b9150611c4283611d4d565b925082611c5257611c51611e01565b5b828204905092915050565b6000611c6882611d4d565b9150611c7383611d4d565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611cac57611cab611dd2565b5b828202905092915050565b6000611cc282611d4d565b9150611ccd83611d4d565b925082821015611ce057611cdf611dd2565b5b828203905092915050565b6000611cf682611d2d565b9050919050565b60008115159050919050565b6000611d1482611ceb565b9050919050565b6000611d2682611ceb565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000611d6282611d69565b9050919050565b6000611d7482611d2d565b9050919050565b6000611d8682611d8d565b9050919050565b6000611d9882611d2d565b9050919050565b60005b83811015611dbd578082015181840152602081019050611da2565b83811115611dcc576000848401525b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600080fd5b6000601f19601f8301169050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f526f636b65744a6f655374616b696e673a20724a4f45206d696e74696e67206e60008201527f6565647320746f207374617274206166746572207468652063757272656e742060208201527f74696d657374616d700000000000000000000000000000000000000000000000604082015250565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f526f636b65744a6f655374616b696e673a20776974686472617720616d6f756e60008201527f7420657863656564732062616c616e6365000000000000000000000000000000602082015250565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6120f081611ceb565b81146120fb57600080fd5b50565b61210781611cfd565b811461211257600080fd5b50565b61211e81611d09565b811461212957600080fd5b50565b61213581611d1b565b811461214057600080fd5b50565b61214c81611d4d565b811461215757600080fd5b5056fea26469706673582212207386a953c561afc99b930bb67bee485e5b46ef2ded7835554b2262499cc104fc64736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101005760003560e01c8063b6b55f2511610097578063e3161ddd11610066578063e3161ddd14610264578063eb990c591461026e578063f2fde38b1461028a578063f8077fae146102a657610100565b8063b6b55f2514610202578063b985a3a01461021e578063db2e21bc1461023c578063dcd9c58b1461024657610100565b80632e1a7d4d116100d35780632e1a7d4d146101a057806335ffb437146101bc578063715018a6146101da5780638da5cb5b146101e457610100565b80630ba84cd214610105578063145b0267146101215780631959a0021461013f57806320b4e81e14610170575b600080fd5b61011f600480360381019061011a919061171b565b6102c4565b005b6101296103a0565b6040516101369190611a03565b60405180910390f35b6101596004803603810190610154919061165a565b6103c6565b604051610167929190611b7b565b60405180910390f35b61018a6004803603810190610185919061165a565b6103ea565b6040516101979190611b60565b60405180910390f35b6101ba60048036038101906101b5919061171b565b61057e565b005b6101c461072b565b6040516101d19190611b60565b60405180910390f35b6101e2610731565b005b6101ec6107b9565b6040516101f9919061196d565b60405180910390f35b61021c6004803603810190610217919061171b565b6107e3565b005b610226610959565b60405161023391906119e8565b60405180910390f35b61024461097f565b005b61024e610a7e565b60405161025b9190611b60565b60405180910390f35b61026c610a84565b005b610288600480360381019061028391906116b4565b610c43565b005b6102a4600480360381019061029f919061165a565b610e14565b005b6102ae610f0c565b6040516102bb9190611b60565b60405180910390f35b6102cc610f12565b73ffffffffffffffffffffffffffffffffffffffff166102ea6107b9565b73ffffffffffffffffffffffffffffffffffffffff1614610340576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161033790611ac0565b60405180910390fd5b610348610a84565b80606a819055503373ffffffffffffffffffffffffffffffffffffffff167fe2492e003bbe8afa53088b406f0c1cb5d9e280370fc72a74cf116ffd343c4053826040516103959190611b60565b60405180910390a250565b606960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b606b6020528060005260406000206000915090508060000154908060010154905082565b600080606b60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161048b919061196d565b60206040518083038186803b1580156104a357600080fd5b505afa1580156104b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104db9190611748565b905060006067549050606654421180156104f6575060008214155b156105485760006066544261050b9190611cb7565b90506000606a548261051d9190611c5d565b9050836068548261052e9190611c5d565b6105389190611c2c565b836105439190611bd6565b925050505b82600101546068548285600001546105609190611c5d565b61056a9190611c2c565b6105749190611cb7565b9350505050919050565b6000606b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508181600001541015610608576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ff90611ae0565b60405180910390fd5b610610610a84565b60008160010154606854606754846000015461062c9190611c5d565b6106369190611c2c565b6106409190611cb7565b90508282600001546106529190611cb7565b8260000181905550606854606754836000015461066f9190611c5d565b6106799190611c2c565b826001018190555061068b3382610f1a565b6106d83384606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166110769092919063ffffffff16565b3373ffffffffffffffffffffffffffffffffffffffff167f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a94243648460405161071e9190611b60565b60405180910390a2505050565b606a5481565b610739610f12565b73ffffffffffffffffffffffffffffffffffffffff166107576107b9565b73ffffffffffffffffffffffffffffffffffffffff16146107ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107a490611ac0565b60405180910390fd5b6107b760006110fc565b565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000606b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905061082e610a84565b600081600001541115610879576000816001015460685460675484600001546108579190611c5d565b6108619190611c2c565b61086b9190611cb7565b90506108773382610f1a565b505b8181600001546108899190611bd6565b816000018190555060685460675482600001546108a69190611c5d565b6108b09190611c2c565b8160010181905550610907333084606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166111c2909392919063ffffffff16565b3373ffffffffffffffffffffffffffffffffffffffff167fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c8360405161094d9190611b60565b60405180910390a25050565b606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000606b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000816000015490506000826000018190555060008260010181905550610a2c3382606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166110769092919063ffffffff16565b3373ffffffffffffffffffffffffffffffffffffffff167f5fafa99d0643513820be26656b45130b01e1c03062e1266bf36f88cbd3bd969582604051610a729190611b60565b60405180910390a25050565b60675481565b6066544211610a9257610c41565b6000606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610aef919061196d565b60206040518083038186803b158015610b0757600080fd5b505afa158015610b1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b3f9190611748565b90506000811415610b57574260668190555050610c41565b600060665442610b679190611cb7565b90506000606a5482610b799190611c5d565b90508260685482610b8a9190611c5d565b610b949190611c2c565b606754610ba19190611bd6565b60678190555042606681905550606960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1930836040518363ffffffff1660e01b8152600401610c0b9291906119bf565b600060405180830381600087803b158015610c2557600080fd5b505af1158015610c39573d6000803e3d6000fd5b505050505050505b565b600060019054906101000a900460ff16610c6b5760008054906101000a900460ff1615610c74565b610c7361124b565b5b610cb3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610caa90611aa0565b60405180910390fd5b60008060019054906101000a900460ff161590508015610d03576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b610d0b61125c565b428211610d4d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d4490611a60565b60405180910390fd5b670de0b6b3a764000060688190555084606560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083606960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082606a81905550816066819055508015610e0d5760008060016101000a81548160ff0219169083151502179055505b5050505050565b610e1c610f12565b73ffffffffffffffffffffffffffffffffffffffff16610e3a6107b9565b73ffffffffffffffffffffffffffffffffffffffff1614610e90576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e8790611ac0565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610f00576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ef790611a40565b60405180910390fd5b610f09816110fc565b50565b60665481565b600033905090565b6000606960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610f77919061196d565b60206040518083038186803b158015610f8f57600080fd5b505afa158015610fa3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fc79190611748565b9050808211156110235761101e8382606960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166110769092919063ffffffff16565b611071565b6110708383606960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166110769092919063ffffffff16565b5b505050565b6110f78363a9059cbb60e01b84846040516024016110959291906119bf565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506112bd565b505050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b611245846323b872dd60e01b8585856040516024016111e393929190611988565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506112bd565b50505050565b600061125630611384565b15905090565b600060019054906101000a900460ff166112ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112a290611b20565b60405180910390fd5b6112b3611397565b6112bb6113e8565b565b600061131f826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166114499092919063ffffffff16565b905060008151111561137f578080602001905181019061133f9190611687565b61137e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161137590611b40565b60405180910390fd5b5b505050565b600080823b905060008111915050919050565b600060019054906101000a900460ff166113e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113dd90611b20565b60405180910390fd5b565b600060019054906101000a900460ff16611437576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161142e90611b20565b60405180910390fd5b611447611442610f12565b6110fc565b565b60606114588484600085611461565b90509392505050565b6060824710156114a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161149d90611a80565b60405180910390fd5b6114af85611384565b6114ee576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114e590611b00565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516115179190611956565b60006040518083038185875af1925050503d8060008114611554576040519150601f19603f3d011682016040523d82523d6000602084013e611559565b606091505b5091509150611569828286611575565b92505050949350505050565b60608315611585578290506115d5565b6000835111156115985782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115cc9190611a1e565b60405180910390fd5b9392505050565b6000813590506115eb816120e7565b92915050565b600081519050611600816120fe565b92915050565b60008135905061161581612115565b92915050565b60008135905061162a8161212c565b92915050565b60008135905061163f81612143565b92915050565b60008151905061165481612143565b92915050565b6000602082840312156116705761166f611e30565b5b600061167e848285016115dc565b91505092915050565b60006020828403121561169d5761169c611e30565b5b60006116ab848285016115f1565b91505092915050565b600080600080608085870312156116ce576116cd611e30565b5b60006116dc87828801611606565b94505060206116ed8782880161161b565b93505060406116fe87828801611630565b925050606061170f87828801611630565b91505092959194509250565b60006020828403121561173157611730611e30565b5b600061173f84828501611630565b91505092915050565b60006020828403121561175e5761175d611e30565b5b600061176c84828501611645565b91505092915050565b61177e81611ceb565b82525050565b600061178f82611ba4565b6117998185611bba565b93506117a9818560208601611d9f565b80840191505092915050565b6117be81611d57565b82525050565b6117cd81611d7b565b82525050565b60006117de82611baf565b6117e88185611bc5565b93506117f8818560208601611d9f565b61180181611e35565b840191505092915050565b6000611819602683611bc5565b915061182482611e46565b604082019050919050565b600061183c604983611bc5565b915061184782611e95565b606082019050919050565b600061185f602683611bc5565b915061186a82611f0a565b604082019050919050565b6000611882602e83611bc5565b915061188d82611f59565b604082019050919050565b60006118a5602083611bc5565b91506118b082611fa8565b602082019050919050565b60006118c8603183611bc5565b91506118d382611fd1565b604082019050919050565b60006118eb601d83611bc5565b91506118f682612020565b602082019050919050565b600061190e602b83611bc5565b915061191982612049565b604082019050919050565b6000611931602a83611bc5565b915061193c82612098565b604082019050919050565b61195081611d4d565b82525050565b60006119628284611784565b915081905092915050565b60006020820190506119826000830184611775565b92915050565b600060608201905061199d6000830186611775565b6119aa6020830185611775565b6119b76040830184611947565b949350505050565b60006040820190506119d46000830185611775565b6119e16020830184611947565b9392505050565b60006020820190506119fd60008301846117b5565b92915050565b6000602082019050611a1860008301846117c4565b92915050565b60006020820190508181036000830152611a3881846117d3565b905092915050565b60006020820190508181036000830152611a598161180c565b9050919050565b60006020820190508181036000830152611a798161182f565b9050919050565b60006020820190508181036000830152611a9981611852565b9050919050565b60006020820190508181036000830152611ab981611875565b9050919050565b60006020820190508181036000830152611ad981611898565b9050919050565b60006020820190508181036000830152611af9816118bb565b9050919050565b60006020820190508181036000830152611b19816118de565b9050919050565b60006020820190508181036000830152611b3981611901565b9050919050565b60006020820190508181036000830152611b5981611924565b9050919050565b6000602082019050611b756000830184611947565b92915050565b6000604082019050611b906000830185611947565b611b9d6020830184611947565b9392505050565b600081519050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b6000611be182611d4d565b9150611bec83611d4d565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611c2157611c20611dd2565b5b828201905092915050565b6000611c3782611d4d565b9150611c4283611d4d565b925082611c5257611c51611e01565b5b828204905092915050565b6000611c6882611d4d565b9150611c7383611d4d565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611cac57611cab611dd2565b5b828202905092915050565b6000611cc282611d4d565b9150611ccd83611d4d565b925082821015611ce057611cdf611dd2565b5b828203905092915050565b6000611cf682611d2d565b9050919050565b60008115159050919050565b6000611d1482611ceb565b9050919050565b6000611d2682611ceb565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000611d6282611d69565b9050919050565b6000611d7482611d2d565b9050919050565b6000611d8682611d8d565b9050919050565b6000611d9882611d2d565b9050919050565b60005b83811015611dbd578082015181840152602081019050611da2565b83811115611dcc576000848401525b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600080fd5b6000601f19601f8301169050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f526f636b65744a6f655374616b696e673a20724a4f45206d696e74696e67206e60008201527f6565647320746f207374617274206166746572207468652063757272656e742060208201527f74696d657374616d700000000000000000000000000000000000000000000000604082015250565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f526f636b65744a6f655374616b696e673a20776974686472617720616d6f756e60008201527f7420657863656564732062616c616e6365000000000000000000000000000000602082015250565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6120f081611ceb565b81146120fb57600080fd5b50565b61210781611cfd565b811461211257600080fd5b50565b61211e81611d09565b811461212957600080fd5b50565b61213581611d1b565b811461214057600080fd5b50565b61214c81611d4d565b811461215757600080fd5b5056fea26469706673582212207386a953c561afc99b930bb67bee485e5b46ef2ded7835554b2262499cc104fc64736f6c63430008060033",
  "devdoc": {
    "author": "Trader Joe",
    "kind": "dev",
    "methods": {
      "deposit(uint256)": {
        "params": {
          "_amount": "Amount of JOE to deposit"
        }
      },
      "initialize(address,address,uint256,uint256)": {
        "params": {
          "_joe": "Address of the JOE token contract",
          "_rJoe": "Address of the rJOE token contract",
          "_rJoePerSec": "Number of rJOE tokens created per second",
          "_startTime": "Timestamp at which rJOE rewards starts"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pendingRJoe(address)": {
        "params": {
          "_user": "The user to lookup"
        },
        "returns": {
          "_0": "The number of pending rJOE tokens for `_user`"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateEmissionRate(uint256)": {
        "params": {
          "_rJoePerSec": "The new value for rJoePerSec"
        }
      },
      "withdraw(uint256)": {
        "params": {
          "_amount": "Amount of JOE to withdraw"
        }
      }
    },
    "stateVariables": {
      "accRJoePerShare": {
        "details": "Accumulated rJOE per share, times PRECISION. See above"
      },
      "userInfo": {
        "details": "Info of each user that stakes LP tokens"
      }
    },
    "title": "Rocket Joe Staking",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "deposit(uint256)": {
        "notice": "Deposit joe to RocketJoeStaking for rJoe allocation"
      },
      "emergencyWithdraw()": {
        "notice": "Withdraw without caring about rewards. EMERGENCY ONLY"
      },
      "initialize(address,address,uint256,uint256)": {
        "notice": "Initialize with needed parameters"
      },
      "pendingRJoe(address)": {
        "notice": "Get pending rJoe for a given `_user`"
      },
      "updateEmissionRate(uint256)": {
        "notice": "Update emission rate"
      },
      "updatePool()": {
        "notice": "Update reward variables of the given pool with latest data"
      },
      "withdraw(uint256)": {
        "notice": "Withdraw JOE and accumulated rJOE from RocketJoeStaking"
      }
    },
    "notice": "Stake JOE to earn rJOE",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 132,
        "contract": "contracts/RocketJoeStaking.sol:RocketJoeStaking",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 135,
        "contract": "contracts/RocketJoeStaking.sol:RocketJoeStaking",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 789,
        "contract": "contracts/RocketJoeStaking.sol:RocketJoeStaking",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/RocketJoeStaking.sol:RocketJoeStaking",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 124,
        "contract": "contracts/RocketJoeStaking.sol:RocketJoeStaking",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 4628,
        "contract": "contracts/RocketJoeStaking.sol:RocketJoeStaking",
        "label": "joe",
        "offset": 0,
        "slot": "101",
        "type": "t_contract(IERC20Upgradeable)277"
      },
      {
        "astId": 4630,
        "contract": "contracts/RocketJoeStaking.sol:RocketJoeStaking",
        "label": "lastRewardTimestamp",
        "offset": 0,
        "slot": "102",
        "type": "t_uint256"
      },
      {
        "astId": 4633,
        "contract": "contracts/RocketJoeStaking.sol:RocketJoeStaking",
        "label": "accRJoePerShare",
        "offset": 0,
        "slot": "103",
        "type": "t_uint256"
      },
      {
        "astId": 4636,
        "contract": "contracts/RocketJoeStaking.sol:RocketJoeStaking",
        "label": "PRECISION",
        "offset": 0,
        "slot": "104",
        "type": "t_uint256"
      },
      {
        "astId": 4639,
        "contract": "contracts/RocketJoeStaking.sol:RocketJoeStaking",
        "label": "rJoe",
        "offset": 0,
        "slot": "105",
        "type": "t_contract(RocketJoeToken)5261"
      },
      {
        "astId": 4641,
        "contract": "contracts/RocketJoeStaking.sol:RocketJoeStaking",
        "label": "rJoePerSec",
        "offset": 0,
        "slot": "106",
        "type": "t_uint256"
      },
      {
        "astId": 4647,
        "contract": "contracts/RocketJoeStaking.sol:RocketJoeStaking",
        "label": "userInfo",
        "offset": 0,
        "slot": "107",
        "type": "t_mapping(t_address,t_struct(UserInfo)4625_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20Upgradeable)277": {
        "encoding": "inplace",
        "label": "contract IERC20Upgradeable",
        "numberOfBytes": "20"
      },
      "t_contract(RocketJoeToken)5261": {
        "encoding": "inplace",
        "label": "contract RocketJoeToken",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(UserInfo)4625_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct RocketJoeStaking.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)4625_storage"
      },
      "t_struct(UserInfo)4625_storage": {
        "encoding": "inplace",
        "label": "struct RocketJoeStaking.UserInfo",
        "members": [
          {
            "astId": 4622,
            "contract": "contracts/RocketJoeStaking.sol:RocketJoeStaking",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4624,
            "contract": "contracts/RocketJoeStaking.sol:RocketJoeStaking",
            "label": "rewardDebt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}