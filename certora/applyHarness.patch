diff -ruN .gitignore .gitignore
--- .gitignore	1969-12-31 16:00:00.000000000 -0800
+++ .gitignore	2022-03-11 13:33:36.000000000 -0800
@@ -0,0 +1,2 @@
+*
+!.gitignore
diff -ruN LaunchEvent.sol LaunchEvent.sol
--- LaunchEvent.sol	2022-03-11 13:14:28.000000000 -0800
+++ LaunchEvent.sol	2022-03-11 13:33:36.000000000 -0800
@@ -48,7 +48,7 @@
     address public issuer;
 
     /// @notice The start time of phase 1
-    uint256 public auctionStart;
+    uint256 public auctionStart;                
 
     uint256 public phaseOneDuration;
     uint256 public phaseOneNoFeeDuration;
@@ -80,11 +80,11 @@
 
     IRocketJoeToken public rJoe;
     uint256 public rJoePerAvax;
-    IWAVAX private WAVAX;
+    IWAVAX public WAVAX;                       // HARNESS: private -> public
     IERC20MetadataUpgradeable public token;
 
     IJoeRouter02 private router;
-    IJoeFactory private factory;
+    IJoeFactory public factory;                // HARNESS: private -> public
     IRocketJoeFactory public rocketJoeFactory;
 
     bool public stopped;
@@ -104,29 +104,29 @@
     uint256 public tokenAllocated;
 
     /// @dev The exact supply of LP minted when creating the initial liquidity pair.
-    uint256 private lpSupply;
+    uint256 public lpSupply;                    // HARNESS: private -> public
 
     /// @dev Used to know how many issuing tokens will be sent to JoeRouter to create the initial
     /// liquidity pair. If floor price is not met, we will send fewer issuing tokens and `tokenReserve`
     /// will keep track of the leftover amount. It's then used to calculate the number of tokens needed
     /// to be sent to both issuer and users (if there are leftovers and every token is sent to the pair,
     /// tokenReserve will be equal to 0)
-    uint256 private tokenReserve;
+    uint256 public tokenReserve;                // HARNESS: private -> public
 
     /// @dev Keeps track of amount of token incentives that needs to be kept by contract in order to send the right
     /// amounts to issuer and users
-    uint256 private tokenIncentivesBalance;
+    uint256 public tokenIncentivesBalance;      // HARNESS: private -> public
     /// @dev Total incentives for users for locking their LPs for an additional period of time after the pair is created
-    uint256 private tokenIncentivesForUsers;
+    uint256 public tokenIncentivesForUsers;     // HARNESS: private -> public
     /// @dev The share refunded to the issuer. Users receive 5% of the token that were sent to the Router.
     /// If the floor price is not met, the incentives still needs to be 5% of the value sent to the Router, so there
     /// will be an excess of tokens returned to the issuer if he calls `withdrawIncentives()`
-    uint256 private tokenIncentiveIssuerRefund;
+    uint256 public tokenIncentiveIssuerRefund;  // HARNESS: private -> public
 
     /// @dev avaxReserve is the exact amount of AVAX that needs to be kept inside the contract in order to send everyone's
     /// AVAX. If there is some excess (because someone sent token directly to the contract), the
     /// penaltyCollector can collect the excess using `skim()`
-    uint256 private avaxReserve;
+    uint256 public avaxReserve;                 // HARNESS: private -> public
 
     event LaunchEventInitialized(
         uint256 tokenIncentivesPercent,
@@ -225,7 +225,7 @@
         uint256 _maxAllocation,
         uint256 _userTimelock,
         uint256 _issuerTimelock
-    ) external atPhase(Phase.NotStarted) {
+    ) public atPhase(Phase.NotStarted) {      // HARNESS: external -> public
         require(auctionStart == 0, "LaunchEvent: already initialized");
         rocketJoeFactory = IRocketJoeFactory(msg.sender);
         require(
@@ -620,7 +620,7 @@
     /// @notice The total amount of liquidity pool tokens the user can withdraw
     /// @param _user The address of the user to check
     /// @return The user's balance of liquidity pool token
-    function pairBalance(address _user) public view returns (uint256) {
+    function pairBalance(address _user) public virtual returns (uint256) {     // HARNESS: made it virtual and non-view to override
         UserInfo memory user = getUserInfo[_user];
         if (avaxAllocated == 0 || user.hasWithdrawnPair) {
             return 0;
@@ -633,7 +633,7 @@
 
     /// @dev Bytecode size optimization for the `atPhase` modifier
     /// This works becuase internal functions are not in-lined in modifiers
-    function _atPhase(Phase _phase) internal view {
+    function _atPhase(Phase _phase) public view {
         require(currentPhase() == _phase, "LaunchEvent: wrong phase");
     }
 
@@ -670,7 +670,7 @@
     /// @param _to The receiving address
     /// @param _value The amount of AVAX to send
     /// @dev Will revert on failure
-    function _safeTransferAVAX(address _to, uint256 _value) internal {
+    function _safeTransferAVAX(address _to, uint256 _value) virtual internal {
         require(
             address(this).balance - _value >= avaxReserve,
             "LaunchEvent: not enough avax"
diff -ruN RocketJoeStaking.sol RocketJoeStaking.sol
--- RocketJoeStaking.sol	2022-03-11 13:14:28.000000000 -0800
+++ RocketJoeStaking.sol	2022-03-11 13:36:12.000000000 -0800
@@ -36,7 +36,7 @@
     /// @dev Accumulated rJOE per share, times PRECISION. See above
     uint256 public accRJoePerShare;
     /// @notice Precision of accRJoePerShare
-    uint256 private PRECISION;
+    uint256 public PRECISION;
 
     /// @dev The maximum emission rate per second
     uint256 public MAX_EMISSION_RATE;
@@ -65,7 +65,7 @@
         RocketJoeToken _rJoe,
         uint256 _rJoePerSec,
         uint256 _startTime
-    ) external initializer {
+    ) public initializer {
         __Ownable_init();
 
         require(
diff -ruN traderjoe/FarmLens.sol traderjoe/FarmLens.sol
--- traderjoe/FarmLens.sol	1969-12-31 16:00:00.000000000 -0800
+++ traderjoe/FarmLens.sol	2022-03-11 13:33:36.000000000 -0800
@@ -0,0 +1,244 @@
+// SPDX-License-Identifier: MIT
+pragma solidity 0.6.12;
+pragma experimental ABIEncoderV2;
+import "../libraries/SafeMath.sol";
+import "../libraries/SafeERC20.sol";
+
+import "../interfaces/IERC20.sol";
+import "./interfaces/IJoeERC20.sol";
+import "./interfaces/IJoePair.sol";
+import "./interfaces/IJoeFactory.sol";
+
+import "../boringcrypto/BoringOwnable.sol";
+
+interface IMasterChef {
+    struct PoolInfo {
+        IJoeERC20 lpToken; // Address of LP token contract.
+        uint256 allocPoint; // How many allocation points assigned to this pool. JOE to distribute per block.
+        uint256 lastRewardTimestamp; // Last block number that JOE distribution occurs.
+        uint256 accJoePerShare; // Accumulated JOE per share, times 1e12. See below.
+    }
+
+    function poolLength() external view returns (uint256);
+
+    function poolInfo(uint256 pid) external view returns (IMasterChef.PoolInfo memory);
+
+    function totalAllocPoint() external view returns (uint256);
+
+    function joePerSec() external view returns (uint256);
+}
+
+contract FarmLens is BoringOwnable {
+    using SafeMath for uint256;
+
+    address public joe; // 0x6e84a6216eA6dACC71eE8E6b0a5B7322EEbC0fDd;
+    address public wavax; // 0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7;
+    address public wavaxUsdt; // 0xeD8CBD9F0cE3C6986b22002F03c6475CEb7a6256
+    address public wavaxUsdc; // 0x87Dee1cC9FFd464B79e058ba20387c1984aed86a
+    address public wavaxDai; // 0xA389f9430876455C36478DeEa9769B7Ca4E3DDB1
+    IJoeFactory public joeFactory; // IJoeFactory(0x9Ad6C38BE94206cA50bb0d90783181662f0Cfa10);
+    IMasterChef public chefv2; //0xd6a4F121CA35509aF06A0Be99093d08462f53052
+    IMasterChef public chefv3; //0x188bED1968b795d5c9022F6a0bb5931Ac4c18F00
+
+    constructor(
+        address joe_,
+        address wavax_,
+        address wavaxUsdt_,
+        address wavaxUsdc_,
+        address wavaxDai_,
+        IJoeFactory joeFactory_,
+        IMasterChef chefv2_,
+        IMasterChef chefv3_
+    ) public {
+        joe = joe_;
+        wavax = wavax_;
+        wavaxUsdt = wavaxUsdt_;
+        wavaxUsdc = wavaxUsdc_;
+        wavaxDai = wavaxDai_;
+        joeFactory = IJoeFactory(joeFactory_);
+        chefv2 = chefv2_;
+        chefv3 = chefv3_;
+    }
+
+    /// @notice Returns price of avax in usd.
+    function getAvaxPrice() public view returns (uint256) {
+        uint256 priceFromWavaxUsdt = _getAvaxPrice(IJoePair(wavaxUsdt)); // 18
+        uint256 priceFromWavaxUsdc = _getAvaxPrice(IJoePair(wavaxUsdc)); // 18
+        uint256 priceFromWavaxDai = _getAvaxPrice(IJoePair(wavaxDai)); // 18
+
+        uint256 sumPrice = priceFromWavaxUsdt.add(priceFromWavaxUsdc).add(priceFromWavaxDai); // 18
+        uint256 avaxPrice = sumPrice / 3; // 18
+        return avaxPrice; // 18
+    }
+
+    /// @notice Returns value of wavax in units of stablecoins per wavax.
+    /// @param pair A wavax-stablecoin pair.
+    function _getAvaxPrice(IJoePair pair) private view returns (uint256) {
+        (uint256 reserve0, uint256 reserve1, ) = pair.getReserves();
+
+        if (pair.token0() == wavax) {
+            reserve1 = reserve1.mul(_tokenDecimalsMultiplier(pair.token1())); // 18
+            return (reserve1.mul(1e18)) / reserve0; // 18
+        } else {
+            reserve0 = reserve0.mul(_tokenDecimalsMultiplier(pair.token0())); // 18
+            return (reserve0.mul(1e18)) / reserve1; // 18
+        }
+    }
+
+    /// @notice Get the price of a token in Usd.
+    /// @param tokenAddress Address of the token.
+    function getPriceInUsd(address tokenAddress) public view returns (uint256) {
+        return (getAvaxPrice().mul(getPriceInAvax(tokenAddress))) / 1e18; // 18
+    }
+
+    /// @notice Get the price of a token in Avax.
+    /// @param tokenAddress Address of the token.
+    /// @dev Need to be aware of decimals here, not always 18, it depends on the token.
+    function getPriceInAvax(address tokenAddress) public view returns (uint256) {
+        if (tokenAddress == wavax) {
+            return 1e18;
+        }
+
+        IJoePair pair = IJoePair(joeFactory.getPair(tokenAddress, wavax));
+
+        (uint256 reserve0, uint256 reserve1, ) = pair.getReserves();
+        address token0Address = pair.token0();
+        address token1Address = pair.token1();
+
+        if (token0Address == wavax) {
+            reserve1 = reserve1.mul(_tokenDecimalsMultiplier(token1Address)); // 18
+            return (reserve0.mul(1e18)) / reserve1; // 18
+        } else {
+            reserve0 = reserve0.mul(_tokenDecimalsMultiplier(token0Address)); // 18
+            return (reserve1.mul(1e18)) / reserve0; // 18
+        }
+    }
+
+    /// @notice Calculates the multiplier needed to scale a token's numerical field to 18 decimals.
+    /// @param tokenAddress Address of the token.
+    function _tokenDecimalsMultiplier(address tokenAddress) private pure returns (uint256) {
+        uint256 decimalsNeeded = 18 - IJoeERC20(tokenAddress).decimals();
+        return 1 * (10**decimalsNeeded);
+    }
+
+    /// @notice Calculates the reserve of a pair in usd.
+    /// @param pair Pair for which the reserve will be calculated.
+    function getReserveUsd(IJoePair pair) public view returns (uint256) {
+        address token0Address = pair.token0();
+        address token1Address = pair.token1();
+
+        (uint256 reserve0, uint256 reserve1, ) = pair.getReserves();
+
+        reserve0 = reserve0.mul(_tokenDecimalsMultiplier(token0Address)); // 18
+        reserve1 = reserve1.mul(_tokenDecimalsMultiplier(token1Address)); // 18
+
+        uint256 token0PriceInAvax = getPriceInAvax(token0Address); // 18
+        uint256 token1PriceInAvax = getPriceInAvax(token1Address); // 18
+        uint256 reserve0Avax = reserve0.mul(token0PriceInAvax); // 36;
+        uint256 reserve1Avax = reserve1.mul(token1PriceInAvax); // 36;
+        uint256 reserveAvax = (reserve0Avax.add(reserve1Avax)) / 1e18; // 18
+        uint256 reserveUsd = (reserveAvax.mul(getAvaxPrice())) / 1e18; // 18
+
+        return reserveUsd; // 18
+    }
+
+    struct FarmPair {
+        uint256 id;
+        uint256 allocPoint;
+        address lpAddress;
+        address token0Address;
+        address token1Address;
+        string token0Symbol;
+        string token1Symbol;
+        uint256 reserveUsd;
+        uint256 totalSupplyScaled;
+        address chefAddress;
+        uint256 chefBalanceScaled;
+        uint256 chefTotalAlloc;
+        uint256 chefJoePerSec;
+    }
+
+    /// @notice Gets the farm pair data for a given MasterChef.
+    /// @param chefAddress The address of the MasterChef.
+    /// @param whitelistedPids Array of all ids of pools that are whitelisted and valid to have their farm data returned.
+    function getFarmPairs(address chefAddress, uint256[] calldata whitelistedPids)
+        public
+        view
+        returns (FarmPair[] memory)
+    {
+        IMasterChef chef = IMasterChef(chefAddress);
+
+        uint256 whitelistLength = whitelistedPids.length;
+        FarmPair[] memory farmPairs = new FarmPair[](whitelistLength);
+
+        for (uint256 i = 0; i < whitelistLength; i++) {
+            IMasterChef.PoolInfo memory pool = chef.poolInfo(whitelistedPids[i]);
+            IJoePair lpToken = IJoePair(address(pool.lpToken));
+
+            //get pool information
+            farmPairs[i].id = whitelistedPids[i];
+            farmPairs[i].allocPoint = pool.allocPoint;
+
+            // get pair information
+            address lpAddress = address(lpToken);
+            address token0Address = lpToken.token0();
+            address token1Address = lpToken.token1();
+            farmPairs[i].lpAddress = lpAddress;
+            farmPairs[i].token0Address = token0Address;
+            farmPairs[i].token1Address = token1Address;
+            farmPairs[i].token0Symbol = IJoeERC20(token0Address).symbol();
+            farmPairs[i].token1Symbol = IJoeERC20(token1Address).symbol();
+
+            // calculate reserveUsd of lp
+            farmPairs[i].reserveUsd = getReserveUsd(lpToken); // 18
+
+            // calculate total supply of lp
+            farmPairs[i].totalSupplyScaled = lpToken.totalSupply().mul(_tokenDecimalsMultiplier(lpAddress));
+
+            // get masterChef data
+            uint256 balance = lpToken.balanceOf(chefAddress);
+            farmPairs[i].chefBalanceScaled = balance.mul(_tokenDecimalsMultiplier(lpAddress));
+            farmPairs[i].chefAddress = chefAddress;
+            farmPairs[i].chefTotalAlloc = chef.totalAllocPoint();
+            farmPairs[i].chefJoePerSec = chef.joePerSec();
+        }
+
+        return farmPairs;
+    }
+
+    struct AllFarmData {
+        uint256 avaxPriceUsd;
+        uint256 joePriceUsd;
+        uint256 totalAllocChefV2;
+        uint256 totalAllocChefV3;
+        uint256 joePerSecChefV2;
+        uint256 joePerSecChefV3;
+        FarmPair[] farmPairsV2;
+        FarmPair[] farmPairsV3;
+    }
+
+    /// @notice Get all data needed for useFarms hook.
+    /// @param whitelistedPidsV2 Array of all ids of pools that are whitelisted in chefV2.
+    /// @param whitelistedPidsV3 Array of all ids of pools that are whitelisted in chefV3.
+    function getAllFarmData(uint256[] calldata whitelistedPidsV2, uint256[] calldata whitelistedPidsV3)
+        public
+        view
+        returns (AllFarmData memory)
+    {
+        AllFarmData memory allFarmData;
+
+        allFarmData.avaxPriceUsd = getAvaxPrice();
+        allFarmData.joePriceUsd = getPriceInUsd(joe);
+
+        allFarmData.totalAllocChefV2 = IMasterChef(chefv2).totalAllocPoint();
+        allFarmData.joePerSecChefV2 = IMasterChef(chefv2).joePerSec();
+
+        allFarmData.totalAllocChefV3 = IMasterChef(chefv3).totalAllocPoint();
+        allFarmData.joePerSecChefV3 = IMasterChef(chefv3).joePerSec();
+
+        allFarmData.farmPairsV2 = getFarmPairs(address(chefv2), whitelistedPidsV2);
+        allFarmData.farmPairsV3 = getFarmPairs(address(chefv3), whitelistedPidsV3);
+
+        return allFarmData;
+    }
+}
diff -ruN traderjoe/JoeERC20.sol traderjoe/JoeERC20.sol
--- traderjoe/JoeERC20.sol	1969-12-31 16:00:00.000000000 -0800
+++ traderjoe/JoeERC20.sol	2022-03-11 13:33:36.000000000 -0800
@@ -0,0 +1,115 @@
+// SPDX-License-Identifier: GPL-3.0
+
+pragma solidity =0.6.12;
+
+import "./libraries/SafeMath.sol";
+
+contract JoeERC20 {
+    using SafeMathJoe for uint256;
+
+    string public constant name = "Joe LP Token";
+    string public constant symbol = "JLP";
+    uint8 public constant decimals = 18;
+    uint256 public totalSupply;
+    mapping(address => uint256) public balanceOf;
+    mapping(address => mapping(address => uint256)) public allowance;
+
+    bytes32 public DOMAIN_SEPARATOR;
+    // keccak256("Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)");
+    bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;
+    mapping(address => uint256) public nonces;
+
+    event Approval(address indexed owner, address indexed spender, uint256 value);
+    event Transfer(address indexed from, address indexed to, uint256 value);
+
+    constructor() public {
+        uint256 chainId;
+        assembly {
+            chainId := chainid()
+        }
+        DOMAIN_SEPARATOR = keccak256(
+            abi.encode(
+                keccak256("EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)"),
+                keccak256(bytes(name)),
+                keccak256(bytes("1")),
+                chainId,
+                address(this)
+            )
+        );
+    }
+
+    function _mint(address to, uint256 value) internal {
+        totalSupply = totalSupply.add(value);
+        balanceOf[to] = balanceOf[to].add(value);
+        emit Transfer(address(0), to, value);
+    }
+
+    function _burn(address from, uint256 value) internal {
+        balanceOf[from] = balanceOf[from].sub(value);
+        totalSupply = totalSupply.sub(value);
+        emit Transfer(from, address(0), value);
+    }
+
+    function _approve(
+        address owner,
+        address spender,
+        uint256 value
+    ) private {
+        allowance[owner][spender] = value;
+        emit Approval(owner, spender, value);
+    }
+
+    function _transfer(
+        address from,
+        address to,
+        uint256 value
+    ) private {
+        balanceOf[from] = balanceOf[from].sub(value);
+        balanceOf[to] = balanceOf[to].add(value);
+        emit Transfer(from, to, value);
+    }
+
+    function approve(address spender, uint256 value) external returns (bool) {
+        _approve(msg.sender, spender, value);
+        return true;
+    }
+
+    function transfer(address to, uint256 value) external returns (bool) {
+        _transfer(msg.sender, to, value);
+        return true;
+    }
+
+    function transferFrom(
+        address from,
+        address to,
+        uint256 value
+    ) external returns (bool) {
+        if (allowance[from][msg.sender] != uint256(-1)) {
+            allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);
+        }
+        _transfer(from, to, value);
+        return true;
+    }
+
+    function permit(
+        address owner,
+        address spender,
+        uint256 value,
+        uint256 deadline,
+        uint8 v,
+        bytes32 r,
+        bytes32 s
+    ) external {
+        require(deadline >= block.timestamp, "Joe: EXPIRED");
+        bytes32 digest = keccak256(
+            abi.encodePacked(
+                "\x19\x01",
+                DOMAIN_SEPARATOR,
+                keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))
+            )
+        );
+        address recoveredAddress = ecrecover(digest, v, r, s);
+        require(recoveredAddress != address(0) && recoveredAddress == owner, "Joe: INVALID_SIGNATURE");
+        _approve(owner, spender, value);
+    }
+}
diff -ruN traderjoe/JoeFactory.sol traderjoe/JoeFactory.sol
--- traderjoe/JoeFactory.sol	1969-12-31 16:00:00.000000000 -0800
+++ traderjoe/JoeFactory.sol	2022-03-11 13:33:36.000000000 -0800
@@ -0,0 +1,67 @@
+// SPDX-License-Identifier: GPL-3.0
+
+pragma solidity =0.6.12;
+
+import "./interfaces/IJoeFactory.sol";
+import "./JoePair.sol";
+
+contract JoeFactory is IJoeFactory {
+    address public override feeTo;
+    address public override feeToSetter;
+    address public override migrator;
+
+    mapping(address => mapping(address => address)) public override getPair;
+    address[] public override allPairs;
+
+    event PairCreated(address indexed token0, address indexed token1, address pair, uint256);
+
+    constructor(address _feeToSetter) public {
+        feeToSetter = _feeToSetter;
+    }
+
+    function allPairsLength() external view override returns (uint256) {
+        return allPairs.length;
+    }
+
+    function pairCodeHash() external pure returns (bytes32) {
+        return keccak256(type(JoePair).creationCode);
+    }
+
+    function createPair(address tokenA, address tokenB) external override returns (address pair) {
+        require(tokenA != tokenB, "Joe: IDENTICAL_ADDRESSES");
+        (address token0, address token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);
+        require(token0 != address(0), "Joe: ZERO_ADDRESS");
+        require(getPair[token0][token1] == address(0), "Joe: PAIR_EXISTS"); // single check is sufficient
+        bytes memory bytecode = type(JoePair).creationCode;
+        bytes32 salt = keccak256(abi.encodePacked(token0, token1));
+        // assembly {                                                           // HARNESS
+        //     pair := create2(0, add(bytecode, 32), mload(bytecode), salt)     // HARNESS
+        // }                                                                    // HARNESS
+        pair = newPair();                                                     // HARNESS
+        JoePair(pair).initialize(token0, token1);
+        getPair[token0][token1] = pair;
+        getPair[token1][token0] = pair; // populate mapping in the reverse direction
+        allPairs.push(pair);
+        emit PairCreated(token0, token1, pair, allPairs.length);
+    }
+
+    address pairHarness;                                    // HARNESS      
+    function newPair() public returns (address){            // HARNESS
+        return pairHarness;                                 // HARNESS
+    }   
+
+    function setFeeTo(address _feeTo) external override {
+        require(msg.sender == feeToSetter, "Joe: FORBIDDEN");
+        feeTo = _feeTo;
+    }
+
+    function setMigrator(address _migrator) external override {
+        require(msg.sender == feeToSetter, "Joe: FORBIDDEN");
+        migrator = _migrator;
+    }
+
+    function setFeeToSetter(address _feeToSetter) external override {
+        require(msg.sender == feeToSetter, "Joe: FORBIDDEN");
+        feeToSetter = _feeToSetter;
+    }
+}
diff -ruN traderjoe/JoePair.sol traderjoe/JoePair.sol
--- traderjoe/JoePair.sol	1969-12-31 16:00:00.000000000 -0800
+++ traderjoe/JoePair.sol	2022-03-11 13:33:36.000000000 -0800
@@ -0,0 +1,243 @@
+// SPDX-License-Identifier: GPL-3.0
+
+pragma solidity =0.6.12;
+
+import "./JoeERC20.sol";
+import "./libraries/Math.sol";
+import "./libraries/UQ112x112.sol";
+import "./interfaces/IERC20.sol";
+import "./interfaces/IJoeFactory.sol";
+import "./interfaces/IJoeCallee.sol";
+
+interface IMigrator {
+    // Return the desired amount of liquidity token that the migrator wants.
+    function desiredLiquidity() external view returns (uint256);
+}
+
+contract JoePair is JoeERC20 {
+    using SafeMathJoe for uint256;
+    using UQ112x112 for uint224;
+
+    uint256 public constant MINIMUM_LIQUIDITY = 10**3;
+    bytes4 private constant SELECTOR = bytes4(keccak256(bytes("transfer(address,uint256)")));
+
+    address public factory;
+    address public token0;
+    address public token1;
+
+    uint112 private reserve0; // uses single storage slot, accessible via getReserves
+    uint112 private reserve1; // uses single storage slot, accessible via getReserves
+    uint32 private blockTimestampLast; // uses single storage slot, accessible via getReserves
+
+    uint256 public price0CumulativeLast;
+    uint256 public price1CumulativeLast;
+    uint256 public kLast; // reserve0 * reserve1, as of immediately after the most recent liquidity event
+
+    uint256 private unlocked = 1;
+    modifier lock() {
+        require(unlocked == 1, "Joe: LOCKED");
+        unlocked = 0;
+        _;
+        unlocked = 1;
+    }
+
+    function getReserves()
+        public
+        view
+        returns (
+            uint112 _reserve0,
+            uint112 _reserve1,
+            uint32 _blockTimestampLast
+        )
+    {
+        _reserve0 = reserve0;
+        _reserve1 = reserve1;
+        _blockTimestampLast = blockTimestampLast;
+    }
+
+    function _safeTransfer(
+        address token,
+        address to,
+        uint256 value
+    ) private {
+        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(SELECTOR, to, value));
+        require(success && (data.length == 0 || abi.decode(data, (bool))), "Joe: TRANSFER_FAILED");
+    }
+
+    event Mint(address indexed sender, uint256 amount0, uint256 amount1);
+    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);
+    event Swap(
+        address indexed sender,
+        uint256 amount0In,
+        uint256 amount1In,
+        uint256 amount0Out,
+        uint256 amount1Out,
+        address indexed to
+    );
+    event Sync(uint112 reserve0, uint112 reserve1);
+
+    constructor() public {
+        factory = msg.sender;
+    }
+
+    // called once by the factory at time of deployment
+    function initialize(address _token0, address _token1) external {
+        require(msg.sender == factory, "Joe: FORBIDDEN"); // sufficient check
+        token0 = _token0;
+        token1 = _token1;
+    }
+
+    // update reserves and, on the first call per block, price accumulators
+    function _update(
+        uint256 balance0,
+        uint256 balance1,
+        uint112 _reserve0,
+        uint112 _reserve1
+    ) private {
+        require(balance0 <= uint112(-1) && balance1 <= uint112(-1), "Joe: OVERFLOW");
+        uint32 blockTimestamp = uint32(block.timestamp % 2**32);
+        uint32 timeElapsed = blockTimestamp - blockTimestampLast; // overflow is desired
+        if (timeElapsed > 0 && _reserve0 != 0 && _reserve1 != 0) {
+            // * never overflows, and + overflow is desired
+            price0CumulativeLast += uint256(UQ112x112.encode(_reserve1).uqdiv(_reserve0)) * timeElapsed;
+            price1CumulativeLast += uint256(UQ112x112.encode(_reserve0).uqdiv(_reserve1)) * timeElapsed;
+        }
+        reserve0 = uint112(balance0);
+        reserve1 = uint112(balance1);
+        blockTimestampLast = blockTimestamp;
+        emit Sync(reserve0, reserve1);
+    }
+
+    // if fee is on, mint liquidity equivalent to 1/6th of the growth in sqrt(k)
+    function _mintFee(uint112 _reserve0, uint112 _reserve1) private returns (bool feeOn) {
+        address feeTo = IJoeFactory(factory).feeTo();
+        feeOn = feeTo != address(0);
+        uint256 _kLast = kLast; // gas savings
+        if (feeOn) {
+            if (_kLast != 0) {
+                uint256 rootK = Math.sqrt(uint256(_reserve0).mul(_reserve1));
+                uint256 rootKLast = Math.sqrt(_kLast);
+                if (rootK > rootKLast) {
+                    uint256 numerator = totalSupply.mul(rootK.sub(rootKLast));
+                    uint256 denominator = rootK.mul(5).add(rootKLast);
+                    uint256 liquidity = numerator / denominator;
+                    if (liquidity > 0) _mint(feeTo, liquidity);
+                }
+            }
+        } else if (_kLast != 0) {
+            kLast = 0;
+        }
+    }
+
+    // this low-level function should be called from a contract which performs important safety checks
+    function mint(address to) external lock returns (uint256 liquidity) {
+        (uint112 _reserve0, uint112 _reserve1, ) = getReserves(); // gas savings
+        uint256 balance0 = IERC20Joe(token0).balanceOf(address(this));
+        uint256 balance1 = IERC20Joe(token1).balanceOf(address(this));
+        uint256 amount0 = balance0.sub(_reserve0);
+        uint256 amount1 = balance1.sub(_reserve1);
+
+        bool feeOn = _mintFee(_reserve0, _reserve1);
+        uint256 _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee
+        if (_totalSupply == 0) {
+            address migrator = IJoeFactory(factory).migrator();
+            if (msg.sender == migrator) {
+                liquidity = IMigrator(migrator).desiredLiquidity();
+                require(liquidity > 0 && liquidity != uint256(-1), "Bad desired liquidity");
+            } else {
+                require(migrator == address(0), "Must not have migrator");
+                liquidity = Math.sqrt(amount0.mul(amount1)).sub(MINIMUM_LIQUIDITY);
+                _mint(address(0), MINIMUM_LIQUIDITY); // permanently lock the first MINIMUM_LIQUIDITY tokens
+            }
+        } else {
+            liquidity = Math.min(amount0.mul(_totalSupply) / _reserve0, amount1.mul(_totalSupply) / _reserve1);
+        }
+        require(liquidity > 0, "Joe: INSUFFICIENT_LIQUIDITY_MINTED");
+        _mint(to, liquidity);
+
+        _update(balance0, balance1, _reserve0, _reserve1);
+        if (feeOn) kLast = uint256(reserve0).mul(reserve1); // reserve0 and reserve1 are up-to-date
+        emit Mint(msg.sender, amount0, amount1);
+    }
+
+    // this low-level function should be called from a contract which performs important safety checks
+    function burn(address to) external lock returns (uint256 amount0, uint256 amount1) {
+        (uint112 _reserve0, uint112 _reserve1, ) = getReserves(); // gas savings
+        address _token0 = token0; // gas savings
+        address _token1 = token1; // gas savings
+        uint256 balance0 = IERC20Joe(_token0).balanceOf(address(this));
+        uint256 balance1 = IERC20Joe(_token1).balanceOf(address(this));
+        uint256 liquidity = balanceOf[address(this)];
+
+        bool feeOn = _mintFee(_reserve0, _reserve1);
+        uint256 _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee
+        amount0 = liquidity.mul(balance0) / _totalSupply; // using balances ensures pro-rata distribution
+        amount1 = liquidity.mul(balance1) / _totalSupply; // using balances ensures pro-rata distribution
+        require(amount0 > 0 && amount1 > 0, "Joe: INSUFFICIENT_LIQUIDITY_BURNED");
+        _burn(address(this), liquidity);
+        _safeTransfer(_token0, to, amount0);
+        _safeTransfer(_token1, to, amount1);
+        balance0 = IERC20Joe(_token0).balanceOf(address(this));
+        balance1 = IERC20Joe(_token1).balanceOf(address(this));
+
+        _update(balance0, balance1, _reserve0, _reserve1);
+        if (feeOn) kLast = uint256(reserve0).mul(reserve1); // reserve0 and reserve1 are up-to-date
+        emit Burn(msg.sender, amount0, amount1, to);
+    }
+
+    // this low-level function should be called from a contract which performs important safety checks
+    function swap(
+        uint256 amount0Out,
+        uint256 amount1Out,
+        address to,
+        bytes calldata data
+    ) external lock {
+        require(amount0Out > 0 || amount1Out > 0, "Joe: INSUFFICIENT_OUTPUT_AMOUNT");
+        (uint112 _reserve0, uint112 _reserve1, ) = getReserves(); // gas savings
+        require(amount0Out < _reserve0 && amount1Out < _reserve1, "Joe: INSUFFICIENT_LIQUIDITY");
+
+        uint256 balance0;
+        uint256 balance1;
+        {
+            // scope for _token{0,1}, avoids stack too deep errors
+            address _token0 = token0;
+            address _token1 = token1;
+            require(to != _token0 && to != _token1, "Joe: INVALID_TO");
+            if (amount0Out > 0) _safeTransfer(_token0, to, amount0Out); // optimistically transfer tokens
+            if (amount1Out > 0) _safeTransfer(_token1, to, amount1Out); // optimistically transfer tokens
+            if (data.length > 0) IJoeCallee(to).joeCall(msg.sender, amount0Out, amount1Out, data);
+            balance0 = IERC20Joe(_token0).balanceOf(address(this));
+            balance1 = IERC20Joe(_token1).balanceOf(address(this));
+        }
+        uint256 amount0In = balance0 > _reserve0 - amount0Out ? balance0 - (_reserve0 - amount0Out) : 0;
+        uint256 amount1In = balance1 > _reserve1 - amount1Out ? balance1 - (_reserve1 - amount1Out) : 0;
+        require(amount0In > 0 || amount1In > 0, "Joe: INSUFFICIENT_INPUT_AMOUNT");
+        {
+            // scope for reserve{0,1}Adjusted, avoids stack too deep errors
+            uint256 balance0Adjusted = balance0.mul(1000).sub(amount0In.mul(3));
+            uint256 balance1Adjusted = balance1.mul(1000).sub(amount1In.mul(3));
+            require(balance0Adjusted.mul(balance1Adjusted) >= uint256(_reserve0).mul(_reserve1).mul(1000**2), "Joe: K");
+        }
+
+        _update(balance0, balance1, _reserve0, _reserve1);
+        emit Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, to);
+    }
+
+    // force balances to match reserves
+    function skim(address to) external lock {
+        address _token0 = token0; // gas savings
+        address _token1 = token1; // gas savings
+        _safeTransfer(_token0, to, IERC20Joe(_token0).balanceOf(address(this)).sub(reserve0));
+        _safeTransfer(_token1, to, IERC20Joe(_token1).balanceOf(address(this)).sub(reserve1));
+    }
+
+    // force reserves to match balances
+    function sync() external lock {
+        _update(
+            IERC20Joe(token0).balanceOf(address(this)),
+            IERC20Joe(token1).balanceOf(address(this)),
+            reserve0,
+            reserve1
+        );
+    }
+}
diff -ruN traderjoe/JoeRouter02.sol traderjoe/JoeRouter02.sol
--- traderjoe/JoeRouter02.sol	1969-12-31 16:00:00.000000000 -0800
+++ traderjoe/JoeRouter02.sol	2022-03-11 13:33:36.000000000 -0800
@@ -0,0 +1,479 @@
+// SPDX-License-Identifier: GPL-3.0
+
+pragma solidity =0.6.12;
+
+import "./libraries/JoeLibrary.sol";
+import "./libraries/SafeMath.sol";
+import "./libraries/TransferHelper.sol";
+import "./interfaces/IJoeRouter02.sol";
+import "./interfaces/IJoeFactory.sol";
+import "./interfaces/IERC20.sol";
+import "./interfaces/IWAVAX.sol";
+
+contract JoeRouter02 is IJoeRouter02 {
+    using SafeMathJoe for uint256;
+
+    address public immutable override factory;
+    address public immutable override WAVAX;
+
+    modifier ensure(uint256 deadline) {
+        require(deadline >= block.timestamp, "JoeRouter: EXPIRED");
+        _;
+    }
+
+    constructor(address _factory, address _WAVAX) public {
+        factory = _factory;
+        WAVAX = _WAVAX;
+    }
+
+    receive() external payable {
+        assert(msg.sender == WAVAX); // only accept AVAX via fallback from the WAVAX contract
+    }
+
+    // **** ADD LIQUIDITY ****
+    function _addLiquidity(
+        address tokenA,
+        address tokenB,
+        uint256 amountADesired,
+        uint256 amountBDesired,
+        uint256 amountAMin,
+        uint256 amountBMin
+    ) internal virtual returns (uint256 amountA, uint256 amountB) {
+        // create the pair if it doesn't exist yet
+        if (IJoeFactory(factory).getPair(tokenA, tokenB) == address(0)) {
+            IJoeFactory(factory).createPair(tokenA, tokenB);
+        }
+        (uint256 reserveA, uint256 reserveB) = JoeLibrary.getReserves(factory, tokenA, tokenB);
+        if (reserveA == 0 && reserveB == 0) {
+            (amountA, amountB) = (amountADesired, amountBDesired);
+        } else {
+            uint256 amountBOptimal = JoeLibrary.quote(amountADesired, reserveA, reserveB);
+            if (amountBOptimal <= amountBDesired) {
+                require(amountBOptimal >= amountBMin, "JoeRouter: INSUFFICIENT_B_AMOUNT");
+                (amountA, amountB) = (amountADesired, amountBOptimal);
+            } else {
+                uint256 amountAOptimal = JoeLibrary.quote(amountBDesired, reserveB, reserveA);
+                assert(amountAOptimal <= amountADesired);
+                require(amountAOptimal >= amountAMin, "JoeRouter: INSUFFICIENT_A_AMOUNT");
+                (amountA, amountB) = (amountAOptimal, amountBDesired);
+            }
+        }
+    }
+
+    function addLiquidity(
+        address tokenA,
+        address tokenB,
+        uint256 amountADesired,
+        uint256 amountBDesired,
+        uint256 amountAMin,
+        uint256 amountBMin,
+        address to,
+        uint256 deadline
+    )
+        external
+        virtual
+        override
+        ensure(deadline)
+        returns (
+            uint256 amountA,
+            uint256 amountB,
+            uint256 liquidity
+        )
+    {
+        (amountA, amountB) = _addLiquidity(tokenA, tokenB, amountADesired, amountBDesired, amountAMin, amountBMin);
+        address pair = JoeLibrary.pairFor(factory, tokenA, tokenB);
+        TransferHelper.safeTransferFrom(tokenA, msg.sender, pair, amountA);
+        TransferHelper.safeTransferFrom(tokenB, msg.sender, pair, amountB);
+        liquidity = IJoePair(pair).mint(to);
+    }
+
+    function addLiquidityAVAX(
+        address token,
+        uint256 amountTokenDesired,
+        uint256 amountTokenMin,
+        uint256 amountAVAXMin,
+        address to,
+        uint256 deadline
+    )
+        external
+        payable
+        virtual
+        override
+        ensure(deadline)
+        returns (
+            uint256 amountToken,
+            uint256 amountAVAX,
+            uint256 liquidity
+        )
+    {
+        (amountToken, amountAVAX) = _addLiquidity(
+            token,
+            WAVAX,
+            amountTokenDesired,
+            msg.value,
+            amountTokenMin,
+            amountAVAXMin
+        );
+        address pair = JoeLibrary.pairFor(factory, token, WAVAX);
+        TransferHelper.safeTransferFrom(token, msg.sender, pair, amountToken);
+        IWAVAX(WAVAX).deposit{value: amountAVAX}();
+        assert(IWAVAX(WAVAX).transfer(pair, amountAVAX));
+        liquidity = IJoePair(pair).mint(to);
+        // refund dust eth, if any
+        if (msg.value > amountAVAX) TransferHelper.safeTransferAVAX(msg.sender, msg.value - amountAVAX);
+    }
+
+    // **** REMOVE LIQUIDITY ****
+    function removeLiquidity(
+        address tokenA,
+        address tokenB,
+        uint256 liquidity,
+        uint256 amountAMin,
+        uint256 amountBMin,
+        address to,
+        uint256 deadline
+    ) public virtual override ensure(deadline) returns (uint256 amountA, uint256 amountB) {
+        address pair = JoeLibrary.pairFor(factory, tokenA, tokenB);
+        IJoePair(pair).transferFrom(msg.sender, pair, liquidity); // send liquidity to pair
+        (uint256 amount0, uint256 amount1) = IJoePair(pair).burn(to);
+        (address token0, ) = JoeLibrary.sortTokens(tokenA, tokenB);
+        (amountA, amountB) = tokenA == token0 ? (amount0, amount1) : (amount1, amount0);
+        require(amountA >= amountAMin, "JoeRouter: INSUFFICIENT_A_AMOUNT");
+        require(amountB >= amountBMin, "JoeRouter: INSUFFICIENT_B_AMOUNT");
+    }
+
+    function removeLiquidityAVAX(
+        address token,
+        uint256 liquidity,
+        uint256 amountTokenMin,
+        uint256 amountAVAXMin,
+        address to,
+        uint256 deadline
+    ) public virtual override ensure(deadline) returns (uint256 amountToken, uint256 amountAVAX) {
+        (amountToken, amountAVAX) = removeLiquidity(
+            token,
+            WAVAX,
+            liquidity,
+            amountTokenMin,
+            amountAVAXMin,
+            address(this),
+            deadline
+        );
+        TransferHelper.safeTransfer(token, to, amountToken);
+        IWAVAX(WAVAX).withdraw(amountAVAX);
+        TransferHelper.safeTransferAVAX(to, amountAVAX);
+    }
+
+    function removeLiquidityWithPermit(
+        address tokenA,
+        address tokenB,
+        uint256 liquidity,
+        uint256 amountAMin,
+        uint256 amountBMin,
+        address to,
+        uint256 deadline,
+        bool approveMax,
+        uint8 v,
+        bytes32 r,
+        bytes32 s
+    ) external virtual override returns (uint256 amountA, uint256 amountB) {
+        address pair = JoeLibrary.pairFor(factory, tokenA, tokenB);
+        uint256 value = approveMax ? uint256(-1) : liquidity;
+        IJoePair(pair).permit(msg.sender, address(this), value, deadline, v, r, s);
+        (amountA, amountB) = removeLiquidity(tokenA, tokenB, liquidity, amountAMin, amountBMin, to, deadline);
+    }
+
+    function removeLiquidityAVAXWithPermit(
+        address token,
+        uint256 liquidity,
+        uint256 amountTokenMin,
+        uint256 amountAVAXMin,
+        address to,
+        uint256 deadline,
+        bool approveMax,
+        uint8 v,
+        bytes32 r,
+        bytes32 s
+    ) external virtual override returns (uint256 amountToken, uint256 amountAVAX) {
+        address pair = JoeLibrary.pairFor(factory, token, WAVAX);
+        uint256 value = approveMax ? uint256(-1) : liquidity;
+        IJoePair(pair).permit(msg.sender, address(this), value, deadline, v, r, s);
+        (amountToken, amountAVAX) = removeLiquidityAVAX(token, liquidity, amountTokenMin, amountAVAXMin, to, deadline);
+    }
+
+    // **** REMOVE LIQUIDITY (supporting fee-on-transfer tokens) ****
+    function removeLiquidityAVAXSupportingFeeOnTransferTokens(
+        address token,
+        uint256 liquidity,
+        uint256 amountTokenMin,
+        uint256 amountAVAXMin,
+        address to,
+        uint256 deadline
+    ) public virtual override ensure(deadline) returns (uint256 amountAVAX) {
+        (, amountAVAX) = removeLiquidity(
+            token,
+            WAVAX,
+            liquidity,
+            amountTokenMin,
+            amountAVAXMin,
+            address(this),
+            deadline
+        );
+        TransferHelper.safeTransfer(token, to, IERC20Joe(token).balanceOf(address(this)));
+        IWAVAX(WAVAX).withdraw(amountAVAX);
+        TransferHelper.safeTransferAVAX(to, amountAVAX);
+    }
+
+    function removeLiquidityAVAXWithPermitSupportingFeeOnTransferTokens(
+        address token,
+        uint256 liquidity,
+        uint256 amountTokenMin,
+        uint256 amountAVAXMin,
+        address to,
+        uint256 deadline,
+        bool approveMax,
+        uint8 v,
+        bytes32 r,
+        bytes32 s
+    ) external virtual override returns (uint256 amountAVAX) {
+        address pair = JoeLibrary.pairFor(factory, token, WAVAX);
+        uint256 value = approveMax ? uint256(-1) : liquidity;
+        IJoePair(pair).permit(msg.sender, address(this), value, deadline, v, r, s);
+        amountAVAX = removeLiquidityAVAXSupportingFeeOnTransferTokens(
+            token,
+            liquidity,
+            amountTokenMin,
+            amountAVAXMin,
+            to,
+            deadline
+        );
+    }
+
+    // **** SWAP ****
+    // requires the initial amount to have already been sent to the first pair
+    function _swap(
+        uint256[] memory amounts,
+        address[] memory path,
+        address _to
+    ) internal virtual {
+        for (uint256 i; i < path.length - 1; i++) {
+            (address input, address output) = (path[i], path[i + 1]);
+            (address token0, ) = JoeLibrary.sortTokens(input, output);
+            uint256 amountOut = amounts[i + 1];
+            (uint256 amount0Out, uint256 amount1Out) = input == token0
+                ? (uint256(0), amountOut)
+                : (amountOut, uint256(0));
+            address to = i < path.length - 2 ? JoeLibrary.pairFor(factory, output, path[i + 2]) : _to;
+            IJoePair(JoeLibrary.pairFor(factory, input, output)).swap(amount0Out, amount1Out, to, new bytes(0));
+        }
+    }
+
+    function swapExactTokensForTokens(
+        uint256 amountIn,
+        uint256 amountOutMin,
+        address[] calldata path,
+        address to,
+        uint256 deadline
+    ) external virtual override ensure(deadline) returns (uint256[] memory amounts) {
+        amounts = JoeLibrary.getAmountsOut(factory, amountIn, path);
+        require(amounts[amounts.length - 1] >= amountOutMin, "JoeRouter: INSUFFICIENT_OUTPUT_AMOUNT");
+        TransferHelper.safeTransferFrom(path[0], msg.sender, JoeLibrary.pairFor(factory, path[0], path[1]), amounts[0]);
+        _swap(amounts, path, to);
+    }
+
+    function swapTokensForExactTokens(
+        uint256 amountOut,
+        uint256 amountInMax,
+        address[] calldata path,
+        address to,
+        uint256 deadline
+    ) external virtual override ensure(deadline) returns (uint256[] memory amounts) {
+        amounts = JoeLibrary.getAmountsIn(factory, amountOut, path);
+        require(amounts[0] <= amountInMax, "JoeRouter: EXCESSIVE_INPUT_AMOUNT");
+        TransferHelper.safeTransferFrom(path[0], msg.sender, JoeLibrary.pairFor(factory, path[0], path[1]), amounts[0]);
+        _swap(amounts, path, to);
+    }
+
+    function swapExactAVAXForTokens(
+        uint256 amountOutMin,
+        address[] calldata path,
+        address to,
+        uint256 deadline
+    ) external payable virtual override ensure(deadline) returns (uint256[] memory amounts) {
+        require(path[0] == WAVAX, "JoeRouter: INVALID_PATH");
+        amounts = JoeLibrary.getAmountsOut(factory, msg.value, path);
+        require(amounts[amounts.length - 1] >= amountOutMin, "JoeRouter: INSUFFICIENT_OUTPUT_AMOUNT");
+        IWAVAX(WAVAX).deposit{value: amounts[0]}();
+        assert(IWAVAX(WAVAX).transfer(JoeLibrary.pairFor(factory, path[0], path[1]), amounts[0]));
+        _swap(amounts, path, to);
+    }
+
+    function swapTokensForExactAVAX(
+        uint256 amountOut,
+        uint256 amountInMax,
+        address[] calldata path,
+        address to,
+        uint256 deadline
+    ) external virtual override ensure(deadline) returns (uint256[] memory amounts) {
+        require(path[path.length - 1] == WAVAX, "JoeRouter: INVALID_PATH");
+        amounts = JoeLibrary.getAmountsIn(factory, amountOut, path);
+        require(amounts[0] <= amountInMax, "JoeRouter: EXCESSIVE_INPUT_AMOUNT");
+        TransferHelper.safeTransferFrom(path[0], msg.sender, JoeLibrary.pairFor(factory, path[0], path[1]), amounts[0]);
+        _swap(amounts, path, address(this));
+        IWAVAX(WAVAX).withdraw(amounts[amounts.length - 1]);
+        TransferHelper.safeTransferAVAX(to, amounts[amounts.length - 1]);
+    }
+
+    function swapExactTokensForAVAX(
+        uint256 amountIn,
+        uint256 amountOutMin,
+        address[] calldata path,
+        address to,
+        uint256 deadline
+    ) external virtual override ensure(deadline) returns (uint256[] memory amounts) {
+        require(path[path.length - 1] == WAVAX, "JoeRouter: INVALID_PATH");
+        amounts = JoeLibrary.getAmountsOut(factory, amountIn, path);
+        require(amounts[amounts.length - 1] >= amountOutMin, "JoeRouter: INSUFFICIENT_OUTPUT_AMOUNT");
+        TransferHelper.safeTransferFrom(path[0], msg.sender, JoeLibrary.pairFor(factory, path[0], path[1]), amounts[0]);
+        _swap(amounts, path, address(this));
+        IWAVAX(WAVAX).withdraw(amounts[amounts.length - 1]);
+        TransferHelper.safeTransferAVAX(to, amounts[amounts.length - 1]);
+    }
+
+    function swapAVAXForExactTokens(
+        uint256 amountOut,
+        address[] calldata path,
+        address to,
+        uint256 deadline
+    ) external payable virtual override ensure(deadline) returns (uint256[] memory amounts) {
+        require(path[0] == WAVAX, "JoeRouter: INVALID_PATH");
+        amounts = JoeLibrary.getAmountsIn(factory, amountOut, path);
+        require(amounts[0] <= msg.value, "JoeRouter: EXCESSIVE_INPUT_AMOUNT");
+        IWAVAX(WAVAX).deposit{value: amounts[0]}();
+        assert(IWAVAX(WAVAX).transfer(JoeLibrary.pairFor(factory, path[0], path[1]), amounts[0]));
+        _swap(amounts, path, to);
+        // refund dust eth, if any
+        if (msg.value > amounts[0]) TransferHelper.safeTransferAVAX(msg.sender, msg.value - amounts[0]);
+    }
+
+    // **** SWAP (supporting fee-on-transfer tokens) ****
+    // requires the initial amount to have already been sent to the first pair
+    function _swapSupportingFeeOnTransferTokens(address[] memory path, address _to) internal virtual {
+        for (uint256 i; i < path.length - 1; i++) {
+            (address input, address output) = (path[i], path[i + 1]);
+            (address token0, ) = JoeLibrary.sortTokens(input, output);
+            IJoePair pair = IJoePair(JoeLibrary.pairFor(factory, input, output));
+            uint256 amountInput;
+            uint256 amountOutput;
+            {
+                // scope to avoid stack too deep errors
+                (uint256 reserve0, uint256 reserve1, ) = pair.getReserves();
+                (uint256 reserveInput, uint256 reserveOutput) = input == token0
+                    ? (reserve0, reserve1)
+                    : (reserve1, reserve0);
+                amountInput = IERC20Joe(input).balanceOf(address(pair)).sub(reserveInput);
+                amountOutput = JoeLibrary.getAmountOut(amountInput, reserveInput, reserveOutput);
+            }
+            (uint256 amount0Out, uint256 amount1Out) = input == token0
+                ? (uint256(0), amountOutput)
+                : (amountOutput, uint256(0));
+            address to = i < path.length - 2 ? JoeLibrary.pairFor(factory, output, path[i + 2]) : _to;
+            pair.swap(amount0Out, amount1Out, to, new bytes(0));
+        }
+    }
+
+    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
+        uint256 amountIn,
+        uint256 amountOutMin,
+        address[] calldata path,
+        address to,
+        uint256 deadline
+    ) external virtual override ensure(deadline) {
+        TransferHelper.safeTransferFrom(path[0], msg.sender, JoeLibrary.pairFor(factory, path[0], path[1]), amountIn);
+        uint256 balanceBefore = IERC20Joe(path[path.length - 1]).balanceOf(to);
+        _swapSupportingFeeOnTransferTokens(path, to);
+        require(
+            IERC20Joe(path[path.length - 1]).balanceOf(to).sub(balanceBefore) >= amountOutMin,
+            "JoeRouter: INSUFFICIENT_OUTPUT_AMOUNT"
+        );
+    }
+
+    function swapExactAVAXForTokensSupportingFeeOnTransferTokens(
+        uint256 amountOutMin,
+        address[] calldata path,
+        address to,
+        uint256 deadline
+    ) external payable virtual override ensure(deadline) {
+        require(path[0] == WAVAX, "JoeRouter: INVALID_PATH");
+        uint256 amountIn = msg.value;
+        IWAVAX(WAVAX).deposit{value: amountIn}();
+        assert(IWAVAX(WAVAX).transfer(JoeLibrary.pairFor(factory, path[0], path[1]), amountIn));
+        uint256 balanceBefore = IERC20Joe(path[path.length - 1]).balanceOf(to);
+        _swapSupportingFeeOnTransferTokens(path, to);
+        require(
+            IERC20Joe(path[path.length - 1]).balanceOf(to).sub(balanceBefore) >= amountOutMin,
+            "JoeRouter: INSUFFICIENT_OUTPUT_AMOUNT"
+        );
+    }
+
+    function swapExactTokensForAVAXSupportingFeeOnTransferTokens(
+        uint256 amountIn,
+        uint256 amountOutMin,
+        address[] calldata path,
+        address to,
+        uint256 deadline
+    ) external virtual override ensure(deadline) {
+        require(path[path.length - 1] == WAVAX, "JoeRouter: INVALID_PATH");
+        TransferHelper.safeTransferFrom(path[0], msg.sender, JoeLibrary.pairFor(factory, path[0], path[1]), amountIn);
+        _swapSupportingFeeOnTransferTokens(path, address(this));
+        uint256 amountOut = IERC20Joe(WAVAX).balanceOf(address(this));
+        require(amountOut >= amountOutMin, "JoeRouter: INSUFFICIENT_OUTPUT_AMOUNT");
+        IWAVAX(WAVAX).withdraw(amountOut);
+        TransferHelper.safeTransferAVAX(to, amountOut);
+    }
+
+    // **** LIBRARY FUNCTIONS ****
+    function quote(
+        uint256 amountA,
+        uint256 reserveA,
+        uint256 reserveB
+    ) public pure virtual override returns (uint256 amountB) {
+        return JoeLibrary.quote(amountA, reserveA, reserveB);
+    }
+
+    function getAmountOut(
+        uint256 amountIn,
+        uint256 reserveIn,
+        uint256 reserveOut
+    ) public pure virtual override returns (uint256 amountOut) {
+        return JoeLibrary.getAmountOut(amountIn, reserveIn, reserveOut);
+    }
+
+    function getAmountIn(
+        uint256 amountOut,
+        uint256 reserveIn,
+        uint256 reserveOut
+    ) public pure virtual override returns (uint256 amountIn) {
+        return JoeLibrary.getAmountIn(amountOut, reserveIn, reserveOut);
+    }
+
+    function getAmountsOut(uint256 amountIn, address[] memory path)
+        public
+        view
+        virtual
+        override
+        returns (uint256[] memory amounts)
+    {
+        return JoeLibrary.getAmountsOut(factory, amountIn, path);
+    }
+
+    function getAmountsIn(uint256 amountOut, address[] memory path)
+        public
+        view
+        virtual
+        override
+        returns (uint256[] memory amounts)
+    {
+        return JoeLibrary.getAmountsIn(factory, amountOut, path);
+    }
+}
diff -ruN traderjoe/LICENSE traderjoe/LICENSE
--- traderjoe/LICENSE	1969-12-31 16:00:00.000000000 -0800
+++ traderjoe/LICENSE	2022-03-11 13:33:36.000000000 -0800
@@ -0,0 +1,674 @@
+                    GNU GENERAL PUBLIC LICENSE
+                       Version 3, 29 June 2007
+
+ Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/>
+ Everyone is permitted to copy and distribute verbatim copies
+ of this license document, but changing it is not allowed.
+
+                            Preamble
+
+  The GNU General Public License is a free, copyleft license for
+software and other kinds of works.
+
+  The licenses for most software and other practical works are designed
+to take away your freedom to share and change the works.  By contrast,
+the GNU General Public License is intended to guarantee your freedom to
+share and change all versions of a program--to make sure it remains free
+software for all its users.  We, the Free Software Foundation, use the
+GNU General Public License for most of our software; it applies also to
+any other work released this way by its authors.  You can apply it to
+your programs, too.
+
+  When we speak of free software, we are referring to freedom, not
+price.  Our General Public Licenses are designed to make sure that you
+have the freedom to distribute copies of free software (and charge for
+them if you wish), that you receive source code or can get it if you
+want it, that you can change the software or use pieces of it in new
+free programs, and that you know you can do these things.
+
+  To protect your rights, we need to prevent others from denying you
+these rights or asking you to surrender the rights.  Therefore, you have
+certain responsibilities if you distribute copies of the software, or if
+you modify it: responsibilities to respect the freedom of others.
+
+  For example, if you distribute copies of such a program, whether
+gratis or for a fee, you must pass on to the recipients the same
+freedoms that you received.  You must make sure that they, too, receive
+or can get the source code.  And you must show them these terms so they
+know their rights.
+
+  Developers that use the GNU GPL protect your rights with two steps:
+(1) assert copyright on the software, and (2) offer you this License
+giving you legal permission to copy, distribute and/or modify it.
+
+  For the developers' and authors' protection, the GPL clearly explains
+that there is no warranty for this free software.  For both users' and
+authors' sake, the GPL requires that modified versions be marked as
+changed, so that their problems will not be attributed erroneously to
+authors of previous versions.
+
+  Some devices are designed to deny users access to install or run
+modified versions of the software inside them, although the manufacturer
+can do so.  This is fundamentally incompatible with the aim of
+protecting users' freedom to change the software.  The systematic
+pattern of such abuse occurs in the area of products for individuals to
+use, which is precisely where it is most unacceptable.  Therefore, we
+have designed this version of the GPL to prohibit the practice for those
+products.  If such problems arise substantially in other domains, we
+stand ready to extend this provision to those domains in future versions
+of the GPL, as needed to protect the freedom of users.
+
+  Finally, every program is threatened constantly by software patents.
+States should not allow patents to restrict development and use of
+software on general-purpose computers, but in those that do, we wish to
+avoid the special danger that patents applied to a free program could
+make it effectively proprietary.  To prevent this, the GPL assures that
+patents cannot be used to render the program non-free.
+
+  The precise terms and conditions for copying, distribution and
+modification follow.
+
+                       TERMS AND CONDITIONS
+
+  0. Definitions.
+
+  "This License" refers to version 3 of the GNU General Public License.
+
+  "Copyright" also means copyright-like laws that apply to other kinds of
+works, such as semiconductor masks.
+
+  "The Program" refers to any copyrightable work licensed under this
+License.  Each licensee is addressed as "you".  "Licensees" and
+"recipients" may be individuals or organizations.
+
+  To "modify" a work means to copy from or adapt all or part of the work
+in a fashion requiring copyright permission, other than the making of an
+exact copy.  The resulting work is called a "modified version" of the
+earlier work or a work "based on" the earlier work.
+
+  A "covered work" means either the unmodified Program or a work based
+on the Program.
+
+  To "propagate" a work means to do anything with it that, without
+permission, would make you directly or secondarily liable for
+infringement under applicable copyright law, except executing it on a
+computer or modifying a private copy.  Propagation includes copying,
+distribution (with or without modification), making available to the
+public, and in some countries other activities as well.
+
+  To "convey" a work means any kind of propagation that enables other
+parties to make or receive copies.  Mere interaction with a user through
+a computer network, with no transfer of a copy, is not conveying.
+
+  An interactive user interface displays "Appropriate Legal Notices"
+to the extent that it includes a convenient and prominently visible
+feature that (1) displays an appropriate copyright notice, and (2)
+tells the user that there is no warranty for the work (except to the
+extent that warranties are provided), that licensees may convey the
+work under this License, and how to view a copy of this License.  If
+the interface presents a list of user commands or options, such as a
+menu, a prominent item in the list meets this criterion.
+
+  1. Source Code.
+
+  The "source code" for a work means the preferred form of the work
+for making modifications to it.  "Object code" means any non-source
+form of a work.
+
+  A "Standard Interface" means an interface that either is an official
+standard defined by a recognized standards body, or, in the case of
+interfaces specified for a particular programming language, one that
+is widely used among developers working in that language.
+
+  The "System Libraries" of an executable work include anything, other
+than the work as a whole, that (a) is included in the normal form of
+packaging a Major Component, but which is not part of that Major
+Component, and (b) serves only to enable use of the work with that
+Major Component, or to implement a Standard Interface for which an
+implementation is available to the public in source code form.  A
+"Major Component", in this context, means a major essential component
+(kernel, window system, and so on) of the specific operating system
+(if any) on which the executable work runs, or a compiler used to
+produce the work, or an object code interpreter used to run it.
+
+  The "Corresponding Source" for a work in object code form means all
+the source code needed to generate, install, and (for an executable
+work) run the object code and to modify the work, including scripts to
+control those activities.  However, it does not include the work's
+System Libraries, or general-purpose tools or generally available free
+programs which are used unmodified in performing those activities but
+which are not part of the work.  For example, Corresponding Source
+includes interface definition files associated with source files for
+the work, and the source code for shared libraries and dynamically
+linked subprograms that the work is specifically designed to require,
+such as by intimate data communication or control flow between those
+subprograms and other parts of the work.
+
+  The Corresponding Source need not include anything that users
+can regenerate automatically from other parts of the Corresponding
+Source.
+
+  The Corresponding Source for a work in source code form is that
+same work.
+
+  2. Basic Permissions.
+
+  All rights granted under this License are granted for the term of
+copyright on the Program, and are irrevocable provided the stated
+conditions are met.  This License explicitly affirms your unlimited
+permission to run the unmodified Program.  The output from running a
+covered work is covered by this License only if the output, given its
+content, constitutes a covered work.  This License acknowledges your
+rights of fair use or other equivalent, as provided by copyright law.
+
+  You may make, run and propagate covered works that you do not
+convey, without conditions so long as your license otherwise remains
+in force.  You may convey covered works to others for the sole purpose
+of having them make modifications exclusively for you, or provide you
+with facilities for running those works, provided that you comply with
+the terms of this License in conveying all material for which you do
+not control copyright.  Those thus making or running the covered works
+for you must do so exclusively on your behalf, under your direction
+and control, on terms that prohibit them from making any copies of
+your copyrighted material outside their relationship with you.
+
+  Conveying under any other circumstances is permitted solely under
+the conditions stated below.  Sublicensing is not allowed; section 10
+makes it unnecessary.
+
+  3. Protecting Users' Legal Rights From Anti-Circumvention Law.
+
+  No covered work shall be deemed part of an effective technological
+measure under any applicable law fulfilling obligations under article
+11 of the WIPO copyright treaty adopted on 20 December 1996, or
+similar laws prohibiting or restricting circumvention of such
+measures.
+
+  When you convey a covered work, you waive any legal power to forbid
+circumvention of technological measures to the extent such circumvention
+is effected by exercising rights under this License with respect to
+the covered work, and you disclaim any intention to limit operation or
+modification of the work as a means of enforcing, against the work's
+users, your or third parties' legal rights to forbid circumvention of
+technological measures.
+
+  4. Conveying Verbatim Copies.
+
+  You may convey verbatim copies of the Program's source code as you
+receive it, in any medium, provided that you conspicuously and
+appropriately publish on each copy an appropriate copyright notice;
+keep intact all notices stating that this License and any
+non-permissive terms added in accord with section 7 apply to the code;
+keep intact all notices of the absence of any warranty; and give all
+recipients a copy of this License along with the Program.
+
+  You may charge any price or no price for each copy that you convey,
+and you may offer support or warranty protection for a fee.
+
+  5. Conveying Modified Source Versions.
+
+  You may convey a work based on the Program, or the modifications to
+produce it from the Program, in the form of source code under the
+terms of section 4, provided that you also meet all of these conditions:
+
+    a) The work must carry prominent notices stating that you modified
+    it, and giving a relevant date.
+
+    b) The work must carry prominent notices stating that it is
+    released under this License and any conditions added under section
+    7.  This requirement modifies the requirement in section 4 to
+    "keep intact all notices".
+
+    c) You must license the entire work, as a whole, under this
+    License to anyone who comes into possession of a copy.  This
+    License will therefore apply, along with any applicable section 7
+    additional terms, to the whole of the work, and all its parts,
+    regardless of how they are packaged.  This License gives no
+    permission to license the work in any other way, but it does not
+    invalidate such permission if you have separately received it.
+
+    d) If the work has interactive user interfaces, each must display
+    Appropriate Legal Notices; however, if the Program has interactive
+    interfaces that do not display Appropriate Legal Notices, your
+    work need not make them do so.
+
+  A compilation of a covered work with other separate and independent
+works, which are not by their nature extensions of the covered work,
+and which are not combined with it such as to form a larger program,
+in or on a volume of a storage or distribution medium, is called an
+"aggregate" if the compilation and its resulting copyright are not
+used to limit the access or legal rights of the compilation's users
+beyond what the individual works permit.  Inclusion of a covered work
+in an aggregate does not cause this License to apply to the other
+parts of the aggregate.
+
+  6. Conveying Non-Source Forms.
+
+  You may convey a covered work in object code form under the terms
+of sections 4 and 5, provided that you also convey the
+machine-readable Corresponding Source under the terms of this License,
+in one of these ways:
+
+    a) Convey the object code in, or embodied in, a physical product
+    (including a physical distribution medium), accompanied by the
+    Corresponding Source fixed on a durable physical medium
+    customarily used for software interchange.
+
+    b) Convey the object code in, or embodied in, a physical product
+    (including a physical distribution medium), accompanied by a
+    written offer, valid for at least three years and valid for as
+    long as you offer spare parts or customer support for that product
+    model, to give anyone who possesses the object code either (1) a
+    copy of the Corresponding Source for all the software in the
+    product that is covered by this License, on a durable physical
+    medium customarily used for software interchange, for a price no
+    more than your reasonable cost of physically performing this
+    conveying of source, or (2) access to copy the
+    Corresponding Source from a network server at no charge.
+
+    c) Convey individual copies of the object code with a copy of the
+    written offer to provide the Corresponding Source.  This
+    alternative is allowed only occasionally and noncommercially, and
+    only if you received the object code with such an offer, in accord
+    with subsection 6b.
+
+    d) Convey the object code by offering access from a designated
+    place (gratis or for a charge), and offer equivalent access to the
+    Corresponding Source in the same way through the same place at no
+    further charge.  You need not require recipients to copy the
+    Corresponding Source along with the object code.  If the place to
+    copy the object code is a network server, the Corresponding Source
+    may be on a different server (operated by you or a third party)
+    that supports equivalent copying facilities, provided you maintain
+    clear directions next to the object code saying where to find the
+    Corresponding Source.  Regardless of what server hosts the
+    Corresponding Source, you remain obligated to ensure that it is
+    available for as long as needed to satisfy these requirements.
+
+    e) Convey the object code using peer-to-peer transmission, provided
+    you inform other peers where the object code and Corresponding
+    Source of the work are being offered to the general public at no
+    charge under subsection 6d.
+
+  A separable portion of the object code, whose source code is excluded
+from the Corresponding Source as a System Library, need not be
+included in conveying the object code work.
+
+  A "User Product" is either (1) a "consumer product", which means any
+tangible personal property which is normally used for personal, family,
+or household purposes, or (2) anything designed or sold for incorporation
+into a dwelling.  In determining whether a product is a consumer product,
+doubtful cases shall be resolved in favor of coverage.  For a particular
+product received by a particular user, "normally used" refers to a
+typical or common use of that class of product, regardless of the status
+of the particular user or of the way in which the particular user
+actually uses, or expects or is expected to use, the product.  A product
+is a consumer product regardless of whether the product has substantial
+commercial, industrial or non-consumer uses, unless such uses represent
+the only significant mode of use of the product.
+
+  "Installation Information" for a User Product means any methods,
+procedures, authorization keys, or other information required to install
+and execute modified versions of a covered work in that User Product from
+a modified version of its Corresponding Source.  The information must
+suffice to ensure that the continued functioning of the modified object
+code is in no case prevented or interfered with solely because
+modification has been made.
+
+  If you convey an object code work under this section in, or with, or
+specifically for use in, a User Product, and the conveying occurs as
+part of a transaction in which the right of possession and use of the
+User Product is transferred to the recipient in perpetuity or for a
+fixed term (regardless of how the transaction is characterized), the
+Corresponding Source conveyed under this section must be accompanied
+by the Installation Information.  But this requirement does not apply
+if neither you nor any third party retains the ability to install
+modified object code on the User Product (for example, the work has
+been installed in ROM).
+
+  The requirement to provide Installation Information does not include a
+requirement to continue to provide support service, warranty, or updates
+for a work that has been modified or installed by the recipient, or for
+the User Product in which it has been modified or installed.  Access to a
+network may be denied when the modification itself materially and
+adversely affects the operation of the network or violates the rules and
+protocols for communication across the network.
+
+  Corresponding Source conveyed, and Installation Information provided,
+in accord with this section must be in a format that is publicly
+documented (and with an implementation available to the public in
+source code form), and must require no special password or key for
+unpacking, reading or copying.
+
+  7. Additional Terms.
+
+  "Additional permissions" are terms that supplement the terms of this
+License by making exceptions from one or more of its conditions.
+Additional permissions that are applicable to the entire Program shall
+be treated as though they were included in this License, to the extent
+that they are valid under applicable law.  If additional permissions
+apply only to part of the Program, that part may be used separately
+under those permissions, but the entire Program remains governed by
+this License without regard to the additional permissions.
+
+  When you convey a copy of a covered work, you may at your option
+remove any additional permissions from that copy, or from any part of
+it.  (Additional permissions may be written to require their own
+removal in certain cases when you modify the work.)  You may place
+additional permissions on material, added by you to a covered work,
+for which you have or can give appropriate copyright permission.
+
+  Notwithstanding any other provision of this License, for material you
+add to a covered work, you may (if authorized by the copyright holders of
+that material) supplement the terms of this License with terms:
+
+    a) Disclaiming warranty or limiting liability differently from the
+    terms of sections 15 and 16 of this License; or
+
+    b) Requiring preservation of specified reasonable legal notices or
+    author attributions in that material or in the Appropriate Legal
+    Notices displayed by works containing it; or
+
+    c) Prohibiting misrepresentation of the origin of that material, or
+    requiring that modified versions of such material be marked in
+    reasonable ways as different from the original version; or
+
+    d) Limiting the use for publicity purposes of names of licensors or
+    authors of the material; or
+
+    e) Declining to grant rights under trademark law for use of some
+    trade names, trademarks, or service marks; or
+
+    f) Requiring indemnification of licensors and authors of that
+    material by anyone who conveys the material (or modified versions of
+    it) with contractual assumptions of liability to the recipient, for
+    any liability that these contractual assumptions directly impose on
+    those licensors and authors.
+
+  All other non-permissive additional terms are considered "further
+restrictions" within the meaning of section 10.  If the Program as you
+received it, or any part of it, contains a notice stating that it is
+governed by this License along with a term that is a further
+restriction, you may remove that term.  If a license document contains
+a further restriction but permits relicensing or conveying under this
+License, you may add to a covered work material governed by the terms
+of that license document, provided that the further restriction does
+not survive such relicensing or conveying.
+
+  If you add terms to a covered work in accord with this section, you
+must place, in the relevant source files, a statement of the
+additional terms that apply to those files, or a notice indicating
+where to find the applicable terms.
+
+  Additional terms, permissive or non-permissive, may be stated in the
+form of a separately written license, or stated as exceptions;
+the above requirements apply either way.
+
+  8. Termination.
+
+  You may not propagate or modify a covered work except as expressly
+provided under this License.  Any attempt otherwise to propagate or
+modify it is void, and will automatically terminate your rights under
+this License (including any patent licenses granted under the third
+paragraph of section 11).
+
+  However, if you cease all violation of this License, then your
+license from a particular copyright holder is reinstated (a)
+provisionally, unless and until the copyright holder explicitly and
+finally terminates your license, and (b) permanently, if the copyright
+holder fails to notify you of the violation by some reasonable means
+prior to 60 days after the cessation.
+
+  Moreover, your license from a particular copyright holder is
+reinstated permanently if the copyright holder notifies you of the
+violation by some reasonable means, this is the first time you have
+received notice of violation of this License (for any work) from that
+copyright holder, and you cure the violation prior to 30 days after
+your receipt of the notice.
+
+  Termination of your rights under this section does not terminate the
+licenses of parties who have received copies or rights from you under
+this License.  If your rights have been terminated and not permanently
+reinstated, you do not qualify to receive new licenses for the same
+material under section 10.
+
+  9. Acceptance Not Required for Having Copies.
+
+  You are not required to accept this License in order to receive or
+run a copy of the Program.  Ancillary propagation of a covered work
+occurring solely as a consequence of using peer-to-peer transmission
+to receive a copy likewise does not require acceptance.  However,
+nothing other than this License grants you permission to propagate or
+modify any covered work.  These actions infringe copyright if you do
+not accept this License.  Therefore, by modifying or propagating a
+covered work, you indicate your acceptance of this License to do so.
+
+  10. Automatic Licensing of Downstream Recipients.
+
+  Each time you convey a covered work, the recipient automatically
+receives a license from the original licensors, to run, modify and
+propagate that work, subject to this License.  You are not responsible
+for enforcing compliance by third parties with this License.
+
+  An "entity transaction" is a transaction transferring control of an
+organization, or substantially all assets of one, or subdividing an
+organization, or merging organizations.  If propagation of a covered
+work results from an entity transaction, each party to that
+transaction who receives a copy of the work also receives whatever
+licenses to the work the party's predecessor in interest had or could
+give under the previous paragraph, plus a right to possession of the
+Corresponding Source of the work from the predecessor in interest, if
+the predecessor has it or can get it with reasonable efforts.
+
+  You may not impose any further restrictions on the exercise of the
+rights granted or affirmed under this License.  For example, you may
+not impose a license fee, royalty, or other charge for exercise of
+rights granted under this License, and you may not initiate litigation
+(including a cross-claim or counterclaim in a lawsuit) alleging that
+any patent claim is infringed by making, using, selling, offering for
+sale, or importing the Program or any portion of it.
+
+  11. Patents.
+
+  A "contributor" is a copyright holder who authorizes use under this
+License of the Program or a work on which the Program is based.  The
+work thus licensed is called the contributor's "contributor version".
+
+  A contributor's "essential patent claims" are all patent claims
+owned or controlled by the contributor, whether already acquired or
+hereafter acquired, that would be infringed by some manner, permitted
+by this License, of making, using, or selling its contributor version,
+but do not include claims that would be infringed only as a
+consequence of further modification of the contributor version.  For
+purposes of this definition, "control" includes the right to grant
+patent sublicenses in a manner consistent with the requirements of
+this License.
+
+  Each contributor grants you a non-exclusive, worldwide, royalty-free
+patent license under the contributor's essential patent claims, to
+make, use, sell, offer for sale, import and otherwise run, modify and
+propagate the contents of its contributor version.
+
+  In the following three paragraphs, a "patent license" is any express
+agreement or commitment, however denominated, not to enforce a patent
+(such as an express permission to practice a patent or covenant not to
+sue for patent infringement).  To "grant" such a patent license to a
+party means to make such an agreement or commitment not to enforce a
+patent against the party.
+
+  If you convey a covered work, knowingly relying on a patent license,
+and the Corresponding Source of the work is not available for anyone
+to copy, free of charge and under the terms of this License, through a
+publicly available network server or other readily accessible means,
+then you must either (1) cause the Corresponding Source to be so
+available, or (2) arrange to deprive yourself of the benefit of the
+patent license for this particular work, or (3) arrange, in a manner
+consistent with the requirements of this License, to extend the patent
+license to downstream recipients.  "Knowingly relying" means you have
+actual knowledge that, but for the patent license, your conveying the
+covered work in a country, or your recipient's use of the covered work
+in a country, would infringe one or more identifiable patents in that
+country that you have reason to believe are valid.
+
+  If, pursuant to or in connection with a single transaction or
+arrangement, you convey, or propagate by procuring conveyance of, a
+covered work, and grant a patent license to some of the parties
+receiving the covered work authorizing them to use, propagate, modify
+or convey a specific copy of the covered work, then the patent license
+you grant is automatically extended to all recipients of the covered
+work and works based on it.
+
+  A patent license is "discriminatory" if it does not include within
+the scope of its coverage, prohibits the exercise of, or is
+conditioned on the non-exercise of one or more of the rights that are
+specifically granted under this License.  You may not convey a covered
+work if you are a party to an arrangement with a third party that is
+in the business of distributing software, under which you make payment
+to the third party based on the extent of your activity of conveying
+the work, and under which the third party grants, to any of the
+parties who would receive the covered work from you, a discriminatory
+patent license (a) in connection with copies of the covered work
+conveyed by you (or copies made from those copies), or (b) primarily
+for and in connection with specific products or compilations that
+contain the covered work, unless you entered into that arrangement,
+or that patent license was granted, prior to 28 March 2007.
+
+  Nothing in this License shall be construed as excluding or limiting
+any implied license or other defenses to infringement that may
+otherwise be available to you under applicable patent law.
+
+  12. No Surrender of Others' Freedom.
+
+  If conditions are imposed on you (whether by court order, agreement or
+otherwise) that contradict the conditions of this License, they do not
+excuse you from the conditions of this License.  If you cannot convey a
+covered work so as to satisfy simultaneously your obligations under this
+License and any other pertinent obligations, then as a consequence you may
+not convey it at all.  For example, if you agree to terms that obligate you
+to collect a royalty for further conveying from those to whom you convey
+the Program, the only way you could satisfy both those terms and this
+License would be to refrain entirely from conveying the Program.
+
+  13. Use with the GNU Affero General Public License.
+
+  Notwithstanding any other provision of this License, you have
+permission to link or combine any covered work with a work licensed
+under version 3 of the GNU Affero General Public License into a single
+combined work, and to convey the resulting work.  The terms of this
+License will continue to apply to the part which is the covered work,
+but the special requirements of the GNU Affero General Public License,
+section 13, concerning interaction through a network will apply to the
+combination as such.
+
+  14. Revised Versions of this License.
+
+  The Free Software Foundation may publish revised and/or new versions of
+the GNU General Public License from time to time.  Such new versions will
+be similar in spirit to the present version, but may differ in detail to
+address new problems or concerns.
+
+  Each version is given a distinguishing version number.  If the
+Program specifies that a certain numbered version of the GNU General
+Public License "or any later version" applies to it, you have the
+option of following the terms and conditions either of that numbered
+version or of any later version published by the Free Software
+Foundation.  If the Program does not specify a version number of the
+GNU General Public License, you may choose any version ever published
+by the Free Software Foundation.
+
+  If the Program specifies that a proxy can decide which future
+versions of the GNU General Public License can be used, that proxy's
+public statement of acceptance of a version permanently authorizes you
+to choose that version for the Program.
+
+  Later license versions may give you additional or different
+permissions.  However, no additional obligations are imposed on any
+author or copyright holder as a result of your choosing to follow a
+later version.
+
+  15. Disclaimer of Warranty.
+
+  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY
+APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT
+HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY
+OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,
+THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM
+IS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF
+ALL NECESSARY SERVICING, REPAIR OR CORRECTION.
+
+  16. Limitation of Liability.
+
+  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
+WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS
+THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY
+GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE
+USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF
+DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD
+PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),
+EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGES.
+
+  17. Interpretation of Sections 15 and 16.
+
+  If the disclaimer of warranty and limitation of liability provided
+above cannot be given local legal effect according to their terms,
+reviewing courts shall apply local law that most closely approximates
+an absolute waiver of all civil liability in connection with the
+Program, unless a warranty or assumption of liability accompanies a
+copy of the Program in return for a fee.
+
+                     END OF TERMS AND CONDITIONS
+
+            How to Apply These Terms to Your New Programs
+
+  If you develop a new program, and you want it to be of the greatest
+possible use to the public, the best way to achieve this is to make it
+free software which everyone can redistribute and change under these terms.
+
+  To do so, attach the following notices to the program.  It is safest
+to attach them to the start of each source file to most effectively
+state the exclusion of warranty; and each file should have at least
+the "copyright" line and a pointer to where the full notice is found.
+
+    <one line to give the program's name and a brief idea of what it does.>
+    Copyright (C) <year>  <name of author>
+
+    This program is free software: you can redistribute it and/or modify
+    it under the terms of the GNU General Public License as published by
+    the Free Software Foundation, either version 3 of the License, or
+    (at your option) any later version.
+
+    This program is distributed in the hope that it will be useful,
+    but WITHOUT ANY WARRANTY; without even the implied warranty of
+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+    GNU General Public License for more details.
+
+    You should have received a copy of the GNU General Public License
+    along with this program.  If not, see <https://www.gnu.org/licenses/>.
+
+Also add information on how to contact you by electronic and paper mail.
+
+  If the program does terminal interaction, make it output a short
+notice like this when it starts in an interactive mode:
+
+    <program>  Copyright (C) <year>  <name of author>
+    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.
+    This is free software, and you are welcome to redistribute it
+    under certain conditions; type `show c' for details.
+
+The hypothetical commands `show w' and `show c' should show the appropriate
+parts of the General Public License.  Of course, your program's commands
+might be different; for a GUI interface, you would use an "about box".
+
+  You should also get your employer (if you work as a programmer) or school,
+if any, to sign a "copyright disclaimer" for the program, if necessary.
+For more information on this, and how to apply and follow the GNU GPL, see
+<https://www.gnu.org/licenses/>.
+
+  The GNU General Public License does not permit incorporating your program
+into proprietary programs.  If your program is a subroutine library, you
+may consider it more useful to permit linking proprietary applications with
+the library.  If this is what you want to do, use the GNU Lesser General
+Public License instead of this License.  But first, please read
+<https://www.gnu.org/licenses/why-not-lgpl.html>.
diff -ruN traderjoe/README.md traderjoe/README.md
--- traderjoe/README.md	1969-12-31 16:00:00.000000000 -0800
+++ traderjoe/README.md	2022-03-11 13:33:36.000000000 -0800
@@ -0,0 +1,13 @@
+# Uniswap V2 Area
+
+Code from [Uniswap V2](https://github.com/Uniswap/uniswap-v2-core/tree/27f6354bae6685612c182c3bc7577e61bc8717e3/contracts) with the following modifications.
+
+1. Change contract version to 0.6.12 and do the necessary patching.
+2. Add `migrator` member in `UniswapV2Factory` which can be set by `feeToSetter`.
+3. Allow `migrator` to specify the amount of `liquidity` during the first mint. Disallow first mint if migrator is set.
+
+To see all diffs:
+
+```
+$ git diff 4c4bf551417e3df09a25aa0dbb6941cccbbac11a .
+```
diff -ruN traderjoe/interfaces/IERC20.sol traderjoe/interfaces/IERC20.sol
--- traderjoe/interfaces/IERC20.sol	1969-12-31 16:00:00.000000000 -0800
+++ traderjoe/interfaces/IERC20.sol	2022-03-11 13:33:36.000000000 -0800
@@ -0,0 +1,30 @@
+// SPDX-License-Identifier: GPL-3.0
+
+pragma solidity >=0.5.0;
+
+interface IERC20Joe {
+    event Approval(address indexed owner, address indexed spender, uint256 value);
+    event Transfer(address indexed from, address indexed to, uint256 value);
+
+    function name() external view returns (string memory);
+
+    function symbol() external view returns (string memory);
+
+    function decimals() external view returns (uint8);
+
+    function totalSupply() external view returns (uint256);
+
+    function balanceOf(address owner) external view returns (uint256);
+
+    function allowance(address owner, address spender) external view returns (uint256);
+
+    function approve(address spender, uint256 value) external returns (bool);
+
+    function transfer(address to, uint256 value) external returns (bool);
+
+    function transferFrom(
+        address from,
+        address to,
+        uint256 value
+    ) external returns (bool);
+}
diff -ruN traderjoe/interfaces/IJoeCallee.sol traderjoe/interfaces/IJoeCallee.sol
--- traderjoe/interfaces/IJoeCallee.sol	1969-12-31 16:00:00.000000000 -0800
+++ traderjoe/interfaces/IJoeCallee.sol	2022-03-11 13:33:36.000000000 -0800
@@ -0,0 +1,12 @@
+// SPDX-License-Identifier: GPL-3.0
+
+pragma solidity >=0.5.0;
+
+interface IJoeCallee {
+    function joeCall(
+        address sender,
+        uint256 amount0,
+        uint256 amount1,
+        bytes calldata data
+    ) external;
+}
diff -ruN traderjoe/interfaces/IJoeERC20.sol traderjoe/interfaces/IJoeERC20.sol
--- traderjoe/interfaces/IJoeERC20.sol	1969-12-31 16:00:00.000000000 -0800
+++ traderjoe/interfaces/IJoeERC20.sol	2022-03-11 13:33:36.000000000 -0800
@@ -0,0 +1,46 @@
+// SPDX-License-Identifier: GPL-3.0
+
+pragma solidity >=0.5.0;
+
+interface IJoeERC20 {
+    event Approval(address indexed owner, address indexed spender, uint256 value);
+    event Transfer(address indexed from, address indexed to, uint256 value);
+
+    function name() external pure returns (string memory);
+
+    function symbol() external pure returns (string memory);
+
+    function decimals() external pure returns (uint8);
+
+    function totalSupply() external view returns (uint256);
+
+    function balanceOf(address owner) external view returns (uint256);
+
+    function allowance(address owner, address spender) external view returns (uint256);
+
+    function approve(address spender, uint256 value) external returns (bool);
+
+    function transfer(address to, uint256 value) external returns (bool);
+
+    function transferFrom(
+        address from,
+        address to,
+        uint256 value
+    ) external returns (bool);
+
+    function DOMAIN_SEPARATOR() external view returns (bytes32);
+
+    function PERMIT_TYPEHASH() external pure returns (bytes32);
+
+    function nonces(address owner) external view returns (uint256);
+
+    function permit(
+        address owner,
+        address spender,
+        uint256 value,
+        uint256 deadline,
+        uint8 v,
+        bytes32 r,
+        bytes32 s
+    ) external;
+}
diff -ruN traderjoe/interfaces/IJoeFactory.sol traderjoe/interfaces/IJoeFactory.sol
--- traderjoe/interfaces/IJoeFactory.sol	1969-12-31 16:00:00.000000000 -0800
+++ traderjoe/interfaces/IJoeFactory.sol	2022-03-11 13:33:36.000000000 -0800
@@ -0,0 +1,27 @@
+// SPDX-License-Identifier: GPL-3.0
+
+pragma solidity >=0.5.0;
+
+interface IJoeFactory {
+    event PairCreated(address indexed token0, address indexed token1, address pair, uint256);
+
+    function feeTo() external view returns (address);
+
+    function feeToSetter() external view returns (address);
+
+    function migrator() external view returns (address);
+
+    function getPair(address tokenA, address tokenB) external view returns (address pair);
+
+    function allPairs(uint256) external view returns (address pair);
+
+    function allPairsLength() external view returns (uint256);
+
+    function createPair(address tokenA, address tokenB) external returns (address pair);
+
+    function setFeeTo(address) external;
+
+    function setFeeToSetter(address) external;
+
+    function setMigrator(address) external;
+}
diff -ruN traderjoe/interfaces/IJoePair.sol traderjoe/interfaces/IJoePair.sol
--- traderjoe/interfaces/IJoePair.sol	1969-12-31 16:00:00.000000000 -0800
+++ traderjoe/interfaces/IJoePair.sol	2022-03-11 13:33:36.000000000 -0800
@@ -0,0 +1,98 @@
+// SPDX-License-Identifier: GPL-3.0
+
+pragma solidity >=0.5.0;
+
+interface IJoePair {
+    event Approval(address indexed owner, address indexed spender, uint256 value);
+    event Transfer(address indexed from, address indexed to, uint256 value);
+
+    function name() external pure returns (string memory);
+
+    function symbol() external pure returns (string memory);
+
+    function decimals() external pure returns (uint8);
+
+    function totalSupply() external view returns (uint256);
+
+    function balanceOf(address owner) external view returns (uint256);
+
+    function allowance(address owner, address spender) external view returns (uint256);
+
+    function approve(address spender, uint256 value) external returns (bool);
+
+    function transfer(address to, uint256 value) external returns (bool);
+
+    function transferFrom(
+        address from,
+        address to,
+        uint256 value
+    ) external returns (bool);
+
+    function DOMAIN_SEPARATOR() external view returns (bytes32);
+
+    function PERMIT_TYPEHASH() external pure returns (bytes32);
+
+    function nonces(address owner) external view returns (uint256);
+
+    function permit(
+        address owner,
+        address spender,
+        uint256 value,
+        uint256 deadline,
+        uint8 v,
+        bytes32 r,
+        bytes32 s
+    ) external;
+
+    event Mint(address indexed sender, uint256 amount0, uint256 amount1);
+    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);
+    event Swap(
+        address indexed sender,
+        uint256 amount0In,
+        uint256 amount1In,
+        uint256 amount0Out,
+        uint256 amount1Out,
+        address indexed to
+    );
+    event Sync(uint112 reserve0, uint112 reserve1);
+
+    function MINIMUM_LIQUIDITY() external pure returns (uint256);
+
+    function factory() external view returns (address);
+
+    function token0() external view returns (address);
+
+    function token1() external view returns (address);
+
+    function getReserves()
+        external
+        view
+        returns (
+            uint112 reserve0,
+            uint112 reserve1,
+            uint32 blockTimestampLast
+        );
+
+    function price0CumulativeLast() external view returns (uint256);
+
+    function price1CumulativeLast() external view returns (uint256);
+
+    function kLast() external view returns (uint256);
+
+    function mint(address to) external returns (uint256 liquidity);
+
+    function burn(address to) external returns (uint256 amount0, uint256 amount1);
+
+    function swap(
+        uint256 amount0Out,
+        uint256 amount1Out,
+        address to,
+        bytes calldata data
+    ) external;
+
+    function skim(address to) external;
+
+    function sync() external;
+
+    function initialize(address, address) external;
+}
diff -ruN traderjoe/interfaces/IJoeRouter01.sol traderjoe/interfaces/IJoeRouter01.sol
--- traderjoe/interfaces/IJoeRouter01.sol	1969-12-31 16:00:00.000000000 -0800
+++ traderjoe/interfaces/IJoeRouter01.sol	2022-03-11 13:33:36.000000000 -0800
@@ -0,0 +1,156 @@
+// SPDX-License-Identifier: GPL-3.0
+
+pragma solidity >=0.6.2;
+
+interface IJoeRouter01 {
+    function factory() external pure returns (address);
+
+    function WAVAX() external pure returns (address);
+
+    function addLiquidity(
+        address tokenA,
+        address tokenB,
+        uint256 amountADesired,
+        uint256 amountBDesired,
+        uint256 amountAMin,
+        uint256 amountBMin,
+        address to,
+        uint256 deadline
+    )
+        external
+        returns (
+            uint256 amountA,
+            uint256 amountB,
+            uint256 liquidity
+        );
+
+    function addLiquidityAVAX(
+        address token,
+        uint256 amountTokenDesired,
+        uint256 amountTokenMin,
+        uint256 amountAVAXMin,
+        address to,
+        uint256 deadline
+    )
+        external
+        payable
+        returns (
+            uint256 amountToken,
+            uint256 amountAVAX,
+            uint256 liquidity
+        );
+
+    function removeLiquidity(
+        address tokenA,
+        address tokenB,
+        uint256 liquidity,
+        uint256 amountAMin,
+        uint256 amountBMin,
+        address to,
+        uint256 deadline
+    ) external returns (uint256 amountA, uint256 amountB);
+
+    function removeLiquidityAVAX(
+        address token,
+        uint256 liquidity,
+        uint256 amountTokenMin,
+        uint256 amountAVAXMin,
+        address to,
+        uint256 deadline
+    ) external returns (uint256 amountToken, uint256 amountAVAX);
+
+    function removeLiquidityWithPermit(
+        address tokenA,
+        address tokenB,
+        uint256 liquidity,
+        uint256 amountAMin,
+        uint256 amountBMin,
+        address to,
+        uint256 deadline,
+        bool approveMax,
+        uint8 v,
+        bytes32 r,
+        bytes32 s
+    ) external returns (uint256 amountA, uint256 amountB);
+
+    function removeLiquidityAVAXWithPermit(
+        address token,
+        uint256 liquidity,
+        uint256 amountTokenMin,
+        uint256 amountAVAXMin,
+        address to,
+        uint256 deadline,
+        bool approveMax,
+        uint8 v,
+        bytes32 r,
+        bytes32 s
+    ) external returns (uint256 amountToken, uint256 amountAVAX);
+
+    function swapExactTokensForTokens(
+        uint256 amountIn,
+        uint256 amountOutMin,
+        address[] calldata path,
+        address to,
+        uint256 deadline
+    ) external returns (uint256[] memory amounts);
+
+    function swapTokensForExactTokens(
+        uint256 amountOut,
+        uint256 amountInMax,
+        address[] calldata path,
+        address to,
+        uint256 deadline
+    ) external returns (uint256[] memory amounts);
+
+    function swapExactAVAXForTokens(
+        uint256 amountOutMin,
+        address[] calldata path,
+        address to,
+        uint256 deadline
+    ) external payable returns (uint256[] memory amounts);
+
+    function swapTokensForExactAVAX(
+        uint256 amountOut,
+        uint256 amountInMax,
+        address[] calldata path,
+        address to,
+        uint256 deadline
+    ) external returns (uint256[] memory amounts);
+
+    function swapExactTokensForAVAX(
+        uint256 amountIn,
+        uint256 amountOutMin,
+        address[] calldata path,
+        address to,
+        uint256 deadline
+    ) external returns (uint256[] memory amounts);
+
+    function swapAVAXForExactTokens(
+        uint256 amountOut,
+        address[] calldata path,
+        address to,
+        uint256 deadline
+    ) external payable returns (uint256[] memory amounts);
+
+    function quote(
+        uint256 amountA,
+        uint256 reserveA,
+        uint256 reserveB
+    ) external pure returns (uint256 amountB);
+
+    function getAmountOut(
+        uint256 amountIn,
+        uint256 reserveIn,
+        uint256 reserveOut
+    ) external pure returns (uint256 amountOut);
+
+    function getAmountIn(
+        uint256 amountOut,
+        uint256 reserveIn,
+        uint256 reserveOut
+    ) external pure returns (uint256 amountIn);
+
+    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);
+
+    function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);
+}
diff -ruN traderjoe/interfaces/IJoeRouter02.sol traderjoe/interfaces/IJoeRouter02.sol
--- traderjoe/interfaces/IJoeRouter02.sol	1969-12-31 16:00:00.000000000 -0800
+++ traderjoe/interfaces/IJoeRouter02.sol	2022-03-11 13:33:36.000000000 -0800
@@ -0,0 +1,52 @@
+// SPDX-License-Identifier: GPL-3.0
+
+pragma solidity >=0.6.2;
+
+import "./IJoeRouter01.sol";
+
+interface IJoeRouter02 is IJoeRouter01 {
+    function removeLiquidityAVAXSupportingFeeOnTransferTokens(
+        address token,
+        uint256 liquidity,
+        uint256 amountTokenMin,
+        uint256 amountAVAXMin,
+        address to,
+        uint256 deadline
+    ) external returns (uint256 amountAVAX);
+
+    function removeLiquidityAVAXWithPermitSupportingFeeOnTransferTokens(
+        address token,
+        uint256 liquidity,
+        uint256 amountTokenMin,
+        uint256 amountAVAXMin,
+        address to,
+        uint256 deadline,
+        bool approveMax,
+        uint8 v,
+        bytes32 r,
+        bytes32 s
+    ) external returns (uint256 amountAVAX);
+
+    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
+        uint256 amountIn,
+        uint256 amountOutMin,
+        address[] calldata path,
+        address to,
+        uint256 deadline
+    ) external;
+
+    function swapExactAVAXForTokensSupportingFeeOnTransferTokens(
+        uint256 amountOutMin,
+        address[] calldata path,
+        address to,
+        uint256 deadline
+    ) external payable;
+
+    function swapExactTokensForAVAXSupportingFeeOnTransferTokens(
+        uint256 amountIn,
+        uint256 amountOutMin,
+        address[] calldata path,
+        address to,
+        uint256 deadline
+    ) external;
+}
diff -ruN traderjoe/interfaces/IWAVAX.sol traderjoe/interfaces/IWAVAX.sol
--- traderjoe/interfaces/IWAVAX.sol	1969-12-31 16:00:00.000000000 -0800
+++ traderjoe/interfaces/IWAVAX.sol	2022-03-11 13:33:36.000000000 -0800
@@ -0,0 +1,11 @@
+// SPDX-License-Identifier: GPL-3.0
+
+pragma solidity >=0.5.0;
+
+interface IWAVAX {
+    function deposit() external payable;
+
+    function transfer(address to, uint256 value) external returns (bool);
+
+    function withdraw(uint256) external;
+}
diff -ruN traderjoe/libraries/JoeLibrary.sol traderjoe/libraries/JoeLibrary.sol
--- traderjoe/libraries/JoeLibrary.sol	1969-12-31 16:00:00.000000000 -0800
+++ traderjoe/libraries/JoeLibrary.sol	2022-03-11 13:33:36.000000000 -0800
@@ -0,0 +1,118 @@
+// SPDX-License-Identifier: GPL-3.0
+
+pragma solidity >=0.5.0;
+
+import "../interfaces/IJoePair.sol";
+
+import "./SafeMath.sol";
+
+library JoeLibrary {
+    using SafeMathJoe for uint256;
+
+    // returns sorted token addresses, used to handle return values from pairs sorted in this order
+    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {
+        require(tokenA != tokenB, "JoeLibrary: IDENTICAL_ADDRESSES");
+        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);
+        require(token0 != address(0), "JoeLibrary: ZERO_ADDRESS");
+    }
+
+    // calculates the CREATE2 address for a pair without making any external calls
+    function pairFor(
+        address factory,
+        address tokenA,
+        address tokenB
+    ) internal pure returns (address pair) {
+        (address token0, address token1) = sortTokens(tokenA, tokenB);
+        pair = address(
+            uint256(
+                keccak256(
+                    abi.encodePacked(
+                        hex"ff",
+                        factory,
+                        keccak256(abi.encodePacked(token0, token1)),
+                        hex"0bbca9af0511ad1a1da383135cf3a8d2ac620e549ef9f6ae3a4c33c2fed0af91" // init code fuji
+                    )
+                )
+            )
+        );
+    }
+
+    // fetches and sorts the reserves for a pair
+    function getReserves(
+        address factory,
+        address tokenA,
+        address tokenB
+    ) internal view returns (uint256 reserveA, uint256 reserveB) {
+        (address token0, ) = sortTokens(tokenA, tokenB);
+        (uint256 reserve0, uint256 reserve1, ) = IJoePair(pairFor(factory, tokenA, tokenB)).getReserves();
+        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);
+    }
+
+    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset
+    function quote(
+        uint256 amountA,
+        uint256 reserveA,
+        uint256 reserveB
+    ) internal pure returns (uint256 amountB) {
+        require(amountA > 0, "JoeLibrary: INSUFFICIENT_AMOUNT");
+        require(reserveA > 0 && reserveB > 0, "JoeLibrary: INSUFFICIENT_LIQUIDITY");
+        amountB = amountA.mul(reserveB) / reserveA;
+    }
+
+    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset
+    function getAmountOut(
+        uint256 amountIn,
+        uint256 reserveIn,
+        uint256 reserveOut
+    ) internal pure returns (uint256 amountOut) {
+        require(amountIn > 0, "JoeLibrary: INSUFFICIENT_INPUT_AMOUNT");
+        require(reserveIn > 0 && reserveOut > 0, "JoeLibrary: INSUFFICIENT_LIQUIDITY");
+        uint256 amountInWithFee = amountIn.mul(997);
+        uint256 numerator = amountInWithFee.mul(reserveOut);
+        uint256 denominator = reserveIn.mul(1000).add(amountInWithFee);
+        amountOut = numerator / denominator;
+    }
+
+    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset
+    function getAmountIn(
+        uint256 amountOut,
+        uint256 reserveIn,
+        uint256 reserveOut
+    ) internal pure returns (uint256 amountIn) {
+        require(amountOut > 0, "JoeLibrary: INSUFFICIENT_OUTPUT_AMOUNT");
+        require(reserveIn > 0 && reserveOut > 0, "JoeLibrary: INSUFFICIENT_LIQUIDITY");
+        uint256 numerator = reserveIn.mul(amountOut).mul(1000);
+        uint256 denominator = reserveOut.sub(amountOut).mul(997);
+        amountIn = (numerator / denominator).add(1);
+    }
+
+    // performs chained getAmountOut calculations on any number of pairs
+    function getAmountsOut(
+        address factory,
+        uint256 amountIn,
+        address[] memory path
+    ) internal view returns (uint256[] memory amounts) {
+        require(path.length >= 2, "JoeLibrary: INVALID_PATH");
+        amounts = new uint256[](path.length);
+        amounts[0] = amountIn;
+        for (uint256 i; i < path.length - 1; i++) {
+            (uint256 reserveIn, uint256 reserveOut) = getReserves(factory, path[i], path[i + 1]);
+            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);
+        }
+    }
+
+    // performs chained getAmountIn calculations on any number of pairs
+    function getAmountsIn(
+        address factory,
+        uint256 amountOut,
+        address[] memory path
+    ) internal view returns (uint256[] memory amounts) {
+        require(path.length >= 2, "JoeLibrary: INVALID_PATH");
+        amounts = new uint256[](path.length);
+        amounts[amounts.length - 1] = amountOut;
+        for (uint256 i = path.length - 1; i > 0; i--) {
+            (uint256 reserveIn, uint256 reserveOut) = getReserves(factory, path[i - 1], path[i]);
+            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);
+        }
+    }
+}
diff -ruN traderjoe/libraries/Math.sol traderjoe/libraries/Math.sol
--- traderjoe/libraries/Math.sol	1969-12-31 16:00:00.000000000 -0800
+++ traderjoe/libraries/Math.sol	2022-03-11 13:33:36.000000000 -0800
@@ -0,0 +1,25 @@
+// SPDX-License-Identifier: GPL-3.0
+
+pragma solidity =0.6.12;
+
+// a library for performing various math operations
+
+library Math {
+    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {
+        z = x < y ? x : y;
+    }
+
+    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)
+    function sqrt(uint256 y) internal pure returns (uint256 z) {
+        if (y > 3) {
+            z = y;
+            uint256 x = y / 2 + 1;
+            while (x < z) {
+                z = x;
+                x = (y / x + x) / 2;
+            }
+        } else if (y != 0) {
+            z = 1;
+        }
+    }
+}
diff -ruN traderjoe/libraries/SafeMath.sol traderjoe/libraries/SafeMath.sol
--- traderjoe/libraries/SafeMath.sol	1969-12-31 16:00:00.000000000 -0800
+++ traderjoe/libraries/SafeMath.sol	2022-03-11 13:33:36.000000000 -0800
@@ -0,0 +1,19 @@
+// SPDX-License-Identifier: GPL-3.0
+
+pragma solidity =0.6.12;
+
+// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)
+
+library SafeMathJoe {
+    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {
+        require((z = x + y) >= x, "ds-math-add-overflow");
+    }
+
+    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {
+        require((z = x - y) <= x, "ds-math-sub-underflow");
+    }
+
+    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {
+        require(y == 0 || (z = x * y) / y == x, "ds-math-mul-overflow");
+    }
+}
diff -ruN traderjoe/libraries/TransferHelper.sol traderjoe/libraries/TransferHelper.sol
--- traderjoe/libraries/TransferHelper.sol	1969-12-31 16:00:00.000000000 -0800
+++ traderjoe/libraries/TransferHelper.sol	2022-03-11 13:33:36.000000000 -0800
@@ -0,0 +1,42 @@
+// SPDX-License-Identifier: GPL-3.0
+
+pragma solidity >=0.6.0;
+
+// helper methods for interacting with ERC20 tokens and sending AVAX that do not consistently return true/false
+library TransferHelper {
+    function safeApprove(
+        address token,
+        address to,
+        uint256 value
+    ) internal {
+        // bytes4(keccak256(bytes('approve(address,uint256)')));
+        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));
+        require(success && (data.length == 0 || abi.decode(data, (bool))), "TransferHelper: APPROVE_FAILED");
+    }
+
+    function safeTransfer(
+        address token,
+        address to,
+        uint256 value
+    ) internal {
+        // bytes4(keccak256(bytes('transfer(address,uint256)')));
+        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));
+        require(success && (data.length == 0 || abi.decode(data, (bool))), "TransferHelper: TRANSFER_FAILED");
+    }
+
+    function safeTransferFrom(
+        address token,
+        address from,
+        address to,
+        uint256 value
+    ) internal {
+        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));
+        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));
+        require(success && (data.length == 0 || abi.decode(data, (bool))), "TransferHelper: TRANSFER_FROM_FAILED");
+    }
+
+    function safeTransferAVAX(address to, uint256 value) internal {
+        (bool success, ) = to.call{value: value}(new bytes(0));
+        require(success, "TransferHelper: AVAX_TRANSFER_FAILED");
+    }
+}
diff -ruN traderjoe/libraries/UQ112x112.sol traderjoe/libraries/UQ112x112.sol
--- traderjoe/libraries/UQ112x112.sol	1969-12-31 16:00:00.000000000 -0800
+++ traderjoe/libraries/UQ112x112.sol	2022-03-11 13:33:36.000000000 -0800
@@ -0,0 +1,22 @@
+// SPDX-License-Identifier: GPL-3.0
+
+pragma solidity =0.6.12;
+
+// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))
+
+// range: [0, 2**112 - 1]
+// resolution: 1 / 2**112
+
+library UQ112x112 {
+    uint224 constant Q112 = 2**112;
+
+    // encode a uint112 as a UQ112x112
+    function encode(uint112 y) internal pure returns (uint224 z) {
+        z = uint224(y) * Q112; // never overflows
+    }
+
+    // divide a UQ112x112 by a uint112, returning a UQ112x112
+    function uqdiv(uint224 x, uint112 y) internal pure returns (uint224 z) {
+        z = x / uint224(y);
+    }
+}
